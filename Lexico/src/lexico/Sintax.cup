package lexico;

import java_cup.runtime.Symbol;
import java.util.Stack;
import java.util.ArrayList;
import java.util.Iterator;

parser code
{:  public ArrayList<Symbol> errores = new ArrayList<>();
  public ArrayList<String> erroresStr = new ArrayList<>();
  
  public void syntax_error(Symbol s) {
    System.out.println("ERROR EN " + s.value + " " + Integer.toString(s.right + 1) + ": " + Integer.toString(s.left + 1) );
    String cadena = "";
    for (int i = this.stack.size() - 1; i > 0; i--) {
      Symbol sp = this.stack.get(i);
       
      System.out.println(sp.value + " " + Integer.toString(sp.right + 1) + ": " + Integer.toString(sp.left + 1) );
      cadena = sp.value + " " + cadena;
      System.out.println(cadena );
        if(sym.T_dato == sp.sym){
              for(int j = i-1; j > 0; j--){                
                  sp = this.stack.get(j);
                  cadena = sp.value + " " + cadena;
                  if ("struct".equals(sp.value)) {
                      cadena += "~" + s.value + "~ ...";
                      Symbol sp2 = new Symbol(sp.sym, sp.left, sp.right, cadena);
                      errores.add(sp2);
                      erroresStr.add("Variable_Struct");
                      break;
                  }
                  if("(".equals(sp.value)){
                      for(int k = j-1; k > 0; k--){ 
                          sp = this.stack.get(k);
                          cadena = sp.value + " " + cadena;
                          if ("function".equals(sp.value)) {
                              cadena += "~" + s.value + "~ ...";
                              Symbol sp2 = new Symbol(sp.sym, sp.left, sp.right, cadena);
                              errores.add(sp2);
                              erroresStr.add("Parametro_Function");
                              break;
                          }
                          if ("returns".equals(sp.value)) {
                              cadena += "~" + s.value + "~ ...";
                              Symbol sp2 = new Symbol(sp.sym, sp.left, sp.right, cadena);
                              errores.add(sp2);
                              erroresStr.add("Returns_Function");
                              break;
                          }
                      }
                      break;
                  }
                  if ("returns".equals(sp.value)) {
                            System.out.println("Wh");
                              cadena += "~" + s.value + "~ ...";
                              Symbol sp2 = new Symbol(sp.sym, sp.left, sp.right, cadena);
                              errores.add(sp2);
                              erroresStr.add("Returns_Function");
                              break;
                          }

                  if ("contract".equals(sp.value)){
                      cadena += "~" + s.value + "~ ...";
                      Symbol sp2 = new Symbol(sp.sym, sp.left, sp.right, cadena);
                      errores.add(sp2);
                      erroresStr.add("Variable_Contract");
                      break;
                  }
                  if ("function".equals(sp.value)){
                      cadena += "~" + s.value + "~ ...";
                      Symbol sp2 = new Symbol(sp.sym, sp.left, sp.right, cadena);
                      errores.add(sp2);
                      erroresStr.add("Variable_Function");
                      break;
                  }
              }
              break;  
        }
        if ("returns".equals(sp.value)) {
          cadena += "~" + s.value + "~ ...";
          Symbol sp2 = new Symbol(sp.sym, sp.left, sp.right, cadena);
          errores.add(sp2);
          erroresStr.add("Returns_Function");
          break;
        }
      if ("enum".equals(sp.value)) {
        System.out.println("Soy un error de enum xd");
        //System.out.println("Soy un error de enum xd");
        cadena += "~" + s.value + "~ ...";
        //if (this.lookahead != null) for (Symbol x : this.lookahead) System.out.println(x.value);
        Symbol sp2 = new Symbol(sp.sym, sp.left, sp.right, cadena);
        errores.add(sp2);
        erroresStr.add("Enum");
        break;
      }
      if ("struct".equals(sp.value)) {
        //System.out.println("Soy un error de struct chama");
        cadena += "~" + s.value + "~ ...";
        //if (this.lookahead != null) for (Symbol x : this.lookahead) System.out.println(x.value);
        Symbol sp2 = new Symbol(sp.sym, sp.left, sp.right, cadena);
        errores.add(sp2);
        erroresStr.add("Struct");
        break;
      }
      if ("function".equals(sp.value)) {
        System.out.println("Soy un error de function chama");
        cadena += "~" + s.value + "~ ...";
        System.out.println(cadena);
        //if (this.lookahead != null) for (Symbol x : this.lookahead) System.out.println(x.value);
        Symbol sp2 = new Symbol(sp.sym, sp.left, sp.right, cadena);
        errores.add(sp2);
        erroresStr.add("Function");
        break;
      }
      if ("pragma".equals(sp.value)) {
        //System.out.println("Soy un error de inicio");
        cadena += "~" + s.value + "~ ...";
        //if (this.lookahead != null) for (Symbol x : this.lookahead) System.out.println(x.value);
        Symbol sp2 = new Symbol(sp.sym, sp.left, sp.right, cadena);
        errores.add(sp2);
        erroresStr.add("Inicio");
        break;
      }
      if (";".equals(sp.value)) {
        //System.out.println("Soy un error de Expresion");
        cadena += "~" + s.value + "~ ...";
        //if (this.lookahead != null) for (Symbol x : this.lookahead) System.out.println(x.value);
        Symbol sp2 = new Symbol(sp.sym, sp.left, sp.right, cadena);
        errores.add(sp2);
        erroresStr.add("Expresion");
        break;
      }
      if ("contract".equals(sp.value)) {
        //System.out.println("Soy un error de inicio");
        cadena += "~" + s.value + "~ ...";
        //if (this.lookahead != null) for (Symbol x : this.lookahead) System.out.println(x.value);
        Symbol sp2 = new Symbol(sp.sym, sp.left, sp.right, cadena);
        errores.add(sp2);
        erroresStr.add("Inicio");
        break;
      }
      if ("if".equals(sp.value)) {
        //System.out.println("Soy un error de if");
        cadena += "~" + s.value + "~ ...";
        //if (this.lookahead != null) for (Symbol x : this.lookahead) System.out.println(x.value);
        Symbol sp2 = new Symbol(sp.sym, sp.left, sp.right, cadena);

        errores.add(sp2);
        erroresStr.add("If");
        

        break;
      }
      if ("for".equals(sp.value)) {
        //System.out.println("Soy un error de for");
        cadena += "~" + s.value + "~ ...";
        //if (this.lookahead != null) for (Symbol x : this.lookahead) System.out.println(x.value);
        Symbol sp2 = new Symbol(sp.sym, sp.left, sp.right, cadena);
        errores.add(sp2);
        erroresStr.add("For");

        break;
      }
      if ("while".equals(sp.value)) {
        //System.out.println("Soy un error de while");
        cadena += "~" + s.value + "~ ...";
        //if (this.lookahead != null) for (Symbol x : this.lookahead) System.out.println(x.value);
        Symbol sp2 = new Symbol(sp.sym, sp.left, sp.right, cadena);
        errores.add(sp2);
        erroresStr.add("While");

        break;
      }
      if ("do".equals(sp.value)) {
        //System.out.println("Soy un error de do");
        cadena += "~" + s.value + "~ ...";
        //if (this.lookahead != null) for (Symbol x : this.lookahead) System.out.println(x.value);
        Symbol sp2 = new Symbol(sp.sym, sp.left, sp.right, cadena);
        errores.add(sp2);
        erroresStr.add("Do");

        break;
      }
        }
  }
  @Override
  public int error_sync_size() {
    return 2;
  }

:};

terminal Linea, Comillas, T_dato, Cadena, If, Else, Do, While, For, Dos_Puntos,
    Igual, Op_logico, Op_relacional, Op_atribucion, Op_booleano, Parentesis_a, Parentesis_c,
    Llave_a, Llave_c, Corchete_a, Corchete_c, Main, P_coma, Identificador, Mas, Menos, Not,
    Numero,   Contract, Enum, Pragma, Solidity, Struct,Function,Modificador, Coma, Caret, Punto, This, Break, Continue, 
    String, Return, Returns,  Op_Aritmetico, Visibilidad, Pregunta, PALABRA_RESERVADA, UNIDAD, TRANSAC,ERROR_CEROS_A_LA_IZQUIERDA, ERROR_CARACTERES_NO_VALIDOS, ERROR_IDENTIFICADOR
    , ERROR_NOTACION_CIENTIFICA, STRING, ERROR_STRING, OPERADOR, ERROR_COMENTARIO,ERROR_HEXADECIMAL,  ERROR;

non terminal INICIO, CONTRATO, OP_TERNARIO, DECLARACION_FOR, IF, IF_ELSE, LISTA, PARAMETROS, OP_ARITMETICO, OP_UNARIO, 
    WHILE, DO_WHILE, FOR, EXPRESION_BOOLEANA, SENTENCIA, SENTENCIA_FOR, ENUMERADOR, VARIABLES, ASIGNACION, ESTRUCTURA, IDENTIFICADOR_COMPLEJO,
    FUNCION, MODIFICADORES, RETURNS, CUERPO, FUNCION_HEADER, ASIGNACION_BASICA, ASIGNACION_COMPLEJA, ARGUMENTOS,
    EXPRESION, ESTRUCTURA_CONTROL, IDENTIFICADOR_CUERPO, CUERPO_EC, EXPRESION_AUX, ATRIBUCION_IGUAL, LITERAL ;

start with INICIO;

INICIO ::= 
    Pragma Solidity Numero Numero P_coma CONTRATO |
    Pragma Solidity Caret Numero Numero P_coma CONTRATO |
    Pragma error P_coma CONTRATO |
    Pragma Solidity Caret Numero Numero P_coma error CONTRATO
;
CONTRATO ::=
    Contract Identificador Llave_a Llave_c CONTRATO |

    Contract Identificador Llave_a ENUMERADOR Llave_c CONTRATO |
    Contract Identificador Llave_a ENUMERADOR VARIABLES Llave_c CONTRATO |
    Contract Identificador Llave_a ENUMERADOR ESTRUCTURA Llave_c CONTRATO |
    Contract Identificador Llave_a ENUMERADOR FUNCION Llave_c CONTRATO |
    Contract Identificador Llave_a ENUMERADOR VARIABLES ESTRUCTURA Llave_c CONTRATO |
    Contract Identificador Llave_a ENUMERADOR VARIABLES FUNCION Llave_c CONTRATO |
    Contract Identificador Llave_a ENUMERADOR ESTRUCTURA FUNCION Llave_c CONTRATO |
    Contract Identificador Llave_a ENUMERADOR VARIABLES ESTRUCTURA FUNCION Llave_c CONTRATO |

    Contract Identificador Llave_a VARIABLES Llave_c CONTRATO |
    Contract Identificador Llave_a VARIABLES ESTRUCTURA Llave_c CONTRATO |
    Contract Identificador Llave_a VARIABLES FUNCION Llave_c CONTRATO |
    Contract Identificador Llave_a VARIABLES ESTRUCTURA FUNCION Llave_c CONTRATO |

    Contract Identificador Llave_a ESTRUCTURA Llave_c CONTRATO |
    Contract Identificador Llave_a ESTRUCTURA FUNCION Llave_c CONTRATO |

    Contract Identificador Llave_a FUNCION Llave_c CONTRATO |

    Contract Identificador Llave_a Llave_c |

    Contract Identificador Llave_a ENUMERADOR Llave_c |
    Contract Identificador Llave_a ENUMERADOR VARIABLES Llave_c |
    Contract Identificador Llave_a ENUMERADOR ESTRUCTURA Llave_c |
    Contract Identificador Llave_a ENUMERADOR FUNCION Llave_c |
    Contract Identificador Llave_a ENUMERADOR VARIABLES ESTRUCTURA Llave_c |
    Contract Identificador Llave_a ENUMERADOR VARIABLES FUNCION Llave_c |
    Contract Identificador Llave_a ENUMERADOR ESTRUCTURA FUNCION Llave_c |
    Contract Identificador Llave_a ENUMERADOR VARIABLES ESTRUCTURA FUNCION Llave_c |

    Contract Identificador Llave_a VARIABLES Llave_c |
    Contract Identificador Llave_a VARIABLES ESTRUCTURA Llave_c |
    Contract Identificador Llave_a VARIABLES FUNCION Llave_c |
    Contract Identificador Llave_a VARIABLES ESTRUCTURA FUNCION Llave_c |

    Contract Identificador Llave_a ESTRUCTURA Llave_c |
    Contract Identificador Llave_a ESTRUCTURA FUNCION Llave_c |

    Contract Identificador Llave_a FUNCION Llave_c | 

    Contract error Llave_a Llave_c CONTRATO |

    Contract error Llave_a ENUMERADOR Llave_c CONTRATO |
    Contract error Llave_a ENUMERADOR VARIABLES Llave_c CONTRATO |
    Contract error Llave_a ENUMERADOR ESTRUCTURA Llave_c CONTRATO |
    Contract error Llave_a ENUMERADOR FUNCION Llave_c CONTRATO |
    Contract error Llave_a ENUMERADOR VARIABLES ESTRUCTURA Llave_c CONTRATO |
    Contract error Llave_a ENUMERADOR VARIABLES FUNCION Llave_c CONTRATO |
    Contract error Llave_a ENUMERADOR ESTRUCTURA FUNCION Llave_c CONTRATO |
    Contract error Llave_a ENUMERADOR VARIABLES ESTRUCTURA FUNCION Llave_c CONTRATO |

    Contract error Llave_a VARIABLES Llave_c CONTRATO |
    Contract error Llave_a VARIABLES ESTRUCTURA Llave_c CONTRATO |
    Contract error Llave_a VARIABLES FUNCION Llave_c CONTRATO |
    Contract error Llave_a VARIABLES ESTRUCTURA FUNCION Llave_c CONTRATO |

    Contract error Llave_a ESTRUCTURA Llave_c CONTRATO |
    Contract error Llave_a ESTRUCTURA FUNCION Llave_c CONTRATO |

    Contract error Llave_a FUNCION Llave_c CONTRATO |

    Contract error Llave_a Llave_c |

    Contract error Llave_a ENUMERADOR Llave_c |
    Contract error Llave_a ENUMERADOR VARIABLES Llave_c |
    Contract error Llave_a ENUMERADOR ESTRUCTURA Llave_c |
    Contract error Llave_a ENUMERADOR FUNCION Llave_c |
    Contract error Llave_a ENUMERADOR VARIABLES ESTRUCTURA Llave_c |
    Contract error Llave_a ENUMERADOR VARIABLES FUNCION Llave_c |
    Contract error Llave_a ENUMERADOR ESTRUCTURA FUNCION Llave_c |
    Contract error Llave_a ENUMERADOR VARIABLES ESTRUCTURA FUNCION Llave_c |

    Contract error Llave_a VARIABLES Llave_c |
    Contract error Llave_a VARIABLES ESTRUCTURA Llave_c |
    Contract error Llave_a VARIABLES FUNCION Llave_c |
    Contract error Llave_a VARIABLES ESTRUCTURA FUNCION Llave_c |

    Contract error Llave_a ESTRUCTURA Llave_c |
    Contract error Llave_a ESTRUCTURA FUNCION Llave_c |

    Contract error Llave_a FUNCION Llave_c 

    
;
ENUMERADOR ::= 
    Enum Identificador Llave_a LISTA Llave_c ENUMERADOR |
    Enum Identificador Llave_a Llave_c ENUMERADOR |
    Enum Identificador Llave_a LISTA Llave_c |
    Enum Identificador Llave_a Llave_c |

    Enum error Llave_a LISTA Llave_c ENUMERADOR |
    Enum error Llave_a Llave_c ENUMERADOR |

    Enum Identificador error LISTA Llave_c ENUMERADOR |
    Enum Identificador error Llave_c ENUMERADOR |

    Enum error Llave_a LISTA Llave_c | 
    Enum error Llave_a Llave_c |

    Enum Identificador error LISTA Llave_c |
    Enum Identificador error Llave_c 
;
LISTA ::= 
    Identificador Coma LISTA |
    Identificador
;
VARIABLES ::=
    T_dato Visibilidad Identificador P_coma VARIABLES |
    T_dato Identificador P_coma VARIABLES |
    T_dato Corchete_a Corchete_c Visibilidad Identificador P_coma VARIABLES |
    T_dato Corchete_a Corchete_c Identificador P_coma VARIABLES |

    T_dato Visibilidad Identificador ASIGNACION P_coma VARIABLES |
    T_dato Identificador ASIGNACION P_coma VARIABLES |
    T_dato Corchete_a Corchete_c Visibilidad Identificador ASIGNACION P_coma VARIABLES |
    T_dato Corchete_a Corchete_c Identificador ASIGNACION P_coma VARIABLES |

    T_dato Visibilidad Identificador P_coma |
    T_dato Identificador P_coma |
    T_dato Corchete_a Corchete_c Visibilidad Identificador P_coma |
    T_dato Corchete_a Corchete_c Identificador P_coma |

    T_dato Visibilidad Identificador ASIGNACION P_coma |
    T_dato Identificador ASIGNACION P_coma |
    T_dato Corchete_a Corchete_c Visibilidad Identificador ASIGNACION P_coma |
    T_dato Corchete_a Corchete_c Identificador ASIGNACION P_coma |

    T_dato Visibilidad error P_coma VARIABLES |
    T_dato error P_coma VARIABLES |
    T_dato Corchete_a Corchete_c Visibilidad error P_coma VARIABLES |
    T_dato Corchete_a Corchete_c error P_coma VARIABLES |

    T_dato Visibilidad error ASIGNACION P_coma VARIABLES |
    T_dato error ASIGNACION P_coma VARIABLES |
    T_dato Corchete_a Corchete_c Visibilidad error ASIGNACION P_coma VARIABLES |
    T_dato Corchete_a Corchete_c error ASIGNACION P_coma VARIABLES |

    T_dato Visibilidad error P_coma |
    T_dato error P_coma |
    T_dato Corchete_a Corchete_c Visibilidad error P_coma |
    T_dato Corchete_a Corchete_c error P_coma |

    T_dato Visibilidad error ASIGNACION P_coma |
    T_dato error ASIGNACION P_coma |
    T_dato Corchete_a Corchete_c Visibilidad error ASIGNACION P_coma |
    T_dato Corchete_a Corchete_c error ASIGNACION P_coma 


    T_dato error Corchete_c Visibilidad Identificador P_coma VARIABLES |
    T_dato error Corchete_c Identificador P_coma VARIABLES |

    T_dato error Corchete_c Visibilidad Identificador ASIGNACION P_coma VARIABLES |
    T_dato error Corchete_c Identificador ASIGNACION P_coma VARIABLES |

    T_dato error Corchete_c Visibilidad Identificador P_coma |
    T_dato error Corchete_c Identificador P_coma |

    T_dato error Corchete_c Visibilidad Identificador ASIGNACION P_coma |
    T_dato error Corchete_c Identificador ASIGNACION P_coma |

    T_dato Corchete_a error Visibilidad Identificador P_coma VARIABLES |
    T_dato Corchete_a error Identificador P_coma VARIABLES |

    T_dato Corchete_a error Visibilidad Identificador ASIGNACION P_coma VARIABLES |
    T_dato Corchete_a error Identificador ASIGNACION P_coma VARIABLES |

    T_dato Corchete_a error Visibilidad Identificador P_coma |
    T_dato Corchete_a error Identificador P_coma |

    T_dato Corchete_a error Visibilidad Identificador ASIGNACION P_coma |
    T_dato Corchete_a error Identificador ASIGNACION P_coma |


    T_dato Visibilidad Identificador error VARIABLES |
    T_dato Identificador error VARIABLES |
    T_dato Corchete_a Corchete_c Visibilidad Identificador error VARIABLES |
    T_dato Corchete_a Corchete_c Identificador error VARIABLES |

    T_dato Visibilidad Identificador ASIGNACION error VARIABLES |
    T_dato Identificador ASIGNACION error VARIABLES |
    T_dato Corchete_a Corchete_c Visibilidad Identificador ASIGNACION error VARIABLES |
    T_dato Corchete_a Corchete_c Identificador ASIGNACION error VARIABLES |

    T_dato Visibilidad Identificador error |
    T_dato Identificador error |
    T_dato Corchete_a Corchete_c Visibilidad Identificador error |
    T_dato Corchete_a Corchete_c Identificador error |

    T_dato Visibilidad Identificador ASIGNACION error |
    T_dato Identificador ASIGNACION error |
    T_dato Corchete_a Corchete_c Visibilidad Identificador ASIGNACION error |
    T_dato Corchete_a Corchete_c Identificador ASIGNACION error 
;
ASIGNACION ::= 
    Igual EXPRESION
;
ESTRUCTURA ::=
    Struct Identificador Llave_a VARIABLES Llave_c ESTRUCTURA |
    Struct Identificador Llave_a VARIABLES Llave_c |

    Struct error Llave_a VARIABLES Llave_c ESTRUCTURA |
    Struct Identificador error VARIABLES Llave_c ESTRUCTURA |

    Struct error Llave_a VARIABLES Llave_c |
    Struct Identificador error VARIABLES Llave_c |

    Struct Identificador Llave_a VARIABLES error ESTRUCTURA |
    Struct Identificador Llave_a VARIABLES error 
;
FUNCION_HEADER ::=
     Identificador Parentesis_a PARAMETROS Parentesis_c |
     Identificador Parentesis_a PARAMETROS Parentesis_c MODIFICADORES |
     Identificador Parentesis_a PARAMETROS Parentesis_c RETURNS |
     Identificador Parentesis_a PARAMETROS Parentesis_c MODIFICADORES RETURNS |

     error Parentesis_a PARAMETROS Parentesis_c |
     error Parentesis_a PARAMETROS Parentesis_c MODIFICADORES |
     error Parentesis_a PARAMETROS Parentesis_c RETURNS |
     error Parentesis_a PARAMETROS Parentesis_c MODIFICADORES RETURNS |
    
     Identificador error  PARAMETROS Parentesis_c |
     Identificador error  PARAMETROS Parentesis_c MODIFICADORES |
     Identificador error  PARAMETROS Parentesis_c RETURNS |
     Identificador error  PARAMETROS Parentesis_c MODIFICADORES RETURNS |
    
    Identificador Parentesis_a PARAMETROS error | 
    Identificador Parentesis_a PARAMETROS error MODIFICADORES |
     Identificador Parentesis_a PARAMETROS error RETURNS |
     Identificador Parentesis_a PARAMETROS error MODIFICADORES RETURNS 
    
;
FUNCION ::=
    Function FUNCION_HEADER Llave_a VARIABLES Llave_c FUNCION |
    Function FUNCION_HEADER Llave_a VARIABLES CUERPO Llave_c FUNCION |
    Function FUNCION_HEADER Llave_a CUERPO Llave_c FUNCION |
    Function FUNCION_HEADER Llave_a Llave_c FUNCION |
    Function FUNCION_HEADER Llave_a VARIABLES Llave_c |
    Function FUNCION_HEADER Llave_a VARIABLES CUERPO Llave_c |
    Function FUNCION_HEADER Llave_a CUERPO Llave_c |
    Function FUNCION_HEADER Llave_a Llave_c |
    
    Function FUNCION_HEADER error VARIABLES Llave_c FUNCION |
    Function FUNCION_HEADER error VARIABLES CUERPO Llave_c FUNCION |
    Function FUNCION_HEADER error CUERPO Llave_c FUNCION |
    Function FUNCION_HEADER error Llave_c FUNCION |
    Function FUNCION_HEADER error VARIABLES Llave_c |
    Function FUNCION_HEADER error VARIABLES CUERPO Llave_c |
    Function FUNCION_HEADER error CUERPO Llave_c |
    Function FUNCION_HEADER error Llave_c |
    
    Function FUNCION_HEADER Llave_a VARIABLES error FUNCION |
    Function FUNCION_HEADER Llave_a VARIABLES CUERPO error FUNCION |
    Function FUNCION_HEADER Llave_a CUERPO error FUNCION |
    Function FUNCION_HEADER Llave_a error FUNCION |
    Function FUNCION_HEADER Llave_a VARIABLES error |
    Function FUNCION_HEADER Llave_a VARIABLES CUERPO error |
    Function FUNCION_HEADER Llave_a CUERPO error |
    Function FUNCION_HEADER Llave_a error 
;
RETURNS ::= 
    Returns Parentesis_a T_dato Identificador  Parentesis_c|
    Returns error T_dato Identificador Parentesis_c |
    Returns Parentesis_a T_dato error Parentesis_c |
    Returns Parentesis_a T_dato Identificador error
    
;
PARAMETROS ::=
    T_dato Identificador Coma PARAMETROS |
    T_dato Identificador |
    T_dato error Coma PARAMETROS |
    T_dato error
;
MODIFICADORES ::=
    Modificador MODIFICADORES |
    Visibilidad MODIFICADORES |
    Modificador |
    Visibilidad 
;
CUERPO ::=
    EXPRESION P_coma CUERPO |
    ESTRUCTURA_CONTROL CUERPO |

    EXPRESION P_coma |
    ESTRUCTURA_CONTROL 
;
IDENTIFICADOR_COMPLEJO ::=
    This Parentesis_a Parentesis_c |
    This Parentesis_a ARGUMENTOS Parentesis_c |
    This |
    Identificador Parentesis_a Parentesis_c |
    Identificador Parentesis_a ARGUMENTOS Parentesis_c |
    Identificador
;
IDENTIFICADOR_CUERPO ::=
    IDENTIFICADOR_COMPLEJO Punto IDENTIFICADOR_CUERPO  |
    IDENTIFICADOR_COMPLEJO
;
ASIGNACION_BASICA ::= 
    IDENTIFICADOR_CUERPO ATRIBUCION_IGUAL EXPRESION
;
ASIGNACION_COMPLEJA ::= 
    IDENTIFICADOR_CUERPO ATRIBUCION_IGUAL EXPRESION |
    T_dato Identificador Igual EXPRESION 
;
ATRIBUCION_IGUAL ::=
    Op_atribucion |
    Igual
;
ARGUMENTOS ::=
    EXPRESION Coma ARGUMENTOS |
    EXPRESION
;
LITERAL ::= 
    Numero |
    String |
    Op_booleano
;
EXPRESION ::=
    EXPRESION_AUX |
    ASIGNACION_BASICA |
    OP_TERNARIO
;
EXPRESION_AUX ::= 
    Parentesis_a EXPRESION Parentesis_c |

    OP_UNARIO EXPRESION | 

    LITERAL OP_ARITMETICO EXPRESION |
    IDENTIFICADOR_CUERPO OP_ARITMETICO EXPRESION |

    LITERAL Op_logico EXPRESION |
    IDENTIFICADOR_CUERPO Op_logico EXPRESION |
    
    LITERAL |
    IDENTIFICADOR_CUERPO 
;
OP_ARITMETICO ::=
    Op_Aritmetico |
    Mas |
    Menos
;
OP_UNARIO ::=
    Mas |
    Menos |
    Not
;
ESTRUCTURA_CONTROL ::= 
    IF_ELSE |
    IF | 
    WHILE |
    DO_WHILE |
    FOR |
    Return EXPRESION P_coma
;
SENTENCIA ::=
    IF_ELSE |
    IF | 
    WHILE |
    DO_WHILE |
    FOR |
    Break P_coma |
    Continue P_coma |
    Return EXPRESION P_coma
;
CUERPO_EC ::=
    EXPRESION P_coma CUERPO_EC |
    SENTENCIA CUERPO_EC |

    EXPRESION P_coma |
    SENTENCIA 
;
OP_TERNARIO ::= 
    Parentesis_a EXPRESION Parentesis_c Pregunta EXPRESION Dos_Puntos EXPRESION
;
IF ::= 
    If Parentesis_a EXPRESION Parentesis_c Llave_a CUERPO_EC Llave_c |
    If Parentesis_a EXPRESION Parentesis_c Llave_a Llave_c |
    If error Parentesis_c Llave_a CUERPO_EC Llave_c |
    If error Parentesis_c Llave_a Llave_c |
    If Parentesis_a EXPRESION Parentesis_c error CUERPO_EC Llave_c |
    If Parentesis_a EXPRESION Parentesis_c error Llave_c 
;
EXPRESION_BOOLEANA ::= 
    P_coma
;
IF_ELSE ::= 
    If Parentesis_a EXPRESION Parentesis_c Llave_a CUERPO_EC Llave_c Else Llave_a CUERPO_EC Llave_c |
    If Parentesis_a EXPRESION Parentesis_c Llave_a CUERPO_EC Llave_c Else Llave_a Llave_c |
    If Parentesis_a EXPRESION Parentesis_c Llave_a Llave_c Else Llave_a CUERPO_EC Llave_c |
    If Parentesis_a EXPRESION Parentesis_c Llave_a Llave_c Else Llave_a Llave_c |

    If error Parentesis_c Llave_a CUERPO_EC Llave_c Else Llave_a CUERPO_EC Llave_c |
    If error Parentesis_c Llave_a CUERPO_EC Llave_c Else Llave_a Llave_c |
    If error Parentesis_c Llave_a Llave_c Else Llave_a CUERPO_EC Llave_c |
    If error Parentesis_c Llave_a Llave_c Else Llave_a Llave_c 
    
;
WHILE ::= 
    While Parentesis_a EXPRESION Parentesis_c Llave_a CUERPO_EC Llave_c |
    While Parentesis_a EXPRESION Parentesis_c Llave_a Llave_c |

    While error Parentesis_c Llave_a CUERPO_EC Llave_c |
    While error Parentesis_c Llave_a Llave_c |
    While Parentesis_a EXPRESION Parentesis_c error CUERPO_EC Llave_c |
    While Parentesis_a EXPRESION Parentesis_c error Llave_c 
;
DO_WHILE ::= 
    Do Llave_a CUERPO_EC Llave_c While Parentesis_a EXPRESION Parentesis_c P_coma |
    Do Llave_a Llave_c While Parentesis_a EXPRESION Parentesis_c P_coma |

    Do error CUERPO_EC Llave_c While Parentesis_a EXPRESION Parentesis_c P_coma |
    Do error Llave_c While Parentesis_a EXPRESION Parentesis_c P_coma |
    Do Llave_a CUERPO_EC Llave_c error P_coma |
    Do Llave_a Llave_c error P_coma 
;
FOR ::= 
    For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a CUERPO_EC Llave_c |
    For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a Llave_c |

    For error Parentesis_c Llave_a CUERPO_EC Llave_c |
    For error Parentesis_c Llave_a Llave_c  |
    For Parentesis_a SENTENCIA_FOR Parentesis_c error CUERPO_EC Llave_c |
    For Parentesis_a SENTENCIA_FOR Parentesis_c error Llave_c 
;
SENTENCIA_FOR ::=
    ASIGNACION_COMPLEJA P_coma EXPRESION P_coma EXPRESION 
;




