
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jul 22 14:31:46 CST 2020
//----------------------------------------------------

package lexico;

import java_cup.runtime.Symbol;
import java.util.Stack;
import java.util.ArrayList;
import java.util.Iterator;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jul 22 14:31:46 CST 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\222\000\002\002\004\000\002\002\010\000\002\002" +
    "\011\000\002\003\007\000\002\003\010\000\002\003\011" +
    "\000\002\003\011\000\002\003\011\000\002\003\012\000" +
    "\002\003\012\000\002\003\012\000\002\003\013\000\002" +
    "\003\010\000\002\003\011\000\002\003\011\000\002\003" +
    "\012\000\002\003\010\000\002\003\011\000\002\003\010" +
    "\000\002\003\006\000\002\003\007\000\002\003\010\000" +
    "\002\003\010\000\002\003\010\000\002\003\011\000\002" +
    "\003\011\000\002\003\011\000\002\003\012\000\002\003" +
    "\007\000\002\003\010\000\002\003\010\000\002\003\011" +
    "\000\002\003\007\000\002\003\010\000\002\003\007\000" +
    "\002\020\010\000\002\020\007\000\002\020\007\000\002" +
    "\020\006\000\002\020\010\000\002\020\007\000\002\020" +
    "\010\000\002\020\007\000\002\020\007\000\002\020\006" +
    "\000\002\020\007\000\002\020\006\000\002\010\005\000" +
    "\002\010\003\000\002\021\007\000\002\021\006\000\002" +
    "\021\011\000\002\021\010\000\002\021\010\000\002\021" +
    "\007\000\002\021\012\000\002\021\011\000\002\021\006" +
    "\000\002\021\005\000\002\021\010\000\002\021\007\000" +
    "\002\021\007\000\002\021\006\000\002\021\011\000\002" +
    "\021\010\000\002\022\004\000\002\023\010\000\002\023" +
    "\007\000\002\030\007\000\002\030\010\000\002\030\010" +
    "\000\002\030\011\000\002\024\013\000\002\024\012\000" +
    "\002\024\011\000\002\024\012\000\002\024\017\000\002" +
    "\026\007\000\002\011\006\000\002\011\004\000\002\025" +
    "\004\000\002\025\004\000\002\025\003\000\002\025\003" +
    "\000\002\027\004\000\002\027\004\000\002\027\004\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\037\007\000\002\037\010\000\002\037\005\000\002\037" +
    "\010\000\002\037\007\000\002\037\005\000\002\031\006" +
    "\000\002\031\006\000\002\032\006\000\002\032\007\000" +
    "\002\032\006\000\002\033\007\000\002\033\006\000\002" +
    "\034\005\000\002\034\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\004\000\002\016\004" +
    "\000\002\016\005\000\002\040\004\000\002\040\004\000" +
    "\002\040\004\000\002\040\003\000\002\040\003\000\002" +
    "\040\003\000\002\004\011\000\002\006\017\000\002\015" +
    "\003\000\002\015\005\000\002\007\052\000\002\012\017" +
    "\000\002\013\023\000\002\014\017\000\002\017\007\000" +
    "\002\017\006\000\002\017\006\000\002\017\006\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0164\000\004\037\004\001\002\000\004\040\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\006\034\010\045\011\001\002\000\004\034\u0164\001" +
    "\002\000\004\034\012\001\002\000\004\034\013\001\002" +
    "\000\004\032\014\001\002\000\004\035\015\001\002\000" +
    "\004\033\017\001\002\000\004\002\uffff\001\002\000\004" +
    "\025\020\001\002\000\014\006\024\026\031\036\026\041" +
    "\030\042\021\001\002\000\004\033\u0150\001\002\000\006" +
    "\026\u014b\042\021\001\002\000\012\006\024\026\u0134\041" +
    "\030\042\021\001\002\000\010\027\u0117\033\u0118\056\u0116" +
    "\001\002\000\010\026\u010b\041\030\042\021\001\002\000" +
    "\006\003\364\033\365\001\002\000\004\025\043\001\002" +
    "\000\004\033\036\001\002\000\006\002\uffee\035\015\001" +
    "\002\000\004\026\033\001\002\000\006\002\uffdf\035\015" +
    "\001\002\000\004\002\uffef\001\002\000\004\002\ufffe\001" +
    "\002\000\004\025\037\001\002\000\004\006\024\001\002" +
    "\000\004\026\041\001\002\000\010\026\uffbe\041\030\042" +
    "\uffbe\001\002\000\006\026\uffbf\042\uffbf\001\002\000\030" +
    "\006\024\007\057\010\062\012\064\013\067\014\044\022" +
    "\050\033\051\034\045\047\052\053\063\001\002\000\004" +
    "\023\316\001\002\000\044\007\uff98\010\uff98\012\uff98\013" +
    "\uff98\014\uff98\020\uff98\022\uff98\024\uff98\026\uff98\032\uff98" +
    "\033\uff98\034\uff98\044\uff98\047\uff98\050\uff98\051\uff98\053" +
    "\uff98\001\002\000\026\007\uff90\010\uff90\012\uff90\013\uff90" +
    "\014\uff90\022\uff90\033\uff90\034\uff90\047\uff90\053\uff90\001" +
    "\002\000\004\053\303\001\002\000\042\007\uff96\010\uff96" +
    "\012\uff96\013\uff96\014\uff96\022\uff96\024\uff96\026\uff96\032" +
    "\uff96\033\uff96\034\uff96\044\uff96\047\uff96\050\uff96\051\uff96" +
    "\053\uff96\001\002\000\042\007\uff95\010\uff95\012\uff95\013" +
    "\uff95\014\uff95\016\300\022\uff95\023\103\026\uff95\033\uff95" +
    "\034\uff95\046\104\047\uff95\050\uff95\051\uff95\053\uff95\001" +
    "\002\000\004\046\272\001\002\000\026\007\uff91\010\uff91" +
    "\012\uff91\013\uff91\014\uff91\022\uff91\033\uff91\034\uff91\047" +
    "\uff91\053\uff91\001\002\000\044\007\uff94\010\uff94\012\uff94" +
    "\013\uff94\014\uff94\020\uff94\022\uff94\024\uff94\026\uff94\032" +
    "\uff94\033\uff94\034\uff94\044\uff94\047\uff94\050\uff94\051\uff94" +
    "\053\uff94\001\002\000\026\007\uff92\010\uff92\012\uff92\013" +
    "\uff92\014\uff92\022\uff92\033\uff92\034\uff92\047\uff92\053\uff92" +
    "\001\002\000\024\007\057\010\062\012\064\013\067\014" +
    "\044\022\050\033\051\034\045\047\052\001\002\000\044" +
    "\007\uff97\010\uff97\012\uff97\013\uff97\014\uff97\020\uff97\022" +
    "\uff97\024\uff97\026\uff97\032\uff97\033\uff97\034\uff97\044\uff97" +
    "\047\uff97\050\uff97\051\uff97\053\uff97\001\002\000\026\007" +
    "\uff8f\010\uff8f\012\uff8f\013\uff8f\014\uff8f\022\uff8f\033\uff8f" +
    "\034\uff8f\047\uff8f\053\uff8f\001\002\000\026\007\057\010" +
    "\062\012\064\013\067\014\044\022\050\033\051\034\045" +
    "\047\052\053\uffaa\001\002\000\004\023\206\001\002\000" +
    "\014\007\057\022\050\033\076\034\045\047\052\001\002" +
    "\000\004\025\162\001\002\000\036\007\uff93\010\uff93\012" +
    "\uff93\013\uff93\014\uff93\016\157\022\uff93\026\uff93\033\uff93" +
    "\034\uff93\047\uff93\050\uff93\051\uff93\053\uff93\001\002\000" +
    "\026\007\057\010\062\012\064\013\067\014\044\022\050" +
    "\033\051\034\045\047\052\053\uffa8\001\002\000\004\023" +
    "\073\001\002\000\026\007\uff8e\010\uff8e\012\uff8e\013\uff8e" +
    "\014\uff8e\022\uff8e\033\uff8e\034\uff8e\047\uff8e\053\uff8e\001" +
    "\002\000\026\007\057\010\062\012\064\013\067\014\044" +
    "\022\050\033\051\034\045\047\052\053\uffa9\001\002\000" +
    "\004\053\uffac\001\002\000\014\007\057\022\075\033\076" +
    "\034\045\047\052\001\002\000\004\024\122\001\002\000" +
    "\006\020\uff96\024\uff7d\001\002\000\016\020\uff95\023\103" +
    "\024\uff95\032\uff95\044\uff95\046\104\001\002\000\012\020" +
    "\uff93\024\uff93\032\uff93\044\uff93\001\002\000\004\020\101" +
    "\001\002\000\014\007\057\022\050\033\076\034\045\047" +
    "\052\001\002\000\004\024\uff7c\001\002\000\016\007\057" +
    "\022\050\024\115\033\076\034\045\047\052\001\002\000" +
    "\004\033\105\001\002\000\050\007\uffa2\010\uffa2\012\uffa2" +
    "\013\uffa2\014\uffa2\016\uffa2\020\uffa2\022\uffa2\023\106\024" +
    "\uffa2\026\uffa2\032\uffa2\033\uffa2\034\uffa2\044\uffa2\047\uffa2" +
    "\050\uffa2\051\uffa2\053\uffa2\001\002\000\016\007\057\022" +
    "\050\024\107\033\076\034\045\047\052\001\002\000\046" +
    "\007\uffa3\010\uffa3\012\uffa3\013\uffa3\014\uffa3\016\uffa3\020" +
    "\uffa3\022\uffa3\024\uffa3\026\uffa3\032\uffa3\033\uffa3\034\uffa3" +
    "\044\uffa3\047\uffa3\050\uffa3\051\uffa3\053\uffa3\001\002\000" +
    "\004\024\114\001\002\000\006\024\uff99\044\112\001\002" +
    "\000\014\007\057\022\050\033\076\034\045\047\052\001" +
    "\002\000\004\024\uff9a\001\002\000\046\007\uffa4\010\uffa4" +
    "\012\uffa4\013\uffa4\014\uffa4\016\uffa4\020\uffa4\022\uffa4\024" +
    "\uffa4\026\uffa4\032\uffa4\033\uffa4\034\uffa4\044\uffa4\047\uffa4" +
    "\050\uffa4\051\uffa4\053\uffa4\001\002\000\004\032\121\001" +
    "\002\000\004\024\117\001\002\000\004\032\120\001\002" +
    "\000\044\007\uff9c\010\uff9c\012\uff9c\013\uff9c\014\uff9c\020" +
    "\uff9c\022\uff9c\024\uff9c\026\uff9c\032\uff9c\033\uff9c\034\uff9c" +
    "\044\uff9c\047\uff9c\050\uff9c\051\uff9c\053\uff9c\001\002\000" +
    "\044\007\uff9b\010\uff9b\012\uff9b\013\uff9b\014\uff9b\020\uff9b" +
    "\022\uff9b\024\uff9b\026\uff9b\032\uff9b\033\uff9b\034\uff9b\044" +
    "\uff9b\047\uff9b\050\uff9b\051\uff9b\053\uff9b\001\002\000\004" +
    "\025\123\001\002\000\032\007\057\010\062\012\064\013" +
    "\067\014\044\022\050\033\051\034\045\047\052\050\127" +
    "\051\124\053\135\001\002\000\004\032\155\001\002\000" +
    "\034\007\uff8b\010\uff8b\012\uff8b\013\uff8b\014\uff8b\022\uff8b" +
    "\026\uff8b\033\uff8b\034\uff8b\047\uff8b\050\uff8b\051\uff8b\053" +
    "\uff8b\001\002\000\034\007\057\010\062\012\064\013\067" +
    "\014\044\022\050\026\uff80\033\051\034\045\047\052\050" +
    "\127\051\124\053\135\001\002\000\004\032\153\001\002" +
    "\000\034\007\uff8c\010\uff8c\012\uff8c\013\uff8c\014\uff8c\022" +
    "\uff8c\026\uff8c\033\uff8c\034\uff8c\047\uff8c\050\uff8c\051\uff8c" +
    "\053\uff8c\001\002\000\004\026\144\001\002\000\034\007" +
    "\uff8d\010\uff8d\012\uff8d\013\uff8d\014\uff8d\022\uff8d\026\uff8d" +
    "\033\uff8d\034\uff8d\047\uff8d\050\uff8d\051\uff8d\053\uff8d\001" +
    "\002\000\034\007\uff8a\010\uff8a\012\uff8a\013\uff8a\014\uff8a" +
    "\022\uff8a\026\uff8a\033\uff8a\034\uff8a\047\uff8a\050\uff8a\051" +
    "\uff8a\053\uff8a\001\002\000\034\007\057\010\062\012\064" +
    "\013\067\014\044\022\050\026\uff82\033\051\034\045\047" +
    "\052\050\127\051\124\053\135\001\002\000\014\007\057" +
    "\022\050\033\076\034\045\047\052\001\002\000\034\007" +
    "\uff89\010\uff89\012\uff89\013\uff89\014\uff89\022\uff89\026\uff89" +
    "\033\uff89\034\uff89\047\uff89\050\uff89\051\uff89\053\uff89\001" +
    "\002\000\034\007\057\010\062\012\064\013\067\014\044" +
    "\022\050\026\uff81\033\051\034\045\047\052\050\127\051" +
    "\124\053\135\001\002\000\004\026\uff84\001\002\000\004" +
    "\032\142\001\002\000\034\007\uff86\010\uff86\012\uff86\013" +
    "\uff86\014\uff86\022\uff86\026\uff86\033\uff86\034\uff86\047\uff86" +
    "\050\uff86\051\uff86\053\uff86\001\002\000\004\026\uff85\001" +
    "\002\000\004\013\145\001\002\000\004\023\146\001\002" +
    "\000\014\007\057\022\075\033\076\034\045\047\052\001" +
    "\002\000\004\024\150\001\002\000\004\025\151\001\002" +
    "\000\004\026\152\001\002\000\034\007\uff7a\010\uff7a\012" +
    "\uff7a\013\uff7a\014\uff7a\022\uff7a\026\uff7a\033\uff7a\034\uff7a" +
    "\047\uff7a\050\uff7a\051\uff7a\053\uff7a\001\002\000\034\007" +
    "\uff88\010\uff88\012\uff88\013\uff88\014\uff88\022\uff88\026\uff88" +
    "\033\uff88\034\uff88\047\uff88\050\uff88\051\uff88\053\uff88\001" +
    "\002\000\004\026\uff83\001\002\000\034\007\uff87\010\uff87" +
    "\012\uff87\013\uff87\014\uff87\022\uff87\026\uff87\033\uff87\034" +
    "\uff87\047\uff87\050\uff87\051\uff87\053\uff87\001\002\000\004" +
    "\053\uffab\001\002\000\014\007\057\022\050\033\076\034" +
    "\045\047\052\001\002\000\004\032\161\001\002\000\034" +
    "\007\uffa1\010\uffa1\012\uffa1\013\uffa1\014\uffa1\022\uffa1\026" +
    "\uffa1\033\uffa1\034\uffa1\047\uffa1\050\uffa1\051\uffa1\053\uffa1" +
    "\001\002\000\032\007\057\010\062\012\064\013\067\014" +
    "\044\022\050\033\051\034\045\047\052\050\127\051\124" +
    "\053\135\001\002\000\004\026\164\001\002\000\004\013" +
    "\165\001\002\000\004\023\166\001\002\000\014\007\057" +
    "\022\075\033\076\034\045\047\052\001\002\000\004\024" +
    "\170\001\002\000\004\032\171\001\002\000\004\012\172" +
    "\001\002\000\004\025\173\001\002\000\004\026\174\001" +
    "\002\000\004\013\175\001\002\000\004\023\176\001\002" +
    "\000\014\007\057\022\075\033\076\034\045\047\052\001" +
    "\002\000\004\024\200\001\002\000\004\032\201\001\002" +
    "\000\034\007\uff79\010\uff79\012\uff79\013\uff79\014\uff79\022" +
    "\uff79\026\uff79\033\uff79\034\uff79\047\uff79\050\uff79\051\uff79" +
    "\053\uff79\001\002\000\004\032\203\001\002\000\004\026" +
    "\204\001\002\000\004\042\021\001\002\000\004\026\uffb7" +
    "\001\002\000\014\007\057\022\075\033\076\034\045\047" +
    "\052\001\002\000\004\024\210\001\002\000\004\025\211" +
    "\001\002\000\032\007\057\010\062\012\064\013\067\014" +
    "\044\022\050\033\051\034\045\047\052\050\127\051\124" +
    "\053\135\001\002\000\004\026\213\001\002\000\006\010" +
    "\215\011\214\001\002\000\004\025\223\001\002\000\004" +
    "\023\216\001\002\000\014\007\057\022\075\033\076\034" +
    "\045\047\052\001\002\000\004\024\220\001\002\000\004" +
    "\025\221\001\002\000\004\026\222\001\002\000\034\007" +
    "\uff7e\010\uff7e\012\uff7e\013\uff7e\014\uff7e\022\uff7e\026\uff7e" +
    "\033\uff7e\034\uff7e\047\uff7e\050\uff7e\051\uff7e\053\uff7e\001" +
    "\002\000\032\007\057\010\062\012\064\013\067\014\044" +
    "\022\050\033\051\034\045\047\052\050\127\051\124\053" +
    "\135\001\002\000\004\026\225\001\002\000\004\010\226" +
    "\001\002\000\004\023\227\001\002\000\014\007\057\022" +
    "\075\033\076\034\045\047\052\001\002\000\004\024\231" +
    "\001\002\000\004\025\232\001\002\000\032\007\057\010" +
    "\062\012\064\013\067\014\044\022\050\033\051\034\045" +
    "\047\052\050\127\051\124\053\135\001\002\000\004\026" +
    "\234\001\002\000\004\011\235\001\002\000\004\025\236" +
    "\001\002\000\004\026\237\001\002\000\004\010\240\001" +
    "\002\000\004\023\241\001\002\000\014\007\057\022\075" +
    "\033\076\034\045\047\052\001\002\000\004\024\243\001" +
    "\002\000\004\025\244\001\002\000\004\026\245\001\002" +
    "\000\004\011\246\001\002\000\004\025\247\001\002\000" +
    "\032\007\057\010\062\012\064\013\067\014\044\022\050" +
    "\033\051\034\045\047\052\050\127\051\124\053\135\001" +
    "\002\000\004\026\251\001\002\000\004\010\252\001\002" +
    "\000\004\023\253\001\002\000\014\007\057\022\075\033" +
    "\076\034\045\047\052\001\002\000\004\024\255\001\002" +
    "\000\004\025\256\001\002\000\004\026\257\001\002\000" +
    "\004\011\260\001\002\000\004\025\261\001\002\000\004" +
    "\026\262\001\002\000\034\007\uff7b\010\uff7b\012\uff7b\013" +
    "\uff7b\014\uff7b\022\uff7b\026\uff7b\033\uff7b\034\uff7b\047\uff7b" +
    "\050\uff7b\051\uff7b\053\uff7b\001\002\000\004\053\uffad\001" +
    "\002\000\004\053\265\001\002\000\014\007\057\022\050" +
    "\033\076\034\045\047\052\001\002\000\004\032\267\001" +
    "\002\000\004\026\270\001\002\000\006\026\uffb6\042\021" +
    "\001\002\000\004\026\uffb9\001\002\000\004\033\273\001" +
    "\002\000\050\007\uffa5\010\uffa5\012\uffa5\013\uffa5\014\uffa5" +
    "\016\uffa5\020\uffa5\022\uffa5\023\274\024\uffa5\026\uffa5\032" +
    "\uffa5\033\uffa5\034\uffa5\044\uffa5\047\uffa5\050\uffa5\051\uffa5" +
    "\053\uffa5\001\002\000\016\007\057\022\050\024\275\033" +
    "\076\034\045\047\052\001\002\000\046\007\uffa7\010\uffa7" +
    "\012\uffa7\013\uffa7\014\uffa7\016\uffa7\020\uffa7\022\uffa7\024" +
    "\uffa7\026\uffa7\032\uffa7\033\uffa7\034\uffa7\044\uffa7\047\uffa7" +
    "\050\uffa7\051\uffa7\053\uffa7\001\002\000\004\024\277\001" +
    "\002\000\046\007\uffa6\010\uffa6\012\uffa6\013\uffa6\014\uffa6" +
    "\016\uffa6\020\uffa6\022\uffa6\024\uffa6\026\uffa6\032\uffa6\033" +
    "\uffa6\034\uffa6\044\uffa6\047\uffa6\050\uffa6\051\uffa6\053\uffa6" +
    "\001\002\000\014\007\057\022\050\033\076\034\045\047" +
    "\052\001\002\000\004\032\302\001\002\000\034\007\uffa0" +
    "\010\uffa0\012\uffa0\013\uffa0\014\uffa0\022\uffa0\026\uffa0\033" +
    "\uffa0\034\uffa0\047\uffa0\050\uffa0\051\uffa0\053\uffa0\001\002" +
    "\000\014\007\057\022\050\033\076\034\045\047\052\001" +
    "\002\000\004\032\305\001\002\000\004\026\306\001\002" +
    "\000\004\042\021\001\002\000\004\026\uffb8\001\002\000" +
    "\004\025\311\001\002\000\030\006\024\007\057\010\062" +
    "\012\064\013\067\014\044\022\050\033\051\034\045\047" +
    "\052\053\312\001\002\000\014\007\057\022\050\033\076" +
    "\034\045\047\052\001\002\000\004\032\314\001\002\000" +
    "\004\026\315\001\002\000\006\026\uffb5\042\021\001\002" +
    "\000\012\006\324\032\320\033\323\047\052\001\002\000" +
    "\004\024\352\001\002\000\016\007\057\022\050\032\345" +
    "\033\076\034\045\047\052\001\002\000\004\032\337\001" +
    "\002\000\004\016\334\001\002\000\006\016\331\046\104" +
    "\001\002\000\004\033\325\001\002\000\004\016\326\001" +
    "\002\000\014\007\057\022\050\033\076\034\045\047\052" +
    "\001\002\000\004\032\330\001\002\000\004\032\uff9e\001" +
    "\002\000\014\007\057\022\050\033\076\034\045\047\052" +
    "\001\002\000\004\032\333\001\002\000\004\032\uff9d\001" +
    "\002\000\014\007\057\022\050\033\076\034\045\047\052" +
    "\001\002\000\004\032\336\001\002\000\004\032\uff9f\001" +
    "\002\000\016\007\057\022\050\032\340\033\076\034\045" +
    "\047\052\001\002\000\016\007\057\022\050\024\uff71\033" +
    "\076\034\045\047\052\001\002\000\004\032\342\001\002" +
    "\000\016\007\057\022\050\024\uff74\033\076\034\045\047" +
    "\052\001\002\000\004\024\uff77\001\002\000\004\024\uff75" +
    "\001\002\000\016\007\057\022\050\024\uff70\033\076\034" +
    "\045\047\052\001\002\000\004\032\347\001\002\000\016" +
    "\007\057\022\050\024\uff72\033\076\034\045\047\052\001" +
    "\002\000\004\024\uff76\001\002\000\004\024\uff73\001\002" +
    "\000\004\025\353\001\002\000\032\007\057\010\062\012" +
    "\064\013\067\014\044\022\050\033\051\034\045\047\052" +
    "\050\127\051\124\053\135\001\002\000\004\026\355\001" +
    "\002\000\004\014\356\001\002\000\004\023\357\001\002" +
    "\000\012\006\324\032\320\033\323\047\052\001\002\000" +
    "\004\024\361\001\002\000\004\025\362\001\002\000\004" +
    "\026\363\001\002\000\034\007\uff78\010\uff78\012\uff78\013" +
    "\uff78\014\uff78\022\uff78\026\uff78\033\uff78\034\uff78\047\uff78" +
    "\050\uff78\051\uff78\053\uff78\001\002\000\004\025\u0105\001" +
    "\002\000\006\003\367\025\366\001\002\000\006\026\u0100" +
    "\033\372\001\002\000\006\026\370\033\372\001\002\000" +
    "\014\006\uffd3\026\uffd3\036\026\041\uffd3\042\uffd3\001\002" +
    "\000\004\026\375\001\002\000\006\026\uffd1\044\373\001" +
    "\002\000\004\033\372\001\002\000\004\026\uffd2\001\002" +
    "\000\014\006\uffd4\026\uffd4\036\026\041\uffd4\042\uffd4\001" +
    "\002\000\012\006\uffd8\026\uffd8\041\uffd8\042\uffd8\001\002" +
    "\000\012\006\uffd7\026\uffd7\041\uffd7\042\uffd7\001\002\000" +
    "\014\006\uffdb\026\uffdb\036\026\041\uffdb\042\uffdb\001\002" +
    "\000\004\026\u0102\001\002\000\014\006\uffdc\026\uffdc\036" +
    "\026\041\uffdc\042\uffdc\001\002\000\012\006\uffde\026\uffde" +
    "\041\uffde\042\uffde\001\002\000\012\006\uffdd\026\uffdd\041" +
    "\uffdd\042\uffdd\001\002\000\006\026\u0106\033\372\001\002" +
    "\000\014\006\uffd5\026\uffd5\036\026\041\uffd5\042\uffd5\001" +
    "\002\000\004\026\u0108\001\002\000\014\006\uffd6\026\uffd6" +
    "\036\026\041\uffd6\042\uffd6\001\002\000\012\006\uffda\026" +
    "\uffda\041\uffda\042\uffda\001\002\000\012\006\uffd9\026\uffd9" +
    "\041\uffd9\042\uffd9\001\002\000\006\002\uffe5\035\015\001" +
    "\002\000\006\026\u0110\042\021\001\002\000\004\026\u010e" +
    "\001\002\000\006\002\uffe3\035\015\001\002\000\004\002" +
    "\ufff3\001\002\000\006\002\uffe4\035\015\001\002\000\004" +
    "\026\u0112\001\002\000\006\002\uffe2\035\015\001\002\000" +
    "\004\002\ufff2\001\002\000\004\002\ufff4\001\002\000\004" +
    "\002\ufff5\001\002\000\004\033\u012e\001\002\000\004\030" +
    "\u0120\001\002\000\006\016\u011b\032\u011a\001\002\000\004" +
    "\032\u011e\001\002\000\034\006\024\007\uffc7\010\uffc7\012" +
    "\uffc7\013\uffc7\014\uffc7\022\uffc7\026\uffc7\033\uffc7\034\uffc7" +
    "\041\uffc7\042\uffc7\047\uffc7\001\002\000\014\007\057\022" +
    "\050\033\076\034\045\047\052\001\002\000\004\032\uffc0" +
    "\001\002\000\032\007\uffcf\010\uffcf\012\uffcf\013\uffcf\014" +
    "\uffcf\022\uffcf\026\uffcf\033\uffcf\034\uffcf\041\uffcf\042\uffcf" +
    "\047\uffcf\001\002\000\034\006\024\007\uffc3\010\uffc3\012" +
    "\uffc3\013\uffc3\014\uffc3\022\uffc3\026\uffc3\033\uffc3\034\uffc3" +
    "\041\uffc3\042\uffc3\047\uffc3\001\002\000\032\007\uffcb\010" +
    "\uffcb\012\uffcb\013\uffcb\014\uffcb\022\uffcb\026\uffcb\033\uffcb" +
    "\034\uffcb\041\uffcb\042\uffcb\047\uffcb\001\002\000\006\033" +
    "\u0122\056\u0121\001\002\000\004\033\u0128\001\002\000\006" +
    "\016\u011b\032\u0124\001\002\000\004\032\u0126\001\002\000" +
    "\034\006\024\007\uffc5\010\uffc5\012\uffc5\013\uffc5\014\uffc5" +
    "\022\uffc5\026\uffc5\033\uffc5\034\uffc5\041\uffc5\042\uffc5\047" +
    "\uffc5\001\002\000\032\007\uffcd\010\uffcd\012\uffcd\013\uffcd" +
    "\014\uffcd\022\uffcd\026\uffcd\033\uffcd\034\uffcd\041\uffcd\042" +
    "\uffcd\047\uffcd\001\002\000\034\006\024\007\uffc1\010\uffc1" +
    "\012\uffc1\013\uffc1\014\uffc1\022\uffc1\026\uffc1\033\uffc1\034" +
    "\uffc1\041\uffc1\042\uffc1\047\uffc1\001\002\000\032\007\uffc9" +
    "\010\uffc9\012\uffc9\013\uffc9\014\uffc9\022\uffc9\026\uffc9\033" +
    "\uffc9\034\uffc9\041\uffc9\042\uffc9\047\uffc9\001\002\000\006" +
    "\016\u011b\032\u012a\001\002\000\004\032\u012c\001\002\000" +
    "\034\006\024\007\uffc6\010\uffc6\012\uffc6\013\uffc6\014\uffc6" +
    "\022\uffc6\026\uffc6\033\uffc6\034\uffc6\041\uffc6\042\uffc6\047" +
    "\uffc6\001\002\000\032\007\uffce\010\uffce\012\uffce\013\uffce" +
    "\014\uffce\022\uffce\026\uffce\033\uffce\034\uffce\041\uffce\042" +
    "\uffce\047\uffce\001\002\000\034\006\024\007\uffc2\010\uffc2" +
    "\012\uffc2\013\uffc2\014\uffc2\022\uffc2\026\uffc2\033\uffc2\034" +
    "\uffc2\041\uffc2\042\uffc2\047\uffc2\001\002\000\032\007\uffca" +
    "\010\uffca\012\uffca\013\uffca\014\uffca\022\uffca\026\uffca\033" +
    "\uffca\034\uffca\041\uffca\042\uffca\047\uffca\001\002\000\006" +
    "\016\u011b\032\u0130\001\002\000\004\032\u0132\001\002\000" +
    "\034\006\024\007\uffc8\010\uffc8\012\uffc8\013\uffc8\014\uffc8" +
    "\022\uffc8\026\uffc8\033\uffc8\034\uffc8\041\uffc8\042\uffc8\047" +
    "\uffc8\001\002\000\032\007\uffd0\010\uffd0\012\uffd0\013\uffd0" +
    "\014\uffd0\022\uffd0\026\uffd0\033\uffd0\034\uffd0\041\uffd0\042" +
    "\uffd0\047\uffd0\001\002\000\034\006\024\007\uffc4\010\uffc4" +
    "\012\uffc4\013\uffc4\014\uffc4\022\uffc4\026\uffc4\033\uffc4\034" +
    "\uffc4\041\uffc4\042\uffc4\047\uffc4\001\002\000\032\007\uffcc" +
    "\010\uffcc\012\uffcc\013\uffcc\014\uffcc\022\uffcc\026\uffcc\033" +
    "\uffcc\034\uffcc\041\uffcc\042\uffcc\047\uffcc\001\002\000\006" +
    "\002\uffed\035\015\001\002\000\006\026\u0145\042\021\001" +
    "\002\000\004\026\u0143\001\002\000\010\026\u0138\041\030" +
    "\042\021\001\002\000\006\002\uffec\035\015\001\002\000" +
    "\006\026\u013d\042\021\001\002\000\004\026\u013b\001\002" +
    "\000\006\002\uffe8\035\015\001\002\000\004\002\ufff8\001" +
    "\002\000\006\002\uffe9\035\015\001\002\000\004\026\u013f" +
    "\001\002\000\006\002\uffe6\035\015\001\002\000\004\002" +
    "\ufff6\001\002\000\004\002\ufff9\001\002\000\004\002\ufffc" +
    "\001\002\000\006\002\uffea\035\015\001\002\000\004\002" +
    "\ufffa\001\002\000\006\002\uffeb\035\015\001\002\000\004" +
    "\026\u0147\001\002\000\006\002\uffe7\035\015\001\002\000" +
    "\004\002\ufff7\001\002\000\004\002\ufffb\001\002\000\004" +
    "\002\ufffd\001\002\000\006\002\uffe1\035\015\001\002\000" +
    "\004\026\u014d\001\002\000\006\002\uffe0\035\015\001\002" +
    "\000\004\002\ufff0\001\002\000\004\002\ufff1\001\002\000" +
    "\004\023\u0151\001\002\000\004\006\u0153\001\002\000\004" +
    "\024\u0157\001\002\000\004\033\u0154\001\002\000\006\024" +
    "\uffb2\044\u0155\001\002\000\004\006\u0153\001\002\000\004" +
    "\024\uffb3\001\002\000\012\025\uffbd\043\u015b\054\u015a\056" +
    "\u0159\001\002\000\004\025\uffbb\001\002\000\012\025\uffae" +
    "\043\u015b\054\uffae\056\u0159\001\002\000\004\023\u015f\001" +
    "\002\000\012\025\uffaf\043\u015b\054\uffaf\056\u0159\001\002" +
    "\000\006\025\uffbc\054\u015a\001\002\000\004\025\uffba\001" +
    "\002\000\006\025\uffb1\054\uffb1\001\002\000\004\006\u0160" +
    "\001\002\000\004\033\u0161\001\002\000\004\024\u0162\001" +
    "\002\000\004\025\uffb4\001\002\000\006\025\uffb0\054\uffb0" +
    "\001\002\000\004\032\u0165\001\002\000\004\035\015\001" +
    "\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0164\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\020\022\021\024\023" +
    "\021\024\031\030\026\001\001\000\002\001\001\000\006" +
    "\024\u014b\030\026\001\001\000\012\021\u0136\023\u0134\024" +
    "\u0135\030\026\001\001\000\002\001\001\000\010\023\u010b" +
    "\024\u010c\030\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\034\001\001\000\002" +
    "\001\001\000\004\003\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\037\001\001" +
    "\000\002\001\001\000\004\023\041\001\001\000\002\001" +
    "\001\000\032\006\052\007\054\012\045\013\057\014\067" +
    "\021\055\027\046\031\060\033\053\035\070\036\065\037" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\006\052\007\054\012\045\013" +
    "\057\014\067\027\263\031\060\033\053\035\070\036\065" +
    "\037\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\006\052\007\054\012\045\013\057\014\067\027\262" +
    "\031\060\033\053\035\070\036\065\037\064\001\001\000" +
    "\002\001\001\000\010\033\053\035\201\037\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\006\052\007" +
    "\054\012\045\013\057\014\067\027\155\031\060\033\053" +
    "\035\070\036\065\037\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\006\052\007\054\012\045\013\057" +
    "\014\067\027\071\031\060\033\053\035\070\036\065\037" +
    "\064\001\001\000\002\001\001\000\012\015\073\033\053" +
    "\035\077\037\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\033\053\035\101\037\076\001\001\000\002\001" +
    "\001\000\012\033\053\034\115\035\110\037\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\033\053\034" +
    "\107\035\110\037\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\033\053\034\112\035" +
    "\110\037\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\006\127\007\131\012\124\013\132\014\135\016\125\031" +
    "\133\033\053\035\136\037\064\040\130\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\006\127\007\131\012" +
    "\124\013\132\014\135\016\125\031\133\033\053\035\136" +
    "\037\064\040\153\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\006\127\007\131\012\124\013\132\014\135\016" +
    "\125\031\133\033\053\035\136\037\064\040\142\001\001" +
    "\000\010\033\053\035\140\037\076\001\001\000\002\001" +
    "\001\000\030\006\127\007\131\012\124\013\132\014\135" +
    "\016\125\031\133\033\053\035\136\037\064\040\137\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\015\146\033\053\035\077\037\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\033\053\035\157\037\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\006\127" +
    "\007\131\012\124\013\132\014\135\016\125\031\133\033" +
    "\053\035\136\037\064\040\162\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\015\166\033" +
    "\053\035\077\037\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\015\176" +
    "\033\053\035\077\037\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\024\204\030\026\001\001\000\002\001" +
    "\001\000\012\015\206\033\053\035\077\037\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\006\127\007" +
    "\131\012\124\013\132\014\135\016\125\031\133\033\053" +
    "\035\136\037\064\040\211\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\015\216\033\053\035\077\037\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\006\127\007\131\012\124\013\132\014\135\016" +
    "\125\031\133\033\053\035\136\037\064\040\223\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\015\227\033\053\035\077\037\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\006\127\007\131\012" +
    "\124\013\132\014\135\016\125\031\133\033\053\035\136" +
    "\037\064\040\232\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\015\241\033\053\035\077\037" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\006" +
    "\127\007\131\012\124\013\132\014\135\016\125\031\133" +
    "\033\053\035\136\037\064\040\247\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\015\253" +
    "\033\053\035\077\037\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\033\053\035\265\037\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\024" +
    "\270\030\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\033\053\034\275\035\110\037" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\033\053\035\300\037\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\033\053\035\303" +
    "\037\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\024\306\030\307\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\006\052\007\054\012\045\013\057\014" +
    "\067\021\055\027\046\031\060\033\053\035\070\036\065" +
    "\037\064\001\001\000\010\033\053\035\312\037\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\024\204" +
    "\030\026\001\001\000\010\017\316\032\320\037\321\001" +
    "\001\000\002\001\001\000\010\033\053\035\345\037\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\033\053" +
    "\035\326\037\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\033\053\035\331\037\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\033\053\035\334\037" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\033\053\035\340\037\076\001\001\000\010\033\053\035" +
    "\343\037\076\001\001\000\002\001\001\000\010\033\053" +
    "\035\342\037\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\033\053\035\350\037\076\001\001\000\002" +
    "\001\001\000\010\033\053\035\347\037\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\006\127\007\131\012\124\013\132\014\135\016\125\031" +
    "\133\033\053\035\136\037\064\040\353\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\017" +
    "\357\032\320\037\321\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\u0100\001\001\000\004" +
    "\010\370\001\001\000\004\020\376\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\373\001\001\000\002" +
    "\001\001\000\004\020\375\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\u0103\001\001\000\002\001\001" +
    "\000\004\020\u0102\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\u0106\001\001\000\004\020\u0109\001\001" +
    "\000\002\001\001\000\004\020\u0108\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\u0114\001\001\000\006" +
    "\024\u0110\030\026\001\001\000\002\001\001\000\004\003" +
    "\u010e\001\001\000\002\001\001\000\004\003\u0113\001\001" +
    "\000\002\001\001\000\004\003\u0112\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\u0118\001\001\000\002\001" +
    "\001\000\004\021\u011c\001\001\000\010\033\053\035\u011b" +
    "\037\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\u011e\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\u0122\001\001\000\002\001" +
    "\001\000\004\021\u0124\001\001\000\002\001\001\000\004" +
    "\021\u0126\001\001\000\002\001\001\000\004\022\u0128\001" +
    "\001\000\002\001\001\000\004\021\u012a\001\001\000\002" +
    "\001\001\000\004\021\u012c\001\001\000\002\001\001\000" +
    "\004\022\u012e\001\001\000\002\001\001\000\004\021\u0130" +
    "\001\001\000\002\001\001\000\004\021\u0132\001\001\000" +
    "\002\001\001\000\004\003\u0149\001\001\000\006\024\u0145" +
    "\030\026\001\001\000\002\001\001\000\010\023\u0138\024" +
    "\u0139\030\026\001\001\000\004\003\u0141\001\001\000\006" +
    "\024\u013d\030\026\001\001\000\002\001\001\000\004\003" +
    "\u013b\001\001\000\002\001\001\000\004\003\u0140\001\001" +
    "\000\002\001\001\000\004\003\u013f\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\u0143" +
    "\001\001\000\002\001\001\000\004\003\u0148\001\001\000" +
    "\002\001\001\000\004\003\u0147\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\u014e\001" +
    "\001\000\002\001\001\000\004\003\u014d\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\u0151\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\u0155\001\001\000\002\001\001\000" +
    "\006\025\u015b\026\u0157\001\001\000\002\001\001\000\004" +
    "\025\u0162\001\001\000\002\001\001\000\004\025\u015d\001" +
    "\001\000\004\026\u015c\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\u0165\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public ArrayList<Symbol> errores = new ArrayList<>();
  public ArrayList<String> erroresStr = new ArrayList<>();
  
  public void syntax_error(Symbol s) {
    System.out.println("ERROR CON: " + s.value);
    String cadena = "";

    for (int i = 0; i < this.stack.size(); i++) {
      Symbol sp = this.stack.get(i);
      //System.out.println(sp.value+" "+Integer.toString(sp.sym));      
    }
    for (int i = this.stack.size() - 1; i > 0; i--) {
      Symbol sp = this.stack.get(i);
      System.out.println(sp.value+" "+Integer.toString(sp.sym));
      cadena = sp.value + " " + cadena;
      if ("enum".equals(sp.value)) {
        System.out.println("Soy un error de enum xd");
        cadena += "~" + s.value + "~ ...";
        //if (this.lookahead != null) for (Symbol x : this.lookahead) System.out.println(x.value);
        Symbol sp2 = new Symbol(sp.sym, sp.left, sp.right, cadena);
        errores.add(sp2);
        erroresStr.add("Enum");
        break;
      }
        }
  }

  @Override
  public int error_sync_size() {
    return 2;
  }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // SENTENCIA_FOR ::= P_coma P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // SENTENCIA_FOR ::= ASIGNACION_COMPLEJA P_coma P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // SENTENCIA_FOR ::= P_coma EXPRESION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // SENTENCIA_FOR ::= P_coma P_coma EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // SENTENCIA_FOR ::= ASIGNACION_COMPLEJA P_coma EXPRESION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // SENTENCIA_FOR ::= ASIGNACION_COMPLEJA P_coma P_coma EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // SENTENCIA_FOR ::= P_coma EXPRESION P_coma EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // SENTENCIA_FOR ::= ASIGNACION_COMPLEJA P_coma EXPRESION P_coma EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a CUERPO_EC Llave_c For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // DO_WHILE ::= Do Llave_a CUERPO_EC Llave_c While Parentesis_a EXPRESION_BOOLEANA Parentesis_c P_coma Do Llave_a Llave_c While Parentesis_a EXPRESION_BOOLEANA Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // WHILE ::= While Parentesis_a EXPRESION_BOOLEANA Parentesis_c Llave_a CUERPO_EC Llave_c While Parentesis_a EXPRESION_BOOLEANA Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // IF_ELSE ::= If Parentesis_a EXPRESION_BOOLEANA Parentesis_c Llave_a CUERPO_EC Llave_c Else Llave_a CUERPO_EC Llave_c If Parentesis_a EXPRESION_BOOLEANA Parentesis_c Llave_a CUERPO_EC Llave_c Else Llave_a Llave_c If Parentesis_a EXPRESION_BOOLEANA Parentesis_c Llave_a Llave_c Else Llave_a CUERPO_EC Llave_c If Parentesis_a EXPRESION_BOOLEANA Parentesis_c Llave_a Llave_c Else Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-39)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // EXPRESION_BOOLEANA ::= EXPRESION Op_relacional EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEANA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // EXPRESION_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEANA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // IF ::= If Parentesis_a EXPRESION_BOOLEANA Parentesis_c Llave_a CUERPO_EC Llave_c If Parentesis_a EXPRESION_BOOLEANA Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // OP_TERNARIO ::= Parentesis_a EXPRESION_BOOLEANA Parentesis_c Pregunta EXPRESION Dos_Puntos EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_TERNARIO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CUERPO_EC ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO_EC",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CUERPO_EC ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO_EC",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CUERPO_EC ::= ASIGNACION_BASICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO_EC",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // CUERPO_EC ::= SENTENCIA CUERPO_EC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO_EC",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CUERPO_EC ::= EXPRESION CUERPO_EC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO_EC",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // CUERPO_EC ::= ASIGNACION_BASICA CUERPO_EC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO_EC",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // SENTENCIA ::= Return EXPRESION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // SENTENCIA ::= Continue P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // SENTENCIA ::= Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ESTRUCTURA_CONTROL ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CONTROL",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ESTRUCTURA_CONTROL ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CONTROL",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ESTRUCTURA_CONTROL ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CONTROL",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ESTRUCTURA_CONTROL ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CONTROL",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ESTRUCTURA_CONTROL ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CONTROL",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXPRESION ::= IDENTIFICADOR_CUERPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXPRESION ::= LLAMADA_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXPRESION ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXPRESION ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXPRESION ::= Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXPRESION ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ARGUMENTOS ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ARGUMENTOS ::= EXPRESION Coma ARGUMENTOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // LLAMADA_FUNCION ::= Identificador Parentesis_a Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // LLAMADA_FUNCION ::= Identificador Parentesis_a ARGUMENTOS Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ASIGNACION_COMPLEJA ::= Identificador Igual EXPRESION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION_COMPLEJA",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ASIGNACION_COMPLEJA ::= T_dato Identificador Igual EXPRESION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION_COMPLEJA",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ASIGNACION_COMPLEJA ::= IDENTIFICADOR_CUERPO Igual EXPRESION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION_COMPLEJA",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ASIGNACION_BASICA ::= Identificador Igual EXPRESION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION_BASICA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ASIGNACION_BASICA ::= IDENTIFICADOR_CUERPO Igual EXPRESION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION_BASICA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // IDENTIFICADOR_CUERPO ::= Identificador Punto Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_CUERPO",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // IDENTIFICADOR_CUERPO ::= Identificador Punto Identificador Parentesis_a Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_CUERPO",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // IDENTIFICADOR_CUERPO ::= Identificador Punto Identificador Parentesis_a ARGUMENTOS Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_CUERPO",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // IDENTIFICADOR_CUERPO ::= This Punto Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_CUERPO",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // IDENTIFICADOR_CUERPO ::= This Punto Identificador Parentesis_a ARGUMENTOS Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_CUERPO",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // IDENTIFICADOR_CUERPO ::= This Punto Identificador Parentesis_a Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_CUERPO",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CUERPO ::= ESTRUCTURA_CONTROL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CUERPO ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CUERPO ::= ASIGNACION_BASICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CUERPO ::= ESTRUCTURA_CONTROL CUERPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CUERPO ::= EXPRESION CUERPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CUERPO ::= ASIGNACION_BASICA CUERPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // MODIFICADORES ::= Visibilidad 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // MODIFICADORES ::= Modificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // MODIFICADORES ::= Visibilidad MODIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // MODIFICADORES ::= Modificador MODIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // PARAMETROS ::= T_dato Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // PARAMETROS ::= T_dato Identificador Coma PARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // RETURNS ::= Returns Parentesis_a T_dato Identificador Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURNS",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // FUNCION ::= FUNCION_HEADER Llave_a CUERPO Return EXPRESION P_coma Llave_c FUNCION_HEADER Llave_a Return EXPRESION P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // FUNCION ::= FUNCION_HEADER Llave_a VARIABLES CUERPO Return EXPRESION P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // FUNCION ::= FUNCION_HEADER Llave_a Return EXPRESION P_coma Llave_c FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // FUNCION ::= FUNCION_HEADER Llave_a CUERPO Return EXPRESION P_coma Llave_c FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // FUNCION ::= FUNCION_HEADER Llave_a VARIABLES CUERPO Return EXPRESION P_coma Llave_c FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // FUNCION_HEADER ::= Function Identificador Parentesis_a PARAMETROS Parentesis_c MODIFICADORES RETURNS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_HEADER",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FUNCION_HEADER ::= Function Identificador Parentesis_a PARAMETROS Parentesis_c RETURNS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_HEADER",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FUNCION_HEADER ::= Function Identificador Parentesis_a PARAMETROS Parentesis_c MODIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_HEADER",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FUNCION_HEADER ::= Function Identificador Parentesis_a PARAMETROS Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_HEADER",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ESTRUCTURA ::= Struct Identificador Llave_a VARIABLES Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ESTRUCTURA ::= Struct Identificador Llave_a VARIABLES Llave_c ESTRUCTURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ASIGNACION ::= Igual EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VARIABLES ::= T_dato Corchete_a Corchete_c Identificador ASIGNACION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // VARIABLES ::= T_dato Corchete_a Corchete_c Visibilidad Identificador ASIGNACION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // VARIABLES ::= T_dato Identificador ASIGNACION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // VARIABLES ::= T_dato Visibilidad Identificador ASIGNACION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // VARIABLES ::= T_dato Corchete_a Corchete_c Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // VARIABLES ::= T_dato Corchete_a Corchete_c Visibilidad Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // VARIABLES ::= T_dato Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // VARIABLES ::= T_dato Visibilidad Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // VARIABLES ::= T_dato Corchete_a Corchete_c Identificador ASIGNACION P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // VARIABLES ::= T_dato Corchete_a Corchete_c Visibilidad Identificador ASIGNACION P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // VARIABLES ::= T_dato Identificador ASIGNACION P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // VARIABLES ::= T_dato Visibilidad Identificador ASIGNACION P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VARIABLES ::= T_dato Corchete_a Corchete_c Identificador P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VARIABLES ::= T_dato Corchete_a Corchete_c Visibilidad Identificador P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // VARIABLES ::= T_dato Identificador P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VARIABLES ::= T_dato Visibilidad Identificador P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LISTA ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LISTA ::= Identificador Coma LISTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ENUMERADOR ::= Enum Identificador error Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ENUMERADOR ::= Enum Identificador error LISTA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ENUMERADOR ::= Enum error Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ENUMERADOR ::= Enum error Llave_a LISTA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ENUMERADOR ::= Enum Identificador error Llave_c ENUMERADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ENUMERADOR ::= Enum Identificador error LISTA Llave_c ENUMERADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ENUMERADOR ::= Enum error Llave_a Llave_c ENUMERADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ENUMERADOR ::= Enum error Llave_a LISTA Llave_c ENUMERADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ENUMERADOR ::= Enum Identificador Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ENUMERADOR ::= Enum Identificador Llave_a LISTA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ENUMERADOR ::= Enum Identificador Llave_a Llave_c ENUMERADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ENUMERADOR ::= Enum Identificador Llave_a LISTA Llave_c ENUMERADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONTRATO ::= Contract Identificador Llave_a FUNCION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONTRATO ::= Contract Identificador Llave_a ESTRUCTURA FUNCION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONTRATO ::= Contract Identificador Llave_a ESTRUCTURA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONTRATO ::= Contract Identificador Llave_a VARIABLES ESTRUCTURA FUNCION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONTRATO ::= Contract Identificador Llave_a VARIABLES FUNCION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CONTRATO ::= Contract Identificador Llave_a VARIABLES ESTRUCTURA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CONTRATO ::= Contract Identificador Llave_a VARIABLES Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR VARIABLES ESTRUCTURA FUNCION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR ESTRUCTURA FUNCION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR VARIABLES FUNCION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR VARIABLES ESTRUCTURA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR FUNCION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR ESTRUCTURA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR VARIABLES Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CONTRATO ::= Contract Identificador Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CONTRATO ::= Contract Identificador Llave_a FUNCION Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CONTRATO ::= Contract Identificador Llave_a ESTRUCTURA FUNCION Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CONTRATO ::= Contract Identificador Llave_a ESTRUCTURA Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONTRATO ::= Contract Identificador Llave_a VARIABLES ESTRUCTURA FUNCION Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CONTRATO ::= Contract Identificador Llave_a VARIABLES FUNCION Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CONTRATO ::= Contract Identificador Llave_a VARIABLES ESTRUCTURA Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CONTRATO ::= Contract Identificador Llave_a VARIABLES Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR VARIABLES ESTRUCTURA FUNCION Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR ESTRUCTURA FUNCION Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR VARIABLES FUNCION Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR VARIABLES ESTRUCTURA Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR FUNCION Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR ESTRUCTURA Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR VARIABLES Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CONTRATO ::= Contract Identificador Llave_a Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Pragma Solidity Caret Numero Numero P_coma CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Pragma Solidity Numero Numero P_coma CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

