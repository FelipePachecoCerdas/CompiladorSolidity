
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jul 22 16:16:31 CST 2020
//----------------------------------------------------

package lexico;

import java_cup.runtime.Symbol;
import java.util.Stack;
import java.util.ArrayList;
import java.util.Iterator;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jul 22 16:16:31 CST 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\243\000\002\002\004\000\002\002\010\000\002\002" +
    "\011\000\002\003\007\000\002\003\010\000\002\003\011" +
    "\000\002\003\011\000\002\003\011\000\002\003\012\000" +
    "\002\003\012\000\002\003\012\000\002\003\013\000\002" +
    "\003\010\000\002\003\011\000\002\003\011\000\002\003" +
    "\012\000\002\003\010\000\002\003\011\000\002\003\010" +
    "\000\002\003\006\000\002\003\007\000\002\003\010\000" +
    "\002\003\010\000\002\003\010\000\002\003\011\000\002" +
    "\003\011\000\002\003\011\000\002\003\012\000\002\003" +
    "\007\000\002\003\010\000\002\003\010\000\002\003\011" +
    "\000\002\003\007\000\002\003\010\000\002\003\007\000" +
    "\002\020\010\000\002\020\007\000\002\020\007\000\002" +
    "\020\006\000\002\020\010\000\002\020\007\000\002\020" +
    "\010\000\002\020\007\000\002\020\007\000\002\020\006" +
    "\000\002\020\007\000\002\020\006\000\002\010\005\000" +
    "\002\010\003\000\002\021\007\000\002\021\006\000\002" +
    "\021\011\000\002\021\010\000\002\021\010\000\002\021" +
    "\007\000\002\021\012\000\002\021\011\000\002\021\006" +
    "\000\002\021\005\000\002\021\010\000\002\021\007\000" +
    "\002\021\007\000\002\021\006\000\002\021\011\000\002" +
    "\021\010\000\002\022\004\000\002\023\010\000\002\023" +
    "\007\000\002\030\007\000\002\030\010\000\002\030\010" +
    "\000\002\030\011\000\002\024\012\000\002\024\013\000" +
    "\002\024\012\000\002\024\011\000\002\024\011\000\002" +
    "\024\012\000\002\024\017\000\002\026\007\000\002\011" +
    "\006\000\002\011\004\000\002\025\004\000\002\025\004" +
    "\000\002\025\003\000\002\025\003\000\002\027\004\000" +
    "\002\027\005\000\002\027\004\000\002\027\003\000\002" +
    "\027\004\000\002\027\003\000\002\037\007\000\002\037" +
    "\010\000\002\037\005\000\002\037\010\000\002\037\007" +
    "\000\002\037\005\000\002\031\006\000\002\031\006\000" +
    "\002\032\006\000\002\032\007\000\002\032\006\000\002" +
    "\033\006\000\002\033\005\000\002\034\005\000\002\034" +
    "\003\000\002\035\005\000\002\035\005\000\002\035\005" +
    "\000\002\035\005\000\002\035\005\000\002\035\005\000" +
    "\002\035\005\000\002\035\005\000\002\035\005\000\002" +
    "\035\005\000\002\035\005\000\002\035\005\000\002\035" +
    "\005\000\002\035\005\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\004\000" +
    "\002\016\004\000\002\016\005\000\002\040\004\000\002" +
    "\040\005\000\002\040\004\000\002\040\003\000\002\040" +
    "\004\000\002\040\003\000\002\004\012\000\002\006\017" +
    "\000\002\015\003\000\002\015\005\000\002\007\052\000" +
    "\002\012\017\000\002\013\023\000\002\014\017\000\002" +
    "\017\007\000\002\017\006\000\002\017\006\000\002\017" +
    "\006\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u018e\000\004\037\004\001\002\000\004\040\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\006\034\010\045\011\001\002\000\004\034\u018e\001" +
    "\002\000\004\034\012\001\002\000\004\034\013\001\002" +
    "\000\004\032\014\001\002\000\004\035\015\001\002\000" +
    "\004\033\017\001\002\000\004\002\uffff\001\002\000\004" +
    "\025\020\001\002\000\014\006\024\026\031\036\026\041" +
    "\030\042\021\001\002\000\004\033\u017a\001\002\000\006" +
    "\026\u0175\042\021\001\002\000\012\006\024\026\u015e\041" +
    "\030\042\021\001\002\000\010\027\u0141\033\u0142\056\u0140" +
    "\001\002\000\010\026\u0135\041\030\042\021\001\002\000" +
    "\006\003\u011e\033\u011f\001\002\000\004\025\043\001\002" +
    "\000\004\033\036\001\002\000\006\002\uffee\035\015\001" +
    "\002\000\004\026\033\001\002\000\006\002\uffdf\035\015" +
    "\001\002\000\004\002\uffef\001\002\000\004\002\ufffe\001" +
    "\002\000\004\025\037\001\002\000\004\006\024\001\002" +
    "\000\004\026\041\001\002\000\010\026\uffbe\041\030\042" +
    "\uffbe\001\002\000\006\026\uffbf\042\uffbf\001\002\000\032" +
    "\006\024\007\061\010\064\012\066\013\071\014\044\022" +
    "\052\023\045\033\053\034\047\047\054\053\065\001\002" +
    "\000\004\023\370\001\002\000\016\007\061\022\100\023" +
    "\045\033\101\034\047\047\054\001\002\000\020\015\uff88" +
    "\017\355\020\uff88\024\uff88\032\uff88\044\uff88\055\356\001" +
    "\002\000\020\015\uff87\017\351\020\uff87\024\uff87\032\uff87" +
    "\044\uff87\055\352\001\002\000\030\007\uff7f\010\uff7f\012" +
    "\uff7f\013\uff7f\014\uff7f\022\uff7f\023\uff7f\033\uff7f\034\uff7f" +
    "\047\uff7f\053\uff7f\001\002\000\004\053\336\001\002\000" +
    "\020\015\uff85\017\133\020\uff85\024\uff85\032\uff85\044\uff85" +
    "\055\134\001\002\000\016\016\333\017\113\023\112\032" +
    "\uff84\046\115\055\114\001\002\000\004\046\325\001\002" +
    "\000\030\007\uff80\010\uff80\012\uff80\013\uff80\014\uff80\022" +
    "\uff80\023\uff80\033\uff80\034\uff80\047\uff80\053\uff80\001\002" +
    "\000\020\015\uff83\017\321\020\uff83\024\uff83\032\uff83\044" +
    "\uff83\055\322\001\002\000\030\007\uff81\010\uff81\012\uff81" +
    "\013\uff81\014\uff81\022\uff81\023\uff81\033\uff81\034\uff81\047" +
    "\uff81\053\uff81\001\002\000\030\007\061\010\064\012\066" +
    "\013\071\014\044\022\052\023\045\033\053\034\047\047" +
    "\054\053\307\001\002\000\020\015\uff86\017\302\020\uff86" +
    "\024\uff86\032\uff86\044\uff86\055\303\001\002\000\030\007" +
    "\uff7e\010\uff7e\012\uff7e\013\uff7e\014\uff7e\022\uff7e\023\uff7e" +
    "\033\uff7e\034\uff7e\047\uff7e\053\uff7e\001\002\000\030\007" +
    "\061\010\064\012\066\013\071\014\044\022\052\023\045" +
    "\033\053\034\047\047\054\053\uffa8\001\002\000\004\023" +
    "\224\001\002\000\016\007\061\022\052\023\045\033\101" +
    "\034\047\047\054\001\002\000\004\025\200\001\002\000" +
    "\012\016\175\017\106\032\uff82\055\107\001\002\000\030" +
    "\007\061\010\064\012\066\013\071\014\044\022\052\023" +
    "\045\033\053\034\047\047\054\053\uffa6\001\002\000\004" +
    "\023\076\001\002\000\030\007\uff7d\010\uff7d\012\uff7d\013" +
    "\uff7d\014\uff7d\022\uff7d\023\uff7d\033\uff7d\034\uff7d\047\uff7d" +
    "\053\uff7d\001\002\000\004\032\074\001\002\000\030\007" +
    "\061\010\064\012\066\013\071\014\044\022\052\023\045" +
    "\033\053\034\047\047\054\053\uffa7\001\002\000\004\053" +
    "\uffaa\001\002\000\016\007\061\022\100\023\045\033\101" +
    "\034\047\047\054\001\002\000\004\024\137\001\002\000" +
    "\012\017\133\020\uff85\024\uff6c\055\134\001\002\000\024" +
    "\015\uff84\017\113\020\uff84\023\112\024\uff84\032\uff84\044" +
    "\uff84\046\115\055\114\001\002\000\020\015\uff82\017\106" +
    "\020\uff82\024\uff82\032\uff82\044\uff82\055\107\001\002\000" +
    "\004\020\104\001\002\000\016\007\061\022\052\023\045" +
    "\033\101\034\047\047\054\001\002\000\004\024\uff6b\001" +
    "\002\000\016\007\061\022\052\023\045\033\101\034\047" +
    "\047\054\001\002\000\016\007\061\022\052\023\045\033" +
    "\101\034\047\047\054\001\002\000\014\015\uff91\020\uff91" +
    "\024\uff91\032\uff91\044\uff91\001\002\000\014\015\uff8a\020" +
    "\uff8a\024\uff8a\032\uff8a\044\uff8a\001\002\000\020\007\061" +
    "\022\052\023\045\024\130\033\101\034\047\047\054\001" +
    "\002\000\016\007\061\022\052\023\045\033\101\034\047" +
    "\047\054\001\002\000\016\007\061\022\052\023\045\033" +
    "\101\034\047\047\054\001\002\000\004\033\116\001\002" +
    "\000\024\015\uffa0\016\uffa0\017\uffa0\020\uffa0\023\117\024" +
    "\uffa0\032\uffa0\044\uffa0\055\uffa0\001\002\000\020\007\061" +
    "\022\052\023\045\024\120\033\101\034\047\047\054\001" +
    "\002\000\022\015\uffa1\016\uffa1\017\uffa1\020\uffa1\024\uffa1" +
    "\032\uffa1\044\uffa1\055\uffa1\001\002\000\004\024\125\001" +
    "\002\000\006\024\uff97\044\123\001\002\000\016\007\061" +
    "\022\052\023\045\033\101\034\047\047\054\001\002\000" +
    "\004\024\uff98\001\002\000\022\015\uffa2\016\uffa2\017\uffa2" +
    "\020\uffa2\024\uffa2\032\uffa2\044\uffa2\055\uffa2\001\002\000" +
    "\014\015\uff93\020\uff93\024\uff93\032\uff93\044\uff93\001\002" +
    "\000\014\015\uff8c\020\uff8c\024\uff8c\032\uff8c\044\uff8c\001" +
    "\002\000\020\015\uff99\017\uff99\020\uff99\024\uff99\032\uff99" +
    "\044\uff99\055\uff99\001\002\000\004\024\132\001\002\000" +
    "\020\015\uff9a\017\uff9a\020\uff9a\024\uff9a\032\uff9a\044\uff9a" +
    "\055\uff9a\001\002\000\016\007\061\022\052\023\045\033" +
    "\101\034\047\047\054\001\002\000\016\007\061\022\052" +
    "\023\045\033\101\034\047\047\054\001\002\000\014\015" +
    "\uff94\020\uff94\024\uff94\032\uff94\044\uff94\001\002\000\014" +
    "\015\uff8d\020\uff8d\024\uff8d\032\uff8d\044\uff8d\001\002\000" +
    "\004\025\140\001\002\000\034\007\061\010\064\012\066" +
    "\013\071\014\044\022\052\023\045\033\053\034\047\047" +
    "\054\050\144\051\141\053\152\001\002\000\004\032\173" +
    "\001\002\000\036\007\uff7a\010\uff7a\012\uff7a\013\uff7a\014" +
    "\uff7a\022\uff7a\023\uff7a\026\uff7a\033\uff7a\034\uff7a\047\uff7a" +
    "\050\uff7a\051\uff7a\053\uff7a\001\002\000\036\007\061\010" +
    "\064\012\066\013\071\014\044\022\052\023\045\026\uff6f" +
    "\033\053\034\047\047\054\050\144\051\141\053\152\001" +
    "\002\000\004\032\171\001\002\000\036\007\uff7b\010\uff7b" +
    "\012\uff7b\013\uff7b\014\uff7b\022\uff7b\023\uff7b\026\uff7b\033" +
    "\uff7b\034\uff7b\047\uff7b\050\uff7b\051\uff7b\053\uff7b\001\002" +
    "\000\004\026\162\001\002\000\036\007\uff7c\010\uff7c\012" +
    "\uff7c\013\uff7c\014\uff7c\022\uff7c\023\uff7c\026\uff7c\033\uff7c" +
    "\034\uff7c\047\uff7c\050\uff7c\051\uff7c\053\uff7c\001\002\000" +
    "\036\007\uff79\010\uff79\012\uff79\013\uff79\014\uff79\022\uff79" +
    "\023\uff79\026\uff79\033\uff79\034\uff79\047\uff79\050\uff79\051" +
    "\uff79\053\uff79\001\002\000\036\007\061\010\064\012\066" +
    "\013\071\014\044\022\052\023\045\026\uff71\033\053\034" +
    "\047\047\054\050\144\051\141\053\152\001\002\000\016" +
    "\007\061\022\052\023\045\033\101\034\047\047\054\001" +
    "\002\000\036\007\uff78\010\uff78\012\uff78\013\uff78\014\uff78" +
    "\022\uff78\023\uff78\026\uff78\033\uff78\034\uff78\047\uff78\050" +
    "\uff78\051\uff78\053\uff78\001\002\000\004\032\155\001\002" +
    "\000\036\007\061\010\064\012\066\013\071\014\044\022" +
    "\052\023\045\026\uff70\033\053\034\047\047\054\050\144" +
    "\051\141\053\152\001\002\000\004\026\uff73\001\002\000" +
    "\004\032\160\001\002\000\036\007\uff75\010\uff75\012\uff75" +
    "\013\uff75\014\uff75\022\uff75\023\uff75\026\uff75\033\uff75\034" +
    "\uff75\047\uff75\050\uff75\051\uff75\053\uff75\001\002\000\004" +
    "\026\uff74\001\002\000\004\013\163\001\002\000\004\023" +
    "\164\001\002\000\016\007\061\022\100\023\045\033\101" +
    "\034\047\047\054\001\002\000\004\024\166\001\002\000" +
    "\004\025\167\001\002\000\004\026\170\001\002\000\036" +
    "\007\uff69\010\uff69\012\uff69\013\uff69\014\uff69\022\uff69\023" +
    "\uff69\026\uff69\033\uff69\034\uff69\047\uff69\050\uff69\051\uff69" +
    "\053\uff69\001\002\000\036\007\uff77\010\uff77\012\uff77\013" +
    "\uff77\014\uff77\022\uff77\023\uff77\026\uff77\033\uff77\034\uff77" +
    "\047\uff77\050\uff77\051\uff77\053\uff77\001\002\000\004\026" +
    "\uff72\001\002\000\036\007\uff76\010\uff76\012\uff76\013\uff76" +
    "\014\uff76\022\uff76\023\uff76\026\uff76\033\uff76\034\uff76\047" +
    "\uff76\050\uff76\051\uff76\053\uff76\001\002\000\004\053\uffa9" +
    "\001\002\000\016\007\061\022\052\023\045\033\101\034" +
    "\047\047\054\001\002\000\004\032\177\001\002\000\036" +
    "\007\uff9f\010\uff9f\012\uff9f\013\uff9f\014\uff9f\022\uff9f\023" +
    "\uff9f\026\uff9f\033\uff9f\034\uff9f\047\uff9f\050\uff9f\051\uff9f" +
    "\053\uff9f\001\002\000\034\007\061\010\064\012\066\013" +
    "\071\014\044\022\052\023\045\033\053\034\047\047\054" +
    "\050\144\051\141\053\152\001\002\000\004\026\202\001" +
    "\002\000\004\013\203\001\002\000\004\023\204\001\002" +
    "\000\016\007\061\022\100\023\045\033\101\034\047\047" +
    "\054\001\002\000\004\024\206\001\002\000\004\032\207" +
    "\001\002\000\004\012\210\001\002\000\004\025\211\001" +
    "\002\000\004\026\212\001\002\000\004\013\213\001\002" +
    "\000\004\023\214\001\002\000\016\007\061\022\100\023" +
    "\045\033\101\034\047\047\054\001\002\000\004\024\216" +
    "\001\002\000\004\032\217\001\002\000\036\007\uff68\010" +
    "\uff68\012\uff68\013\uff68\014\uff68\022\uff68\023\uff68\026\uff68" +
    "\033\uff68\034\uff68\047\uff68\050\uff68\051\uff68\053\uff68\001" +
    "\002\000\004\032\221\001\002\000\004\026\222\001\002" +
    "\000\004\042\021\001\002\000\004\026\uffb6\001\002\000" +
    "\016\007\061\022\100\023\045\033\101\034\047\047\054" +
    "\001\002\000\004\024\226\001\002\000\004\025\227\001" +
    "\002\000\034\007\061\010\064\012\066\013\071\014\044" +
    "\022\052\023\045\033\053\034\047\047\054\050\144\051" +
    "\141\053\152\001\002\000\004\026\231\001\002\000\006" +
    "\010\233\011\232\001\002\000\004\025\241\001\002\000" +
    "\004\023\234\001\002\000\016\007\061\022\100\023\045" +
    "\033\101\034\047\047\054\001\002\000\004\024\236\001" +
    "\002\000\004\025\237\001\002\000\004\026\240\001\002" +
    "\000\036\007\uff6d\010\uff6d\012\uff6d\013\uff6d\014\uff6d\022" +
    "\uff6d\023\uff6d\026\uff6d\033\uff6d\034\uff6d\047\uff6d\050\uff6d" +
    "\051\uff6d\053\uff6d\001\002\000\034\007\061\010\064\012" +
    "\066\013\071\014\044\022\052\023\045\033\053\034\047" +
    "\047\054\050\144\051\141\053\152\001\002\000\004\026" +
    "\243\001\002\000\004\010\244\001\002\000\004\023\245" +
    "\001\002\000\016\007\061\022\100\023\045\033\101\034" +
    "\047\047\054\001\002\000\004\024\247\001\002\000\004" +
    "\025\250\001\002\000\034\007\061\010\064\012\066\013" +
    "\071\014\044\022\052\023\045\033\053\034\047\047\054" +
    "\050\144\051\141\053\152\001\002\000\004\026\252\001" +
    "\002\000\004\011\253\001\002\000\004\025\254\001\002" +
    "\000\004\026\255\001\002\000\004\010\256\001\002\000" +
    "\004\023\257\001\002\000\016\007\061\022\100\023\045" +
    "\033\101\034\047\047\054\001\002\000\004\024\261\001" +
    "\002\000\004\025\262\001\002\000\004\026\263\001\002" +
    "\000\004\011\264\001\002\000\004\025\265\001\002\000" +
    "\034\007\061\010\064\012\066\013\071\014\044\022\052" +
    "\023\045\033\053\034\047\047\054\050\144\051\141\053" +
    "\152\001\002\000\004\026\267\001\002\000\004\010\270" +
    "\001\002\000\004\023\271\001\002\000\016\007\061\022" +
    "\100\023\045\033\101\034\047\047\054\001\002\000\004" +
    "\024\273\001\002\000\004\025\274\001\002\000\004\026" +
    "\275\001\002\000\004\011\276\001\002\000\004\025\277" +
    "\001\002\000\004\026\300\001\002\000\036\007\uff6a\010" +
    "\uff6a\012\uff6a\013\uff6a\014\uff6a\022\uff6a\023\uff6a\026\uff6a" +
    "\033\uff6a\034\uff6a\047\uff6a\050\uff6a\051\uff6a\053\uff6a\001" +
    "\002\000\004\053\uffab\001\002\000\016\007\061\022\052" +
    "\023\045\033\101\034\047\047\054\001\002\000\016\007" +
    "\061\022\052\023\045\033\101\034\047\047\054\001\002" +
    "\000\014\015\uff95\020\uff95\024\uff95\032\uff95\044\uff95\001" +
    "\002\000\014\015\uff8e\020\uff8e\024\uff8e\032\uff8e\044\uff8e" +
    "\001\002\000\004\053\314\001\002\000\016\007\061\022" +
    "\052\023\045\033\101\034\047\047\054\001\002\000\004" +
    "\032\311\001\002\000\004\026\312\001\002\000\006\026" +
    "\uffb5\042\021\001\002\000\004\026\uffb9\001\002\000\016" +
    "\007\061\022\052\023\045\033\101\034\047\047\054\001" +
    "\002\000\004\032\316\001\002\000\004\026\317\001\002" +
    "\000\006\026\uffb4\042\021\001\002\000\004\026\uffb8\001" +
    "\002\000\016\007\061\022\052\023\045\033\101\034\047" +
    "\047\054\001\002\000\016\007\061\022\052\023\045\033" +
    "\101\034\047\047\054\001\002\000\014\015\uff92\020\uff92" +
    "\024\uff92\032\uff92\044\uff92\001\002\000\014\015\uff8b\020" +
    "\uff8b\024\uff8b\032\uff8b\044\uff8b\001\002\000\004\033\326" +
    "\001\002\000\024\015\uffa3\016\uffa3\017\uffa3\020\uffa3\023" +
    "\327\024\uffa3\032\uffa3\044\uffa3\055\uffa3\001\002\000\020" +
    "\007\061\022\052\023\045\024\330\033\101\034\047\047" +
    "\054\001\002\000\022\015\uffa5\016\uffa5\017\uffa5\020\uffa5" +
    "\024\uffa5\032\uffa5\044\uffa5\055\uffa5\001\002\000\004\024" +
    "\332\001\002\000\022\015\uffa4\016\uffa4\017\uffa4\020\uffa4" +
    "\024\uffa4\032\uffa4\044\uffa4\055\uffa4\001\002\000\016\007" +
    "\061\022\052\023\045\033\101\034\047\047\054\001\002" +
    "\000\004\032\335\001\002\000\036\007\uff9e\010\uff9e\012" +
    "\uff9e\013\uff9e\014\uff9e\022\uff9e\023\uff9e\026\uff9e\033\uff9e" +
    "\034\uff9e\047\uff9e\050\uff9e\051\uff9e\053\uff9e\001\002\000" +
    "\016\007\061\022\052\023\045\033\101\034\047\047\054" +
    "\001\002\000\004\032\340\001\002\000\004\026\341\001" +
    "\002\000\004\042\021\001\002\000\004\026\uffb7\001\002" +
    "\000\004\025\344\001\002\000\032\006\024\007\061\010" +
    "\064\012\066\013\071\014\044\022\052\023\045\033\053" +
    "\034\047\047\054\053\345\001\002\000\016\007\061\022" +
    "\052\023\045\033\101\034\047\047\054\001\002\000\004" +
    "\032\347\001\002\000\004\026\350\001\002\000\006\026" +
    "\uffb3\042\021\001\002\000\016\007\061\022\052\023\045" +
    "\033\101\034\047\047\054\001\002\000\016\007\061\022" +
    "\052\023\045\033\101\034\047\047\054\001\002\000\014" +
    "\015\uff96\020\uff96\024\uff96\032\uff96\044\uff96\001\002\000" +
    "\014\015\uff8f\020\uff8f\024\uff8f\032\uff8f\044\uff8f\001\002" +
    "\000\016\007\061\022\052\023\045\033\101\034\047\047" +
    "\054\001\002\000\016\007\061\022\052\023\045\033\101" +
    "\034\047\047\054\001\002\000\014\015\uff90\020\uff90\024" +
    "\uff90\032\uff90\044\uff90\001\002\000\014\015\uff89\020\uff89" +
    "\024\uff89\032\uff89\044\uff89\001\002\000\004\024\362\001" +
    "\002\000\004\057\363\001\002\000\016\007\061\022\052" +
    "\023\045\033\101\034\047\047\054\001\002\000\004\015" +
    "\365\001\002\000\016\007\061\022\052\023\045\033\101" +
    "\034\047\047\054\001\002\000\004\032\367\001\002\000" +
    "\020\015\uff6e\017\uff6e\020\uff6e\024\uff6e\032\uff6e\044\uff6e" +
    "\055\uff6e\001\002\000\012\006\375\032\372\033\376\047" +
    "\054\001\002\000\004\024\u0114\001\002\000\020\007\061" +
    "\022\052\023\045\032\u010f\033\101\034\047\047\054\001" +
    "\002\000\004\032\u0109\001\002\000\004\016\u0106\001\002" +
    "\000\004\033\u0102\001\002\000\006\016\377\046\115\001" +
    "\002\000\016\007\061\022\052\023\045\033\101\034\047" +
    "\047\054\001\002\000\004\032\u0101\001\002\000\004\032" +
    "\uff9b\001\002\000\004\016\u0103\001\002\000\016\007\061" +
    "\022\052\023\045\033\101\034\047\047\054\001\002\000" +
    "\004\032\u0105\001\002\000\004\032\uff9c\001\002\000\016" +
    "\007\061\022\052\023\045\033\101\034\047\047\054\001" +
    "\002\000\004\032\u0108\001\002\000\004\032\uff9d\001\002" +
    "\000\020\007\061\022\052\023\045\032\u010a\033\101\034" +
    "\047\047\054\001\002\000\020\007\061\022\052\023\045" +
    "\024\uff60\033\101\034\047\047\054\001\002\000\004\032" +
    "\u010c\001\002\000\020\007\061\022\052\023\045\024\uff63" +
    "\033\101\034\047\047\054\001\002\000\004\024\uff66\001" +
    "\002\000\004\024\uff64\001\002\000\020\007\061\022\052" +
    "\023\045\024\uff5f\033\101\034\047\047\054\001\002\000" +
    "\004\032\u0111\001\002\000\020\007\061\022\052\023\045" +
    "\024\uff61\033\101\034\047\047\054\001\002\000\004\024" +
    "\uff65\001\002\000\004\024\uff62\001\002\000\004\025\u0115" +
    "\001\002\000\034\007\061\010\064\012\066\013\071\014" +
    "\044\022\052\023\045\033\053\034\047\047\054\050\144" +
    "\051\141\053\152\001\002\000\004\026\u0117\001\002\000" +
    "\004\014\u0118\001\002\000\004\023\u0119\001\002\000\012" +
    "\006\375\032\372\033\376\047\054\001\002\000\004\024" +
    "\u011b\001\002\000\004\025\u011c\001\002\000\004\026\u011d" +
    "\001\002\000\036\007\uff67\010\uff67\012\uff67\013\uff67\014" +
    "\uff67\022\uff67\023\uff67\026\uff67\033\uff67\034\uff67\047\uff67" +
    "\050\uff67\051\uff67\053\uff67\001\002\000\004\025\u012f\001" +
    "\002\000\006\003\u0121\025\u0120\001\002\000\006\026\u012a" +
    "\033\u0124\001\002\000\006\026\u0122\033\u0124\001\002\000" +
    "\014\006\uffd3\026\uffd3\036\026\041\uffd3\042\uffd3\001\002" +
    "\000\004\026\u0127\001\002\000\006\026\uffd1\044\u0125\001" +
    "\002\000\004\033\u0124\001\002\000\004\026\uffd2\001\002" +
    "\000\014\006\uffd4\026\uffd4\036\026\041\uffd4\042\uffd4\001" +
    "\002\000\012\006\uffd8\026\uffd8\041\uffd8\042\uffd8\001\002" +
    "\000\012\006\uffd7\026\uffd7\041\uffd7\042\uffd7\001\002\000" +
    "\014\006\uffdb\026\uffdb\036\026\041\uffdb\042\uffdb\001\002" +
    "\000\004\026\u012c\001\002\000\014\006\uffdc\026\uffdc\036" +
    "\026\041\uffdc\042\uffdc\001\002\000\012\006\uffde\026\uffde" +
    "\041\uffde\042\uffde\001\002\000\012\006\uffdd\026\uffdd\041" +
    "\uffdd\042\uffdd\001\002\000\006\026\u0130\033\u0124\001\002" +
    "\000\014\006\uffd5\026\uffd5\036\026\041\uffd5\042\uffd5\001" +
    "\002\000\004\026\u0132\001\002\000\014\006\uffd6\026\uffd6" +
    "\036\026\041\uffd6\042\uffd6\001\002\000\012\006\uffda\026" +
    "\uffda\041\uffda\042\uffda\001\002\000\012\006\uffd9\026\uffd9" +
    "\041\uffd9\042\uffd9\001\002\000\006\002\uffe5\035\015\001" +
    "\002\000\006\026\u013a\042\021\001\002\000\004\026\u0138" +
    "\001\002\000\006\002\uffe3\035\015\001\002\000\004\002" +
    "\ufff3\001\002\000\006\002\uffe4\035\015\001\002\000\004" +
    "\026\u013c\001\002\000\006\002\uffe2\035\015\001\002\000" +
    "\004\002\ufff2\001\002\000\004\002\ufff4\001\002\000\004" +
    "\002\ufff5\001\002\000\004\033\u0158\001\002\000\004\030" +
    "\u014a\001\002\000\006\016\u0145\032\u0144\001\002\000\004" +
    "\032\u0148\001\002\000\040\006\024\007\uffc7\010\uffc7\012" +
    "\uffc7\013\uffc7\014\uffc7\022\uffc7\023\uffc7\026\uffc7\033\uffc7" +
    "\034\uffc7\041\uffc7\042\uffc7\047\uffc7\053\uffc7\001\002\000" +
    "\016\007\061\022\052\023\045\033\101\034\047\047\054" +
    "\001\002\000\004\032\uffc0\001\002\000\036\007\uffcf\010" +
    "\uffcf\012\uffcf\013\uffcf\014\uffcf\022\uffcf\023\uffcf\026\uffcf" +
    "\033\uffcf\034\uffcf\041\uffcf\042\uffcf\047\uffcf\053\uffcf\001" +
    "\002\000\040\006\024\007\uffc3\010\uffc3\012\uffc3\013\uffc3" +
    "\014\uffc3\022\uffc3\023\uffc3\026\uffc3\033\uffc3\034\uffc3\041" +
    "\uffc3\042\uffc3\047\uffc3\053\uffc3\001\002\000\036\007\uffcb" +
    "\010\uffcb\012\uffcb\013\uffcb\014\uffcb\022\uffcb\023\uffcb\026" +
    "\uffcb\033\uffcb\034\uffcb\041\uffcb\042\uffcb\047\uffcb\053\uffcb" +
    "\001\002\000\006\033\u014c\056\u014b\001\002\000\004\033" +
    "\u0152\001\002\000\006\016\u0145\032\u014e\001\002\000\004" +
    "\032\u0150\001\002\000\040\006\024\007\uffc5\010\uffc5\012" +
    "\uffc5\013\uffc5\014\uffc5\022\uffc5\023\uffc5\026\uffc5\033\uffc5" +
    "\034\uffc5\041\uffc5\042\uffc5\047\uffc5\053\uffc5\001\002\000" +
    "\036\007\uffcd\010\uffcd\012\uffcd\013\uffcd\014\uffcd\022\uffcd" +
    "\023\uffcd\026\uffcd\033\uffcd\034\uffcd\041\uffcd\042\uffcd\047" +
    "\uffcd\053\uffcd\001\002\000\040\006\024\007\uffc1\010\uffc1" +
    "\012\uffc1\013\uffc1\014\uffc1\022\uffc1\023\uffc1\026\uffc1\033" +
    "\uffc1\034\uffc1\041\uffc1\042\uffc1\047\uffc1\053\uffc1\001\002" +
    "\000\036\007\uffc9\010\uffc9\012\uffc9\013\uffc9\014\uffc9\022" +
    "\uffc9\023\uffc9\026\uffc9\033\uffc9\034\uffc9\041\uffc9\042\uffc9" +
    "\047\uffc9\053\uffc9\001\002\000\006\016\u0145\032\u0154\001" +
    "\002\000\004\032\u0156\001\002\000\040\006\024\007\uffc6" +
    "\010\uffc6\012\uffc6\013\uffc6\014\uffc6\022\uffc6\023\uffc6\026" +
    "\uffc6\033\uffc6\034\uffc6\041\uffc6\042\uffc6\047\uffc6\053\uffc6" +
    "\001\002\000\036\007\uffce\010\uffce\012\uffce\013\uffce\014" +
    "\uffce\022\uffce\023\uffce\026\uffce\033\uffce\034\uffce\041\uffce" +
    "\042\uffce\047\uffce\053\uffce\001\002\000\040\006\024\007" +
    "\uffc2\010\uffc2\012\uffc2\013\uffc2\014\uffc2\022\uffc2\023\uffc2" +
    "\026\uffc2\033\uffc2\034\uffc2\041\uffc2\042\uffc2\047\uffc2\053" +
    "\uffc2\001\002\000\036\007\uffca\010\uffca\012\uffca\013\uffca" +
    "\014\uffca\022\uffca\023\uffca\026\uffca\033\uffca\034\uffca\041" +
    "\uffca\042\uffca\047\uffca\053\uffca\001\002\000\006\016\u0145" +
    "\032\u015a\001\002\000\004\032\u015c\001\002\000\040\006" +
    "\024\007\uffc8\010\uffc8\012\uffc8\013\uffc8\014\uffc8\022\uffc8" +
    "\023\uffc8\026\uffc8\033\uffc8\034\uffc8\041\uffc8\042\uffc8\047" +
    "\uffc8\053\uffc8\001\002\000\036\007\uffd0\010\uffd0\012\uffd0" +
    "\013\uffd0\014\uffd0\022\uffd0\023\uffd0\026\uffd0\033\uffd0\034" +
    "\uffd0\041\uffd0\042\uffd0\047\uffd0\053\uffd0\001\002\000\040" +
    "\006\024\007\uffc4\010\uffc4\012\uffc4\013\uffc4\014\uffc4\022" +
    "\uffc4\023\uffc4\026\uffc4\033\uffc4\034\uffc4\041\uffc4\042\uffc4" +
    "\047\uffc4\053\uffc4\001\002\000\036\007\uffcc\010\uffcc\012" +
    "\uffcc\013\uffcc\014\uffcc\022\uffcc\023\uffcc\026\uffcc\033\uffcc" +
    "\034\uffcc\041\uffcc\042\uffcc\047\uffcc\053\uffcc\001\002\000" +
    "\006\002\uffed\035\015\001\002\000\006\026\u016f\042\021" +
    "\001\002\000\004\026\u016d\001\002\000\010\026\u0162\041" +
    "\030\042\021\001\002\000\006\002\uffec\035\015\001\002" +
    "\000\006\026\u0167\042\021\001\002\000\004\026\u0165\001" +
    "\002\000\006\002\uffe8\035\015\001\002\000\004\002\ufff8" +
    "\001\002\000\006\002\uffe9\035\015\001\002\000\004\026" +
    "\u0169\001\002\000\006\002\uffe6\035\015\001\002\000\004" +
    "\002\ufff6\001\002\000\004\002\ufff9\001\002\000\004\002" +
    "\ufffc\001\002\000\006\002\uffea\035\015\001\002\000\004" +
    "\002\ufffa\001\002\000\006\002\uffeb\035\015\001\002\000" +
    "\004\026\u0171\001\002\000\006\002\uffe7\035\015\001\002" +
    "\000\004\002\ufff7\001\002\000\004\002\ufffb\001\002\000" +
    "\004\002\ufffd\001\002\000\006\002\uffe1\035\015\001\002" +
    "\000\004\026\u0177\001\002\000\006\002\uffe0\035\015\001" +
    "\002\000\004\002\ufff0\001\002\000\004\002\ufff1\001\002" +
    "\000\004\023\u017b\001\002\000\004\006\u017d\001\002\000" +
    "\004\024\u0181\001\002\000\004\033\u017e\001\002\000\006" +
    "\024\uffb0\044\u017f\001\002\000\004\006\u017d\001\002\000" +
    "\004\024\uffb1\001\002\000\012\025\uffbd\043\u0185\054\u0184" +
    "\056\u0183\001\002\000\004\025\uffbb\001\002\000\012\025" +
    "\uffac\043\u0185\054\uffac\056\u0183\001\002\000\004\023\u0189" +
    "\001\002\000\012\025\uffad\043\u0185\054\uffad\056\u0183\001" +
    "\002\000\006\025\uffbc\054\u0184\001\002\000\004\025\uffba" +
    "\001\002\000\006\025\uffaf\054\uffaf\001\002\000\004\006" +
    "\u018a\001\002\000\004\033\u018b\001\002\000\004\024\u018c" +
    "\001\002\000\004\025\uffb2\001\002\000\006\025\uffae\054" +
    "\uffae\001\002\000\004\032\u018f\001\002\000\004\035\015" +
    "\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u018e\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\020\022\021\024\023" +
    "\021\024\031\030\026\001\001\000\002\001\001\000\006" +
    "\024\u0175\030\026\001\001\000\012\021\u0160\023\u015e\024" +
    "\u015f\030\026\001\001\000\002\001\001\000\010\023\u0135" +
    "\024\u0136\030\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\034\001\001\000\002" +
    "\001\001\000\004\003\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\037\001\001" +
    "\000\002\001\001\000\004\023\041\001\001\000\002\001" +
    "\001\000\034\004\045\006\054\007\056\012\047\013\061" +
    "\014\071\021\057\027\050\031\062\033\055\035\072\036" +
    "\067\037\066\001\001\000\002\001\001\000\014\004\045" +
    "\015\360\033\055\035\102\037\101\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\004\045\006\054\007\056\012\047\013\061\014\071\027" +
    "\305\031\062\033\055\035\072\036\067\037\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\004\045\006" +
    "\054\007\056\012\047\013\061\014\071\027\300\031\062" +
    "\033\055\035\072\036\067\037\066\001\001\000\002\001" +
    "\001\000\012\004\045\033\055\035\217\037\101\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\004\045\006" +
    "\054\007\056\012\047\013\061\014\071\027\173\031\062" +
    "\033\055\035\072\036\067\037\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\004\045" +
    "\006\054\007\056\012\047\013\061\014\071\027\074\031" +
    "\062\033\055\035\072\036\067\037\066\001\001\000\002" +
    "\001\001\000\014\004\045\015\076\033\055\035\102\037" +
    "\101\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\004" +
    "\045\033\055\035\104\037\101\001\001\000\002\001\001" +
    "\000\012\004\045\033\055\035\110\037\101\001\001\000" +
    "\012\004\045\033\055\035\107\037\101\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\045\033\055\034" +
    "\130\035\121\037\101\001\001\000\012\004\045\033\055" +
    "\035\126\037\101\001\001\000\012\004\045\033\055\035" +
    "\125\037\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\004\045\033\055\034\120\035\121\037\101\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\004\045\033\055\034\123\035\121\037\101\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\004\045\033\055\035\135\037\101" +
    "\001\001\000\012\004\045\033\055\035\134\037\101\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\004\045\006\144\007\146\012\141\013\147\014" +
    "\152\016\142\031\150\033\055\035\153\037\066\040\145" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\004" +
    "\045\006\144\007\146\012\141\013\147\014\152\016\142" +
    "\031\150\033\055\035\153\037\066\040\171\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\004\045\006\144\007" +
    "\146\012\141\013\147\014\152\016\142\031\150\033\055" +
    "\035\153\037\066\040\160\001\001\000\012\004\045\033" +
    "\055\035\156\037\101\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\004\045\006\144\007\146\012\141\013" +
    "\147\014\152\016\142\031\150\033\055\035\153\037\066" +
    "\040\155\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\004\045\015\164\033\055\035\102\037" +
    "\101\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\004\045" +
    "\033\055\035\175\037\101\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\004\045\006\144\007\146\012\141" +
    "\013\147\014\152\016\142\031\150\033\055\035\153\037" +
    "\066\040\200\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\004\045\015\204\033\055\035" +
    "\102\037\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\004\045\015\214" +
    "\033\055\035\102\037\101\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\024\222\030\026\001\001\000\002\001" +
    "\001\000\014\004\045\015\224\033\055\035\102\037\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\004" +
    "\045\006\144\007\146\012\141\013\147\014\152\016\142" +
    "\031\150\033\055\035\153\037\066\040\227\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\004\045\015\234\033\055\035\102\037" +
    "\101\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\004\045\006\144\007" +
    "\146\012\141\013\147\014\152\016\142\031\150\033\055" +
    "\035\153\037\066\040\241\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\004\045\015\245" +
    "\033\055\035\102\037\101\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\004\045\006\144\007\146\012\141" +
    "\013\147\014\152\016\142\031\150\033\055\035\153\037" +
    "\066\040\250\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\004\045\015\257\033\055\035\102" +
    "\037\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\004\045\006\144\007\146\012\141\013\147\014\152\016" +
    "\142\031\150\033\055\035\153\037\066\040\265\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\004\045\015\271\033\055\035\102\037\101\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\045\033\055\035" +
    "\304\037\101\001\001\000\012\004\045\033\055\035\303" +
    "\037\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\004\045\033\055\035\307\037\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\024" +
    "\312\030\026\001\001\000\002\001\001\000\012\004\045" +
    "\033\055\035\314\037\101\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\024\317\030\026\001\001\000\002" +
    "\001\001\000\012\004\045\033\055\035\323\037\101\001" +
    "\001\000\012\004\045\033\055\035\322\037\101\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\004\045\033\055\034\330\035\121" +
    "\037\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\004\045\033\055\035\333\037\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\004" +
    "\045\033\055\035\336\037\101\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\024\341\030\342\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\004\045\006\054" +
    "\007\056\012\047\013\061\014\071\021\057\027\050\031" +
    "\062\033\055\035\072\036\067\037\066\001\001\000\012" +
    "\004\045\033\055\035\345\037\101\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\024\222\030\026\001\001" +
    "\000\012\004\045\033\055\035\353\037\101\001\001\000" +
    "\012\004\045\033\055\035\352\037\101\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\045\033\055\035" +
    "\357\037\101\001\001\000\012\004\045\033\055\035\356" +
    "\037\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\004\045\033\055" +
    "\035\363\037\101\001\001\000\002\001\001\000\012\004" +
    "\045\033\055\035\365\037\101\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\017\370\032\372\037\373\001" +
    "\001\000\002\001\001\000\012\004\045\033\055\035\u010f" +
    "\037\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\004\045\033\055" +
    "\035\377\037\101\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\004\045\033\055\035\u0103" +
    "\037\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\004\045\033\055\035\u0106\037\101\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\045\033\055\035" +
    "\u010a\037\101\001\001\000\012\004\045\033\055\035\u010d" +
    "\037\101\001\001\000\002\001\001\000\012\004\045\033" +
    "\055\035\u010c\037\101\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\004\045\033\055\035\u0112\037\101\001" +
    "\001\000\002\001\001\000\012\004\045\033\055\035\u0111" +
    "\037\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\004\045\006\144\007\146\012\141" +
    "\013\147\014\152\016\142\031\150\033\055\035\153\037" +
    "\066\040\u0115\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\017\u0119\032\372\037\373\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\u012a\001\001\000\004\010\u0122\001\001\000\004" +
    "\020\u0128\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\u0125\001\001\000\002\001\001\000\004\020\u0127" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\u012d\001\001\000\002\001\001\000\004\020\u012c\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\u0130\001" +
    "\001\000\004\020\u0133\001\001\000\002\001\001\000\004" +
    "\020\u0132\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\u013e\001\001\000\006\024\u013a\030\026\001\001" +
    "\000\002\001\001\000\004\003\u0138\001\001\000\002\001" +
    "\001\000\004\003\u013d\001\001\000\002\001\001\000\004" +
    "\003\u013c\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\u0142\001\001\000\002\001\001\000\004\021\u0146\001" +
    "\001\000\012\004\045\033\055\035\u0145\037\101\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\u0148\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\u014c\001\001\000\002\001\001\000\004\021" +
    "\u014e\001\001\000\002\001\001\000\004\021\u0150\001\001" +
    "\000\002\001\001\000\004\022\u0152\001\001\000\002\001" +
    "\001\000\004\021\u0154\001\001\000\002\001\001\000\004" +
    "\021\u0156\001\001\000\002\001\001\000\004\022\u0158\001" +
    "\001\000\002\001\001\000\004\021\u015a\001\001\000\002" +
    "\001\001\000\004\021\u015c\001\001\000\002\001\001\000" +
    "\004\003\u0173\001\001\000\006\024\u016f\030\026\001\001" +
    "\000\002\001\001\000\010\023\u0162\024\u0163\030\026\001" +
    "\001\000\004\003\u016b\001\001\000\006\024\u0167\030\026" +
    "\001\001\000\002\001\001\000\004\003\u0165\001\001\000" +
    "\002\001\001\000\004\003\u016a\001\001\000\002\001\001" +
    "\000\004\003\u0169\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\u016d\001\001\000\002" +
    "\001\001\000\004\003\u0172\001\001\000\002\001\001\000" +
    "\004\003\u0171\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\u0178\001\001\000\002\001" +
    "\001\000\004\003\u0177\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\u017b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\u017f\001\001\000\002\001\001\000\006\025\u0185\026" +
    "\u0181\001\001\000\002\001\001\000\004\025\u018c\001\001" +
    "\000\002\001\001\000\004\025\u0187\001\001\000\004\026" +
    "\u0186\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\u018f" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public ArrayList<Symbol> errores = new ArrayList<>();
  public ArrayList<String> erroresStr = new ArrayList<>();
  
  public void syntax_error(Symbol s) {
    System.out.println("ERROR CON: " + s.value);
    String cadena = "";

    for (int i = 0; i < this.stack.size(); i++) {
      Symbol sp = this.stack.get(i);
      //System.out.println(sp.value+" "+Integer.toString(sp.sym));      
    }
    for (int i = this.stack.size() - 1; i > 0; i--) {
      Symbol sp = this.stack.get(i);
      System.out.println(sp.value+" "+Integer.toString(sp.sym));
      cadena = sp.value + " " + cadena;
      if ("enum".equals(sp.value)) {
        System.out.println("Soy un error de enum xd");
        cadena += "~" + s.value + "~ ...";
        //if (this.lookahead != null) for (Symbol x : this.lookahead) System.out.println(x.value);
        Symbol sp2 = new Symbol(sp.sym, sp.left, sp.right, cadena);
        errores.add(sp2);
        erroresStr.add("Enum");
        break;
      }
        }
  }

  @Override
  public int error_sync_size() {
    return 2;
  }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // SENTENCIA_FOR ::= P_coma P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // SENTENCIA_FOR ::= ASIGNACION_COMPLEJA P_coma P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // SENTENCIA_FOR ::= P_coma EXPRESION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // SENTENCIA_FOR ::= P_coma P_coma EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // SENTENCIA_FOR ::= ASIGNACION_COMPLEJA P_coma EXPRESION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // SENTENCIA_FOR ::= ASIGNACION_COMPLEJA P_coma P_coma EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // SENTENCIA_FOR ::= P_coma EXPRESION P_coma EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // SENTENCIA_FOR ::= ASIGNACION_COMPLEJA P_coma EXPRESION P_coma EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a CUERPO_EC Llave_c For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // DO_WHILE ::= Do Llave_a CUERPO_EC Llave_c While Parentesis_a EXPRESION_BOOLEANA Parentesis_c P_coma Do Llave_a Llave_c While Parentesis_a EXPRESION_BOOLEANA Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // WHILE ::= While Parentesis_a EXPRESION_BOOLEANA Parentesis_c Llave_a CUERPO_EC Llave_c While Parentesis_a EXPRESION_BOOLEANA Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // IF_ELSE ::= If Parentesis_a EXPRESION_BOOLEANA Parentesis_c Llave_a CUERPO_EC Llave_c Else Llave_a CUERPO_EC Llave_c If Parentesis_a EXPRESION_BOOLEANA Parentesis_c Llave_a CUERPO_EC Llave_c Else Llave_a Llave_c If Parentesis_a EXPRESION_BOOLEANA Parentesis_c Llave_a Llave_c Else Llave_a CUERPO_EC Llave_c If Parentesis_a EXPRESION_BOOLEANA Parentesis_c Llave_a Llave_c Else Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-39)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // EXPRESION_BOOLEANA ::= EXPRESION Op_relacional EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEANA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // EXPRESION_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEANA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // IF ::= If Parentesis_a EXPRESION_BOOLEANA Parentesis_c Llave_a CUERPO_EC Llave_c If Parentesis_a EXPRESION_BOOLEANA Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // OP_TERNARIO ::= Parentesis_a EXPRESION_BOOLEANA Parentesis_c Pregunta EXPRESION Dos_Puntos EXPRESION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_TERNARIO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // CUERPO_EC ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO_EC",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // CUERPO_EC ::= EXPRESION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO_EC",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // CUERPO_EC ::= ASIGNACION_BASICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO_EC",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // CUERPO_EC ::= SENTENCIA CUERPO_EC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO_EC",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // CUERPO_EC ::= EXPRESION P_coma CUERPO_EC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO_EC",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // CUERPO_EC ::= ASIGNACION_BASICA CUERPO_EC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO_EC",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // SENTENCIA ::= Return EXPRESION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // SENTENCIA ::= Continue P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // SENTENCIA ::= Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ESTRUCTURA_CONTROL ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CONTROL",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ESTRUCTURA_CONTROL ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CONTROL",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ESTRUCTURA_CONTROL ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CONTROL",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ESTRUCTURA_CONTROL ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CONTROL",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ESTRUCTURA_CONTROL ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CONTROL",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // EXPRESION ::= IDENTIFICADOR_CUERPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // EXPRESION ::= LLAMADA_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // EXPRESION ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // EXPRESION ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // EXPRESION ::= Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // EXPRESION ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // EXPRESION ::= OP_TERNARIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // EXPRESION ::= OP_TERNARIO Op_logico EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // EXPRESION ::= IDENTIFICADOR_CUERPO Op_logico EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // EXPRESION ::= LLAMADA_FUNCION Op_logico EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXPRESION ::= Identificador Op_logico EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EXPRESION ::= Op_booleano Op_logico EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXPRESION ::= Cadena Op_logico EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXPRESION ::= Numero Op_logico EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXPRESION ::= OP_TERNARIO Op_Aritmetico EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXPRESION ::= IDENTIFICADOR_CUERPO Op_Aritmetico EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXPRESION ::= LLAMADA_FUNCION Op_Aritmetico EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXPRESION ::= Identificador Op_Aritmetico EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXPRESION ::= Op_booleano Op_Aritmetico EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXPRESION ::= Cadena Op_Aritmetico EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXPRESION ::= Numero Op_Aritmetico EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ARGUMENTOS ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ARGUMENTOS ::= EXPRESION Coma ARGUMENTOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // LLAMADA_FUNCION ::= Identificador Parentesis_a Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // LLAMADA_FUNCION ::= Identificador Parentesis_a ARGUMENTOS Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ASIGNACION_COMPLEJA ::= Identificador Igual EXPRESION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION_COMPLEJA",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ASIGNACION_COMPLEJA ::= T_dato Identificador Igual EXPRESION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION_COMPLEJA",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ASIGNACION_COMPLEJA ::= IDENTIFICADOR_CUERPO Igual EXPRESION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION_COMPLEJA",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ASIGNACION_BASICA ::= Identificador Igual EXPRESION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION_BASICA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ASIGNACION_BASICA ::= IDENTIFICADOR_CUERPO Igual EXPRESION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION_BASICA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // IDENTIFICADOR_CUERPO ::= Identificador Punto Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_CUERPO",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // IDENTIFICADOR_CUERPO ::= Identificador Punto Identificador Parentesis_a Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_CUERPO",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // IDENTIFICADOR_CUERPO ::= Identificador Punto Identificador Parentesis_a ARGUMENTOS Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_CUERPO",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // IDENTIFICADOR_CUERPO ::= This Punto Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_CUERPO",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // IDENTIFICADOR_CUERPO ::= This Punto Identificador Parentesis_a ARGUMENTOS Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_CUERPO",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // IDENTIFICADOR_CUERPO ::= This Punto Identificador Parentesis_a Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_CUERPO",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CUERPO ::= ESTRUCTURA_CONTROL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CUERPO ::= EXPRESION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CUERPO ::= ASIGNACION_BASICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CUERPO ::= ESTRUCTURA_CONTROL CUERPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CUERPO ::= EXPRESION P_coma CUERPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CUERPO ::= ASIGNACION_BASICA CUERPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // MODIFICADORES ::= Visibilidad 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // MODIFICADORES ::= Modificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // MODIFICADORES ::= Visibilidad MODIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // MODIFICADORES ::= Modificador MODIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // PARAMETROS ::= T_dato Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // PARAMETROS ::= T_dato Identificador Coma PARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // RETURNS ::= Returns Parentesis_a T_dato Identificador Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURNS",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // FUNCION ::= FUNCION_HEADER Llave_a CUERPO Return EXPRESION P_coma Llave_c FUNCION_HEADER Llave_a Return EXPRESION P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // FUNCION ::= FUNCION_HEADER Llave_a VARIABLES CUERPO Return EXPRESION P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // FUNCION ::= FUNCION_HEADER Llave_a VARIABLES Return EXPRESION P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // FUNCION ::= FUNCION_HEADER Llave_a Return EXPRESION P_coma Llave_c FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // FUNCION ::= FUNCION_HEADER Llave_a CUERPO Return EXPRESION P_coma Llave_c FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // FUNCION ::= FUNCION_HEADER Llave_a VARIABLES CUERPO Return EXPRESION P_coma Llave_c FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // FUNCION ::= FUNCION_HEADER Llave_a VARIABLES Return EXPRESION P_coma Llave_c FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // FUNCION_HEADER ::= Function Identificador Parentesis_a PARAMETROS Parentesis_c MODIFICADORES RETURNS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_HEADER",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FUNCION_HEADER ::= Function Identificador Parentesis_a PARAMETROS Parentesis_c RETURNS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_HEADER",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FUNCION_HEADER ::= Function Identificador Parentesis_a PARAMETROS Parentesis_c MODIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_HEADER",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FUNCION_HEADER ::= Function Identificador Parentesis_a PARAMETROS Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_HEADER",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ESTRUCTURA ::= Struct Identificador Llave_a VARIABLES Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ESTRUCTURA ::= Struct Identificador Llave_a VARIABLES Llave_c ESTRUCTURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ASIGNACION ::= Igual EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VARIABLES ::= T_dato Corchete_a Corchete_c Identificador ASIGNACION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // VARIABLES ::= T_dato Corchete_a Corchete_c Visibilidad Identificador ASIGNACION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // VARIABLES ::= T_dato Identificador ASIGNACION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // VARIABLES ::= T_dato Visibilidad Identificador ASIGNACION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // VARIABLES ::= T_dato Corchete_a Corchete_c Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // VARIABLES ::= T_dato Corchete_a Corchete_c Visibilidad Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // VARIABLES ::= T_dato Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // VARIABLES ::= T_dato Visibilidad Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // VARIABLES ::= T_dato Corchete_a Corchete_c Identificador ASIGNACION P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // VARIABLES ::= T_dato Corchete_a Corchete_c Visibilidad Identificador ASIGNACION P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // VARIABLES ::= T_dato Identificador ASIGNACION P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // VARIABLES ::= T_dato Visibilidad Identificador ASIGNACION P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VARIABLES ::= T_dato Corchete_a Corchete_c Identificador P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VARIABLES ::= T_dato Corchete_a Corchete_c Visibilidad Identificador P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // VARIABLES ::= T_dato Identificador P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VARIABLES ::= T_dato Visibilidad Identificador P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LISTA ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LISTA ::= Identificador Coma LISTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ENUMERADOR ::= Enum Identificador error Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ENUMERADOR ::= Enum Identificador error LISTA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ENUMERADOR ::= Enum error Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ENUMERADOR ::= Enum error Llave_a LISTA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ENUMERADOR ::= Enum Identificador error Llave_c ENUMERADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ENUMERADOR ::= Enum Identificador error LISTA Llave_c ENUMERADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ENUMERADOR ::= Enum error Llave_a Llave_c ENUMERADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ENUMERADOR ::= Enum error Llave_a LISTA Llave_c ENUMERADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ENUMERADOR ::= Enum Identificador Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ENUMERADOR ::= Enum Identificador Llave_a LISTA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ENUMERADOR ::= Enum Identificador Llave_a Llave_c ENUMERADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ENUMERADOR ::= Enum Identificador Llave_a LISTA Llave_c ENUMERADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONTRATO ::= Contract Identificador Llave_a FUNCION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONTRATO ::= Contract Identificador Llave_a ESTRUCTURA FUNCION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONTRATO ::= Contract Identificador Llave_a ESTRUCTURA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONTRATO ::= Contract Identificador Llave_a VARIABLES ESTRUCTURA FUNCION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONTRATO ::= Contract Identificador Llave_a VARIABLES FUNCION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CONTRATO ::= Contract Identificador Llave_a VARIABLES ESTRUCTURA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CONTRATO ::= Contract Identificador Llave_a VARIABLES Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR VARIABLES ESTRUCTURA FUNCION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR ESTRUCTURA FUNCION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR VARIABLES FUNCION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR VARIABLES ESTRUCTURA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR FUNCION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR ESTRUCTURA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR VARIABLES Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CONTRATO ::= Contract Identificador Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CONTRATO ::= Contract Identificador Llave_a FUNCION Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CONTRATO ::= Contract Identificador Llave_a ESTRUCTURA FUNCION Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CONTRATO ::= Contract Identificador Llave_a ESTRUCTURA Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONTRATO ::= Contract Identificador Llave_a VARIABLES ESTRUCTURA FUNCION Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CONTRATO ::= Contract Identificador Llave_a VARIABLES FUNCION Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CONTRATO ::= Contract Identificador Llave_a VARIABLES ESTRUCTURA Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CONTRATO ::= Contract Identificador Llave_a VARIABLES Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR VARIABLES ESTRUCTURA FUNCION Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR ESTRUCTURA FUNCION Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR VARIABLES FUNCION Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR VARIABLES ESTRUCTURA Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR FUNCION Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR ESTRUCTURA Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR VARIABLES Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CONTRATO ::= Contract Identificador Llave_a Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Pragma Solidity Caret Numero Numero P_coma CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Pragma Solidity Numero Numero P_coma CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

