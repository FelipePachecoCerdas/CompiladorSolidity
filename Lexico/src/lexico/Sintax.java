
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jul 23 20:40:36 CST 2020
//----------------------------------------------------

package lexico;

import java_cup.runtime.Symbol;
import java.util.Stack;
import java.util.ArrayList;
import java.util.Iterator;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jul 23 20:40:36 CST 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\321\000\002\002\004\000\002\002\010\000\002\002" +
    "\011\000\002\003\007\000\002\003\010\000\002\003\011" +
    "\000\002\003\011\000\002\003\011\000\002\003\012\000" +
    "\002\003\012\000\002\003\012\000\002\003\013\000\002" +
    "\003\010\000\002\003\011\000\002\003\011\000\002\003" +
    "\012\000\002\003\010\000\002\003\011\000\002\003\010" +
    "\000\002\003\006\000\002\003\007\000\002\003\010\000" +
    "\002\003\010\000\002\003\010\000\002\003\011\000\002" +
    "\003\011\000\002\003\011\000\002\003\012\000\002\003" +
    "\007\000\002\003\010\000\002\003\010\000\002\003\011" +
    "\000\002\003\007\000\002\003\010\000\002\003\007\000" +
    "\002\022\010\000\002\022\007\000\002\022\007\000\002" +
    "\022\006\000\002\022\010\000\002\022\007\000\002\022" +
    "\010\000\002\022\007\000\002\022\007\000\002\022\006" +
    "\000\002\022\007\000\002\022\006\000\002\010\005\000" +
    "\002\010\003\000\002\023\007\000\002\023\006\000\002" +
    "\023\011\000\002\023\010\000\002\023\010\000\002\023" +
    "\007\000\002\023\012\000\002\023\011\000\002\023\006" +
    "\000\002\023\005\000\002\023\010\000\002\023\007\000" +
    "\002\023\007\000\002\023\006\000\002\023\011\000\002" +
    "\023\010\000\002\023\007\000\002\023\006\000\002\023" +
    "\011\000\002\023\010\000\002\023\010\000\002\023\007" +
    "\000\002\023\012\000\002\023\011\000\002\023\006\000" +
    "\002\023\005\000\002\023\010\000\002\023\007\000\002" +
    "\023\007\000\002\023\006\000\002\023\011\000\002\023" +
    "\017\000\002\023\010\000\002\023\012\000\002\023\011" +
    "\000\002\023\010\000\002\023\007\000\002\023\011\000" +
    "\002\023\010\000\002\023\011\000\002\023\010\000\002" +
    "\023\012\000\002\023\011\000\002\023\010\000\002\023" +
    "\007\000\002\023\011\000\002\023\010\000\002\024\004" +
    "\000\002\025\010\000\002\025\007\000\002\025\010\000" +
    "\002\025\010\000\002\025\007\000\002\025\007\000\002" +
    "\033\007\000\002\033\010\000\002\033\010\000\002\033" +
    "\011\000\002\033\007\000\002\033\010\000\002\033\010" +
    "\000\002\033\011\000\002\033\007\000\002\033\010\000" +
    "\002\033\010\000\002\033\011\000\002\033\007\000\002" +
    "\033\010\000\002\033\010\000\002\033\011\000\002\027" +
    "\012\000\002\027\013\000\002\027\012\000\002\027\011" +
    "\000\002\027\011\000\002\027\012\000\002\027\011\000" +
    "\002\027\010\000\002\031\007\000\002\031\007\000\002" +
    "\031\007\000\002\011\006\000\002\011\004\000\002\011" +
    "\006\000\002\011\004\000\002\030\004\000\002\030\004" +
    "\000\002\030\003\000\002\030\003\000\002\032\005\000" +
    "\002\032\004\000\002\032\004\000\002\032\003\000\002" +
    "\026\005\000\002\026\006\000\002\026\003\000\002\026" +
    "\005\000\002\026\006\000\002\026\003\000\002\041\005" +
    "\000\002\041\003\000\002\034\005\000\002\035\005\000" +
    "\002\035\006\000\002\044\003\000\002\044\003\000\002" +
    "\036\005\000\002\036\003\000\002\045\003\000\002\045" +
    "\003\000\002\045\003\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\043\005\000\002\043\004\000" +
    "\002\043\005\000\002\043\005\000\002\043\005\000\002" +
    "\043\005\000\002\043\003\000\002\043\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\040\003\000\002" +
    "\040\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\004" +
    "\000\002\020\004\000\002\020\005\000\002\042\005\000" +
    "\002\042\004\000\002\042\004\000\002\042\003\000\002" +
    "\004\011\000\002\006\011\000\002\006\010\000\002\017" +
    "\003\000\002\007\015\000\002\007\014\000\002\007\014" +
    "\000\002\007\013\000\002\014\011\000\002\014\010\000" +
    "\002\015\013\000\002\015\012\000\002\016\011\000\002" +
    "\016\010\000\002\021\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0193\000\004\042\004\001\002\000\004\043\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\006\037\010\050\011\001\002\000\004\037\u0193\001" +
    "\002\000\004\037\012\001\002\000\004\037\013\001\002" +
    "\000\004\032\014\001\002\000\004\040\015\001\002\000" +
    "\004\033\017\001\002\000\004\002\uffff\001\002\000\004" +
    "\025\020\001\002\000\014\006\024\026\031\041\026\044" +
    "\030\045\021\001\002\000\006\003\u0165\033\u0166\001\002" +
    "\000\006\026\u0160\045\021\001\002\000\012\006\024\026" +
    "\u0149\044\030\045\021\001\002\000\012\003\362\027\363" +
    "\033\364\061\361\001\002\000\010\026\346\044\030\045" +
    "\021\001\002\000\006\003\317\033\320\001\002\000\004" +
    "\025\054\001\002\000\006\003\036\033\037\001\002\000" +
    "\006\002\uffee\040\015\001\002\000\004\026\033\001\002" +
    "\000\006\002\uffdf\040\015\001\002\000\004\002\uffef\001" +
    "\002\000\004\002\ufffe\001\002\000\004\025\050\001\002" +
    "\000\006\003\041\025\040\001\002\000\004\006\024\001" +
    "\002\000\004\006\024\001\002\000\004\026\043\001\002" +
    "\000\010\026\uff9b\044\030\045\uff9b\001\002\000\006\026" +
    "\uff9d\045\uff9d\001\002\000\004\026\046\001\002\000\010" +
    "\026\uff9f\044\030\045\uff9f\001\002\000\006\026\uffa0\045" +
    "\uffa0\001\002\000\004\006\024\001\002\000\004\026\052" +
    "\001\002\000\010\026\uff9c\044\030\045\uff9c\001\002\000" +
    "\006\026\uff9e\045\uff9e\001\002\000\040\006\024\010\100" +
    "\012\103\013\107\014\056\022\065\023\057\033\066\034" +
    "\062\035\102\036\073\037\061\052\067\055\111\056\101" +
    "\001\002\000\030\015\uff6c\016\uff6c\017\uff6c\021\uff6c\024" +
    "\uff6c\032\uff6c\034\uff6c\035\uff6c\047\uff6c\051\315\060\uff6c" +
    "\001\002\000\004\023\272\001\002\000\024\022\065\023" +
    "\057\033\066\034\062\035\102\036\073\037\061\052\067" +
    "\055\111\001\002\000\012\015\uff5f\024\uff5f\032\uff5f\047" +
    "\uff5f\001\002\000\022\015\uff64\017\uff64\024\uff64\032\uff64" +
    "\034\uff64\035\uff64\047\uff64\060\uff64\001\002\000\024\022" +
    "\uff53\023\uff53\033\uff53\034\uff53\035\uff53\036\uff53\037\uff53" +
    "\052\uff53\055\uff53\001\002\000\036\010\uff4e\012\uff4e\013" +
    "\uff4e\014\uff4e\022\uff4e\023\uff4e\033\uff4e\034\uff4e\035\uff4e" +
    "\036\uff4e\037\uff4e\052\uff4e\055\uff4e\056\uff4e\001\002\000" +
    "\004\056\257\001\002\000\022\015\uff62\017\uff62\024\uff62" +
    "\032\uff62\034\uff62\035\uff62\047\uff62\060\uff62\001\002\000" +
    "\032\015\uff6e\016\uff6e\017\uff6e\021\uff6e\023\253\024\uff6e" +
    "\032\uff6e\034\uff6e\035\uff6e\047\uff6e\051\uff6e\060\uff6e\001" +
    "\002\000\032\015\uff71\016\uff71\017\uff71\021\uff71\023\244" +
    "\024\uff71\032\uff71\034\uff71\035\uff71\047\uff71\051\uff71\060" +
    "\uff71\001\002\000\036\010\uff4f\012\uff4f\013\uff4f\014\uff4f" +
    "\022\uff4f\023\uff4f\033\uff4f\034\uff4f\035\uff4f\036\uff4f\037" +
    "\uff4f\052\uff4f\055\uff4f\056\uff4f\001\002\000\022\015\uff58" +
    "\017\241\024\uff58\032\uff58\034\152\035\147\047\uff58\060" +
    "\154\001\002\000\036\010\uff50\012\uff50\013\uff50\014\uff50" +
    "\022\uff50\023\uff50\033\uff50\034\uff50\035\uff50\036\uff50\037" +
    "\uff50\052\uff50\055\uff50\056\uff50\001\002\000\024\022\uff51" +
    "\023\uff51\033\uff51\034\uff51\035\uff51\036\uff51\037\uff51\052" +
    "\uff51\055\uff51\001\002\000\024\022\065\023\057\033\066" +
    "\034\062\035\102\036\073\037\061\052\067\055\111\001" +
    "\002\000\036\010\100\012\103\013\107\014\056\022\065" +
    "\023\057\033\066\034\062\035\102\036\073\037\061\052" +
    "\067\055\111\056\225\001\002\000\036\010\uff4d\012\uff4d" +
    "\013\uff4d\014\uff4d\022\uff4d\023\uff4d\033\uff4d\034\uff4d\035" +
    "\uff4d\036\uff4d\037\uff4d\052\uff4d\055\uff4d\056\uff4d\001\002" +
    "\000\012\015\uff60\024\uff60\032\uff60\047\uff60\001\002\000" +
    "\004\023\203\001\002\000\024\022\065\023\057\033\066" +
    "\034\062\035\102\036\073\037\061\052\067\055\111\001" +
    "\002\000\024\022\uff52\023\uff52\033\uff52\034\uff52\035\uff52" +
    "\036\uff52\037\uff52\052\uff52\055\uff52\001\002\000\004\025" +
    "\161\001\002\000\026\015\uff57\016\155\017\153\021\150" +
    "\024\uff57\032\uff57\034\152\035\147\047\uff57\060\154\001" +
    "\002\000\036\010\100\012\103\013\107\014\056\022\065" +
    "\023\057\033\066\034\062\035\102\036\073\037\061\052" +
    "\067\055\111\056\uff74\001\002\000\036\010\uff4c\012\uff4c" +
    "\013\uff4c\014\uff4c\022\uff4c\023\uff4c\033\uff4c\034\uff4c\035" +
    "\uff4c\036\uff4c\037\uff4c\052\uff4c\055\uff4c\056\uff4c\001\002" +
    "\000\004\023\115\001\002\000\012\015\uff61\024\uff61\032" +
    "\uff61\047\uff61\001\002\000\022\015\uff63\017\uff63\024\uff63" +
    "\032\uff63\034\uff63\035\uff63\047\uff63\060\uff63\001\002\000" +
    "\004\032\113\001\002\000\036\010\100\012\103\013\107" +
    "\014\056\022\065\023\057\033\066\034\062\035\102\036" +
    "\073\037\061\052\067\055\111\056\uff75\001\002\000\004" +
    "\056\uff77\001\002\000\024\022\065\023\057\033\066\034" +
    "\062\035\102\036\073\037\061\052\067\055\111\001\002" +
    "\000\004\024\117\001\002\000\004\025\120\001\002\000" +
    "\044\010\100\012\103\013\107\014\056\022\065\023\057" +
    "\026\126\033\066\034\062\035\102\036\073\037\061\052" +
    "\067\053\124\054\121\055\111\056\132\001\002\000\004" +
    "\032\144\001\002\000\044\010\uff49\012\uff49\013\uff49\014" +
    "\uff49\022\uff49\023\uff49\026\uff49\033\uff49\034\uff49\035\uff49" +
    "\036\uff49\037\uff49\052\uff49\053\uff49\054\uff49\055\uff49\056" +
    "\uff49\001\002\000\044\010\100\012\103\013\107\014\056" +
    "\022\065\023\057\026\uff40\033\066\034\062\035\102\036" +
    "\073\037\061\052\067\053\124\054\121\055\111\056\132" +
    "\001\002\000\004\032\142\001\002\000\044\010\uff4a\012" +
    "\uff4a\013\uff4a\014\uff4a\022\uff4a\023\uff4a\026\uff4a\033\uff4a" +
    "\034\uff4a\035\uff4a\036\uff4a\037\uff4a\052\uff4a\053\uff4a\054" +
    "\uff4a\055\uff4a\056\uff4a\001\002\000\044\010\uff36\012\uff36" +
    "\013\uff36\014\uff36\022\uff36\023\uff36\026\uff36\033\uff36\034" +
    "\uff36\035\uff36\036\uff36\037\uff36\052\uff36\053\uff36\054\uff36" +
    "\055\uff36\056\uff36\001\002\000\004\026\141\001\002\000" +
    "\044\010\uff4b\012\uff4b\013\uff4b\014\uff4b\022\uff4b\023\uff4b" +
    "\026\uff4b\033\uff4b\034\uff4b\035\uff4b\036\uff4b\037\uff4b\052" +
    "\uff4b\053\uff4b\054\uff4b\055\uff4b\056\uff4b\001\002\000\044" +
    "\010\uff48\012\uff48\013\uff48\014\uff48\022\uff48\023\uff48\026" +
    "\uff48\033\uff48\034\uff48\035\uff48\036\uff48\037\uff48\052\uff48" +
    "\053\uff48\054\uff48\055\uff48\056\uff48\001\002\000\024\022" +
    "\065\023\057\033\066\034\062\035\102\036\073\037\061" +
    "\052\067\055\111\001\002\000\044\010\uff47\012\uff47\013" +
    "\uff47\014\uff47\022\uff47\023\uff47\026\uff47\033\uff47\034\uff47" +
    "\035\uff47\036\uff47\037\uff47\052\uff47\053\uff47\054\uff47\055" +
    "\uff47\056\uff47\001\002\000\004\032\135\001\002\000\044" +
    "\010\100\012\103\013\107\014\056\022\065\023\057\026" +
    "\uff41\033\066\034\062\035\102\036\073\037\061\052\067" +
    "\053\124\054\121\055\111\056\132\001\002\000\004\026" +
    "\uff43\001\002\000\004\032\140\001\002\000\044\010\uff44" +
    "\012\uff44\013\uff44\014\uff44\022\uff44\023\uff44\026\uff44\033" +
    "\uff44\034\uff44\035\uff44\036\uff44\037\uff44\052\uff44\053\uff44" +
    "\054\uff44\055\uff44\056\uff44\001\002\000\044\010\uff37\012" +
    "\uff37\013\uff37\014\uff37\022\uff37\023\uff37\026\uff37\033\uff37" +
    "\034\uff37\035\uff37\036\uff37\037\uff37\052\uff37\053\uff37\054" +
    "\uff37\055\uff37\056\uff37\001\002\000\044\010\uff46\012\uff46" +
    "\013\uff46\014\uff46\022\uff46\023\uff46\026\uff46\033\uff46\034" +
    "\uff46\035\uff46\036\uff46\037\uff46\052\uff46\053\uff46\054\uff46" +
    "\055\uff46\056\uff46\001\002\000\004\026\uff42\001\002\000" +
    "\044\010\uff45\012\uff45\013\uff45\014\uff45\022\uff45\023\uff45" +
    "\026\uff45\033\uff45\034\uff45\035\uff45\036\uff45\037\uff45\052" +
    "\uff45\053\uff45\054\uff45\055\uff45\056\uff45\001\002\000\004" +
    "\056\uff76\001\002\000\024\022\065\023\057\033\066\034" +
    "\062\035\102\036\073\037\061\052\067\055\111\001\002" +
    "\000\024\022\uff54\023\uff54\033\uff54\034\uff54\035\uff54\036" +
    "\uff54\037\uff54\052\uff54\055\uff54\001\002\000\024\022\uff68" +
    "\023\uff68\033\uff68\034\uff68\035\uff68\036\uff68\037\uff68\052" +
    "\uff68\055\uff68\001\002\000\024\022\065\023\057\033\066" +
    "\034\062\035\102\036\073\037\061\052\067\055\111\001" +
    "\002\000\024\022\uff55\023\uff55\033\uff55\034\uff55\035\uff55" +
    "\036\uff55\037\uff55\052\uff55\055\uff55\001\002\000\024\022" +
    "\065\023\057\033\066\034\062\035\102\036\073\037\061" +
    "\052\067\055\111\001\002\000\024\022\uff56\023\uff56\033" +
    "\uff56\034\uff56\035\uff56\036\uff56\037\uff56\052\uff56\055\uff56" +
    "\001\002\000\024\022\uff67\023\uff67\033\uff67\034\uff67\035" +
    "\uff67\036\uff67\037\uff67\052\uff67\055\uff67\001\002\000\012" +
    "\015\uff59\024\uff59\032\uff59\047\uff59\001\002\000\012\015" +
    "\uff6b\024\uff6b\032\uff6b\047\uff6b\001\002\000\012\015\uff5b" +
    "\024\uff5b\032\uff5b\047\uff5b\001\002\000\044\010\100\012" +
    "\103\013\107\014\056\022\065\023\057\026\162\033\066" +
    "\034\062\035\102\036\073\037\061\052\067\053\124\054" +
    "\121\055\111\056\132\001\002\000\004\013\172\001\002" +
    "\000\004\026\164\001\002\000\004\013\165\001\002\000" +
    "\004\023\166\001\002\000\024\022\065\023\057\033\066" +
    "\034\062\035\102\036\073\037\061\052\067\055\111\001" +
    "\002\000\004\024\170\001\002\000\004\032\171\001\002" +
    "\000\044\010\uff35\012\uff35\013\uff35\014\uff35\022\uff35\023" +
    "\uff35\026\uff35\033\uff35\034\uff35\035\uff35\036\uff35\037\uff35" +
    "\052\uff35\053\uff35\054\uff35\055\uff35\056\uff35\001\002\000" +
    "\004\023\173\001\002\000\024\022\065\023\057\033\066" +
    "\034\062\035\102\036\073\037\061\052\067\055\111\001" +
    "\002\000\004\024\175\001\002\000\004\032\176\001\002" +
    "\000\044\010\uff34\012\uff34\013\uff34\014\uff34\022\uff34\023" +
    "\uff34\026\uff34\033\uff34\034\uff34\035\uff34\036\uff34\037\uff34" +
    "\052\uff34\053\uff34\054\uff34\055\uff34\056\uff34\001\002\000" +
    "\004\032\200\001\002\000\004\026\201\001\002\000\006" +
    "\026\uff83\045\021\001\002\000\004\026\uff87\001\002\000" +
    "\024\022\065\023\057\033\066\034\062\035\102\036\073" +
    "\037\061\052\067\055\111\001\002\000\004\024\205\001" +
    "\002\000\004\025\206\001\002\000\044\010\100\012\103" +
    "\013\107\014\056\022\065\023\057\026\207\033\066\034" +
    "\062\035\102\036\073\037\061\052\067\053\124\054\121" +
    "\055\111\056\132\001\002\000\046\010\uff3d\011\217\012" +
    "\uff3d\013\uff3d\014\uff3d\022\uff3d\023\uff3d\026\uff3d\033\uff3d" +
    "\034\uff3d\035\uff3d\036\uff3d\037\uff3d\052\uff3d\053\uff3d\054" +
    "\uff3d\055\uff3d\056\uff3d\001\002\000\004\026\211\001\002" +
    "\000\046\010\uff3e\011\212\012\uff3e\013\uff3e\014\uff3e\022" +
    "\uff3e\023\uff3e\026\uff3e\033\uff3e\034\uff3e\035\uff3e\036\uff3e" +
    "\037\uff3e\052\uff3e\053\uff3e\054\uff3e\055\uff3e\056\uff3e\001" +
    "\002\000\004\025\213\001\002\000\044\010\100\012\103" +
    "\013\107\014\056\022\065\023\057\026\214\033\066\034" +
    "\062\035\102\036\073\037\061\052\067\053\124\054\121" +
    "\055\111\056\132\001\002\000\044\010\uff3a\012\uff3a\013" +
    "\uff3a\014\uff3a\022\uff3a\023\uff3a\026\uff3a\033\uff3a\034\uff3a" +
    "\035\uff3a\036\uff3a\037\uff3a\052\uff3a\053\uff3a\054\uff3a\055" +
    "\uff3a\056\uff3a\001\002\000\004\026\216\001\002\000\044" +
    "\010\uff3b\012\uff3b\013\uff3b\014\uff3b\022\uff3b\023\uff3b\026" +
    "\uff3b\033\uff3b\034\uff3b\035\uff3b\036\uff3b\037\uff3b\052\uff3b" +
    "\053\uff3b\054\uff3b\055\uff3b\056\uff3b\001\002\000\004\025" +
    "\220\001\002\000\044\010\100\012\103\013\107\014\056" +
    "\022\065\023\057\026\221\033\066\034\062\035\102\036" +
    "\073\037\061\052\067\053\124\054\121\055\111\056\132" +
    "\001\002\000\044\010\uff38\012\uff38\013\uff38\014\uff38\022" +
    "\uff38\023\uff38\026\uff38\033\uff38\034\uff38\035\uff38\036\uff38" +
    "\037\uff38\052\uff38\053\uff38\054\uff38\055\uff38\056\uff38\001" +
    "\002\000\004\026\223\001\002\000\044\010\uff39\012\uff39" +
    "\013\uff39\014\uff39\022\uff39\023\uff39\026\uff39\033\uff39\034" +
    "\uff39\035\uff39\036\uff39\037\uff39\052\uff39\053\uff39\054\uff39" +
    "\055\uff39\056\uff39\001\002\000\004\056\232\001\002\000" +
    "\024\022\065\023\057\033\066\034\062\035\102\036\073" +
    "\037\061\052\067\055\111\001\002\000\004\032\227\001" +
    "\002\000\004\026\230\001\002\000\006\026\uff86\045\021" +
    "\001\002\000\004\026\uff8a\001\002\000\024\022\065\023" +
    "\057\033\066\034\062\035\102\036\073\037\061\052\067" +
    "\055\111\001\002\000\004\032\234\001\002\000\004\026" +
    "\235\001\002\000\006\026\uff85\045\021\001\002\000\004" +
    "\026\uff89\001\002\000\012\015\uff5d\024\uff5d\032\uff5d\047" +
    "\uff5d\001\002\000\024\022\065\023\057\033\066\034\062" +
    "\035\102\036\073\037\061\052\067\055\111\001\002\000" +
    "\024\022\065\023\057\033\066\034\062\035\102\036\073" +
    "\037\061\052\067\055\111\001\002\000\012\015\uff5a\024" +
    "\uff5a\032\uff5a\047\uff5a\001\002\000\012\015\uff5c\024\uff5c" +
    "\032\uff5c\047\uff5c\001\002\000\026\022\065\023\057\024" +
    "\245\033\066\034\062\035\102\036\073\037\061\052\067" +
    "\055\111\001\002\000\030\015\uff73\016\uff73\017\uff73\021" +
    "\uff73\024\uff73\032\uff73\034\uff73\035\uff73\047\uff73\051\uff73" +
    "\060\uff73\001\002\000\004\024\252\001\002\000\006\024" +
    "\uff65\047\250\001\002\000\024\022\065\023\057\033\066" +
    "\034\062\035\102\036\073\037\061\052\067\055\111\001" +
    "\002\000\004\024\uff66\001\002\000\030\015\uff72\016\uff72" +
    "\017\uff72\021\uff72\024\uff72\032\uff72\034\uff72\035\uff72\047" +
    "\uff72\051\uff72\060\uff72\001\002\000\026\022\065\023\057" +
    "\024\254\033\066\034\062\035\102\036\073\037\061\052" +
    "\067\055\111\001\002\000\030\015\uff70\016\uff70\017\uff70" +
    "\021\uff70\024\uff70\032\uff70\034\uff70\035\uff70\047\uff70\051" +
    "\uff70\060\uff70\001\002\000\004\024\256\001\002\000\030" +
    "\015\uff6f\016\uff6f\017\uff6f\021\uff6f\024\uff6f\032\uff6f\034" +
    "\uff6f\035\uff6f\047\uff6f\051\uff6f\060\uff6f\001\002\000\024" +
    "\022\065\023\057\033\066\034\062\035\102\036\073\037" +
    "\061\052\067\055\111\001\002\000\004\032\261\001\002" +
    "\000\004\026\262\001\002\000\006\026\uff84\045\021\001" +
    "\002\000\004\026\uff88\001\002\000\004\024\265\001\002" +
    "\000\014\015\uff5e\024\uff5e\032\uff5e\047\uff5e\062\266\001" +
    "\002\000\024\022\065\023\057\033\066\034\062\035\102" +
    "\036\073\037\061\052\067\055\111\001\002\000\004\015" +
    "\270\001\002\000\024\022\065\023\057\033\066\034\062" +
    "\035\102\036\073\037\061\052\067\055\111\001\002\000" +
    "\012\015\uff3f\024\uff3f\032\uff3f\047\uff3f\001\002\000\010" +
    "\006\276\033\066\052\067\001\002\000\004\024\310\001" +
    "\002\000\004\032\304\001\002\000\006\016\155\021\150" +
    "\001\002\000\004\033\277\001\002\000\004\016\300\001" +
    "\002\000\024\022\065\023\057\033\066\034\062\035\102" +
    "\036\073\037\061\052\067\055\111\001\002\000\004\032" +
    "\uff69\001\002\000\024\022\065\023\057\033\066\034\062" +
    "\035\102\036\073\037\061\052\067\055\111\001\002\000" +
    "\004\032\uff6a\001\002\000\024\022\065\023\057\033\066" +
    "\034\062\035\102\036\073\037\061\052\067\055\111\001" +
    "\002\000\004\032\306\001\002\000\024\022\065\023\057" +
    "\033\066\034\062\035\102\036\073\037\061\052\067\055" +
    "\111\001\002\000\004\024\uff31\001\002\000\004\025\311" +
    "\001\002\000\044\010\100\012\103\013\107\014\056\022" +
    "\065\023\057\026\312\033\066\034\062\035\102\036\073" +
    "\037\061\052\067\053\124\054\121\055\111\056\132\001" +
    "\002\000\044\010\uff32\012\uff32\013\uff32\014\uff32\022\uff32" +
    "\023\uff32\026\uff32\033\uff32\034\uff32\035\uff32\036\uff32\037" +
    "\uff32\052\uff32\053\uff32\054\uff32\055\uff32\056\uff32\001\002" +
    "\000\004\026\314\001\002\000\044\010\uff33\012\uff33\013" +
    "\uff33\014\uff33\022\uff33\023\uff33\026\uff33\033\uff33\034\uff33" +
    "\035\uff33\036\uff33\037\uff33\052\uff33\053\uff33\054\uff33\055" +
    "\uff33\056\uff33\001\002\000\006\033\066\052\067\001\002" +
    "\000\026\015\uff6d\016\uff6d\017\uff6d\021\uff6d\024\uff6d\032" +
    "\uff6d\034\uff6d\035\uff6d\047\uff6d\060\uff6d\001\002\000\004" +
    "\025\340\001\002\000\006\003\322\025\321\001\002\000" +
    "\006\026\333\033\325\001\002\000\006\026\323\033\325" +
    "\001\002\000\014\006\uffd3\026\uffd3\041\026\044\uffd3\045" +
    "\uffd3\001\002\000\004\026\330\001\002\000\006\026\uffd1" +
    "\047\326\001\002\000\004\033\325\001\002\000\004\026" +
    "\uffd2\001\002\000\014\006\uffd4\026\uffd4\041\026\044\uffd4" +
    "\045\uffd4\001\002\000\012\006\uffd8\026\uffd8\044\uffd8\045" +
    "\uffd8\001\002\000\012\006\uffd7\026\uffd7\044\uffd7\045\uffd7" +
    "\001\002\000\014\006\uffdb\026\uffdb\041\026\044\uffdb\045" +
    "\uffdb\001\002\000\004\026\335\001\002\000\014\006\uffdc" +
    "\026\uffdc\041\026\044\uffdc\045\uffdc\001\002\000\012\006" +
    "\uffde\026\uffde\044\uffde\045\uffde\001\002\000\012\006\uffdd" +
    "\026\uffdd\044\uffdd\045\uffdd\001\002\000\006\026\341\033" +
    "\325\001\002\000\014\006\uffd5\026\uffd5\041\026\044\uffd5" +
    "\045\uffd5\001\002\000\004\026\343\001\002\000\014\006" +
    "\uffd6\026\uffd6\041\026\044\uffd6\045\uffd6\001\002\000\012" +
    "\006\uffda\026\uffda\044\uffda\045\uffda\001\002\000\012\006" +
    "\uffd9\026\uffd9\044\uffd9\045\uffd9\001\002\000\006\002\uffe5" +
    "\040\015\001\002\000\006\026\353\045\021\001\002\000" +
    "\004\026\351\001\002\000\006\002\uffe3\040\015\001\002" +
    "\000\004\002\ufff3\001\002\000\006\002\uffe4\040\015\001" +
    "\002\000\004\026\355\001\002\000\006\002\uffe2\040\015" +
    "\001\002\000\004\002\ufff2\001\002\000\004\002\ufff4\001" +
    "\002\000\004\002\ufff5\001\002\000\006\003\u013d\033\u013e" +
    "\001\002\000\010\016\367\030\u0139\032\u010e\001\002\000" +
    "\006\003\374\030\375\001\002\000\006\016\367\032\366" +
    "\001\002\000\004\032\372\001\002\000\046\006\024\010" +
    "\uffc7\012\uffc7\013\uffc7\014\uffc7\022\uffc7\023\uffc7\026\uffc7" +
    "\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\044\uffc7\045" +
    "\uffc7\052\uffc7\055\uffc7\056\uffc7\001\002\000\024\022\065" +
    "\023\057\033\066\034\062\035\102\036\073\037\061\052" +
    "\067\055\111\001\002\000\004\032\uffa1\001\002\000\044" +
    "\010\uffcf\012\uffcf\013\uffcf\014\uffcf\022\uffcf\023\uffcf\026" +
    "\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\044\uffcf" +
    "\045\uffcf\052\uffcf\055\uffcf\056\uffcf\001\002\000\046\006" +
    "\024\010\uffc3\012\uffc3\013\uffc3\014\uffc3\022\uffc3\023\uffc3" +
    "\026\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\044" +
    "\uffc3\045\uffc3\052\uffc3\055\uffc3\056\uffc3\001\002\000\044" +
    "\010\uffcb\012\uffcb\013\uffcb\014\uffcb\022\uffcb\023\uffcb\026" +
    "\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\044\uffcb" +
    "\045\uffcb\052\uffcb\055\uffcb\056\uffcb\001\002\000\006\033" +
    "\u012d\061\u012c\001\002\000\010\003\377\033\u0100\061\376" +
    "\001\002\000\006\003\u0120\033\u0121\001\002\000\006\016" +
    "\367\032\u0107\001\002\000\006\016\367\032\u0102\001\002" +
    "\000\004\032\u0104\001\002\000\046\006\024\010\uffc5\012" +
    "\uffc5\013\uffc5\014\uffc5\022\uffc5\023\uffc5\026\uffc5\033\uffc5" +
    "\034\uffc5\035\uffc5\036\uffc5\037\uffc5\044\uffc5\045\uffc5\052" +
    "\uffc5\055\uffc5\056\uffc5\001\002\000\044\010\uffcd\012\uffcd" +
    "\013\uffcd\014\uffcd\022\uffcd\023\uffcd\026\uffcd\033\uffcd\034" +
    "\uffcd\035\uffcd\036\uffcd\037\uffcd\044\uffcd\045\uffcd\052\uffcd" +
    "\055\uffcd\056\uffcd\001\002\000\046\006\024\010\uffc1\012" +
    "\uffc1\013\uffc1\014\uffc1\022\uffc1\023\uffc1\026\uffc1\033\uffc1" +
    "\034\uffc1\035\uffc1\036\uffc1\037\uffc1\044\uffc1\045\uffc1\052" +
    "\uffc1\055\uffc1\056\uffc1\001\002\000\044\010\uffc9\012\uffc9" +
    "\013\uffc9\014\uffc9\022\uffc9\023\uffc9\026\uffc9\033\uffc9\034" +
    "\uffc9\035\uffc9\036\uffc9\037\uffc9\044\uffc9\045\uffc9\052\uffc9" +
    "\055\uffc9\056\uffc9\001\002\000\004\032\u0109\001\002\000" +
    "\046\006\024\010\uffb5\012\uffb5\013\uffb5\014\uffb5\022\uffb5" +
    "\023\uffb5\026\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5\037" +
    "\uffb5\044\uffb5\045\uffb5\052\uffb5\055\uffb5\056\uffb5\001\002" +
    "\000\044\010\uffbd\012\uffbd\013\uffbd\014\uffbd\022\uffbd\023" +
    "\uffbd\026\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd" +
    "\044\uffbd\045\uffbd\052\uffbd\055\uffbd\056\uffbd\001\002\000" +
    "\004\006\u010b\001\002\000\044\010\uffb9\012\uffb9\013\uffb9" +
    "\014\uffb9\022\uffb9\023\uffb9\026\uffb9\033\uffb9\034\uffb9\035" +
    "\uffb9\036\uffb9\037\uffb9\044\uffb9\045\uffb9\052\uffb9\055\uffb9" +
    "\056\uffb9\001\002\000\012\003\u010c\027\363\033\364\061" +
    "\361\001\002\000\010\016\367\030\u010f\032\u010e\001\002" +
    "\000\004\032\u011e\001\002\000\046\006\024\010\uffb7\012" +
    "\uffb7\013\uffb7\014\uffb7\022\uffb7\023\uffb7\026\uffb7\033\uffb7" +
    "\034\uffb7\035\uffb7\036\uffb7\037\uffb7\044\uffb7\045\uffb7\052" +
    "\uffb7\055\uffb7\056\uffb7\001\002\000\006\033\u0111\061\u0110" +
    "\001\002\000\004\033\u0117\001\002\000\006\016\367\032" +
    "\u0113\001\002\000\004\032\u0115\001\002\000\046\006\024" +
    "\010\uffac\012\uffac\013\uffac\014\uffac\022\uffac\023\uffac\026" +
    "\uffac\033\uffac\034\uffac\035\uffac\036\uffac\037\uffac\044\uffac" +
    "\045\uffac\052\uffac\055\uffac\056\uffac\001\002\000\044\010" +
    "\uffb0\012\uffb0\013\uffb0\014\uffb0\022\uffb0\023\uffb0\026\uffb0" +
    "\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\044\uffb0\045" +
    "\uffb0\052\uffb0\055\uffb0\056\uffb0\001\002\000\046\006\024" +
    "\010\uffaa\012\uffaa\013\uffaa\014\uffaa\022\uffaa\023\uffaa\026" +
    "\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa\044\uffaa" +
    "\045\uffaa\052\uffaa\055\uffaa\056\uffaa\001\002\000\044\010" +
    "\uffae\012\uffae\013\uffae\014\uffae\022\uffae\023\uffae\026\uffae" +
    "\033\uffae\034\uffae\035\uffae\036\uffae\037\uffae\044\uffae\045" +
    "\uffae\052\uffae\055\uffae\056\uffae\001\002\000\006\016\367" +
    "\032\u0119\001\002\000\004\032\u011b\001\002\000\046\006" +
    "\024\010\uffad\012\uffad\013\uffad\014\uffad\022\uffad\023\uffad" +
    "\026\uffad\033\uffad\034\uffad\035\uffad\036\uffad\037\uffad\044" +
    "\uffad\045\uffad\052\uffad\055\uffad\056\uffad\001\002\000\044" +
    "\010\uffb1\012\uffb1\013\uffb1\014\uffb1\022\uffb1\023\uffb1\026" +
    "\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1\044\uffb1" +
    "\045\uffb1\052\uffb1\055\uffb1\056\uffb1\001\002\000\046\006" +
    "\024\010\uffab\012\uffab\013\uffab\014\uffab\022\uffab\023\uffab" +
    "\026\uffab\033\uffab\034\uffab\035\uffab\036\uffab\037\uffab\044" +
    "\uffab\045\uffab\052\uffab\055\uffab\056\uffab\001\002\000\044" +
    "\010\uffaf\012\uffaf\013\uffaf\014\uffaf\022\uffaf\023\uffaf\026" +
    "\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf\044\uffaf" +
    "\045\uffaf\052\uffaf\055\uffaf\056\uffaf\001\002\000\044\010" +
    "\uffbf\012\uffbf\013\uffbf\014\uffbf\022\uffbf\023\uffbf\026\uffbf" +
    "\033\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\044\uffbf\045" +
    "\uffbf\052\uffbf\055\uffbf\056\uffbf\001\002\000\046\006\024" +
    "\010\uffb3\012\uffb3\013\uffb3\014\uffb3\022\uffb3\023\uffb3\026" +
    "\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3\044\uffb3" +
    "\045\uffb3\052\uffb3\055\uffb3\056\uffb3\001\002\000\044\010" +
    "\uffbb\012\uffbb\013\uffbb\014\uffbb\022\uffbb\023\uffbb\026\uffbb" +
    "\033\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\044\uffbb\045" +
    "\uffbb\052\uffbb\055\uffbb\056\uffbb\001\002\000\006\016\367" +
    "\032\u0128\001\002\000\006\016\367\032\u0123\001\002\000" +
    "\004\032\u0125\001\002\000\046\006\024\010\uffc6\012\uffc6" +
    "\013\uffc6\014\uffc6\022\uffc6\023\uffc6\026\uffc6\033\uffc6\034" +
    "\uffc6\035\uffc6\036\uffc6\037\uffc6\044\uffc6\045\uffc6\052\uffc6" +
    "\055\uffc6\056\uffc6\001\002\000\044\010\uffce\012\uffce\013" +
    "\uffce\014\uffce\022\uffce\023\uffce\026\uffce\033\uffce\034\uffce" +
    "\035\uffce\036\uffce\037\uffce\044\uffce\045\uffce\052\uffce\055" +
    "\uffce\056\uffce\001\002\000\046\006\024\010\uffc2\012\uffc2" +
    "\013\uffc2\014\uffc2\022\uffc2\023\uffc2\026\uffc2\033\uffc2\034" +
    "\uffc2\035\uffc2\036\uffc2\037\uffc2\044\uffc2\045\uffc2\052\uffc2" +
    "\055\uffc2\056\uffc2\001\002\000\044\010\uffca\012\uffca\013" +
    "\uffca\014\uffca\022\uffca\023\uffca\026\uffca\033\uffca\034\uffca" +
    "\035\uffca\036\uffca\037\uffca\044\uffca\045\uffca\052\uffca\055" +
    "\uffca\056\uffca\001\002\000\004\032\u012a\001\002\000\046" +
    "\006\024\010\uffb6\012\uffb6\013\uffb6\014\uffb6\022\uffb6\023" +
    "\uffb6\026\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6" +
    "\044\uffb6\045\uffb6\052\uffb6\055\uffb6\056\uffb6\001\002\000" +
    "\044\010\uffbe\012\uffbe\013\uffbe\014\uffbe\022\uffbe\023\uffbe" +
    "\026\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe\044" +
    "\uffbe\045\uffbe\052\uffbe\055\uffbe\056\uffbe\001\002\000\046" +
    "\006\024\010\uffb2\012\uffb2\013\uffb2\014\uffb2\022\uffb2\023" +
    "\uffb2\026\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2" +
    "\044\uffb2\045\uffb2\052\uffb2\055\uffb2\056\uffb2\001\002\000" +
    "\044\010\uffba\012\uffba\013\uffba\014\uffba\022\uffba\023\uffba" +
    "\026\uffba\033\uffba\034\uffba\035\uffba\036\uffba\037\uffba\044" +
    "\uffba\045\uffba\052\uffba\055\uffba\056\uffba\001\002\000\004" +
    "\033\u0133\001\002\000\006\016\367\032\u012f\001\002\000" +
    "\004\032\u0131\001\002\000\046\006\024\010\uffa4\012\uffa4" +
    "\013\uffa4\014\uffa4\022\uffa4\023\uffa4\026\uffa4\033\uffa4\034" +
    "\uffa4\035\uffa4\036\uffa4\037\uffa4\044\uffa4\045\uffa4\052\uffa4" +
    "\055\uffa4\056\uffa4\001\002\000\044\010\uffa8\012\uffa8\013" +
    "\uffa8\014\uffa8\022\uffa8\023\uffa8\026\uffa8\033\uffa8\034\uffa8" +
    "\035\uffa8\036\uffa8\037\uffa8\044\uffa8\045\uffa8\052\uffa8\055" +
    "\uffa8\056\uffa8\001\002\000\046\006\024\010\uffa2\012\uffa2" +
    "\013\uffa2\014\uffa2\022\uffa2\023\uffa2\026\uffa2\033\uffa2\034" +
    "\uffa2\035\uffa2\036\uffa2\037\uffa2\044\uffa2\045\uffa2\052\uffa2" +
    "\055\uffa2\056\uffa2\001\002\000\044\010\uffa6\012\uffa6\013" +
    "\uffa6\014\uffa6\022\uffa6\023\uffa6\026\uffa6\033\uffa6\034\uffa6" +
    "\035\uffa6\036\uffa6\037\uffa6\044\uffa6\045\uffa6\052\uffa6\055" +
    "\uffa6\056\uffa6\001\002\000\006\016\367\032\u0135\001\002" +
    "\000\004\032\u0137\001\002\000\046\006\024\010\uffa5\012" +
    "\uffa5\013\uffa5\014\uffa5\022\uffa5\023\uffa5\026\uffa5\033\uffa5" +
    "\034\uffa5\035\uffa5\036\uffa5\037\uffa5\044\uffa5\045\uffa5\052" +
    "\uffa5\055\uffa5\056\uffa5\001\002\000\044\010\uffa9\012\uffa9" +
    "\013\uffa9\014\uffa9\022\uffa9\023\uffa9\026\uffa9\033\uffa9\034" +
    "\uffa9\035\uffa9\036\uffa9\037\uffa9\044\uffa9\045\uffa9\052\uffa9" +
    "\055\uffa9\056\uffa9\001\002\000\046\006\024\010\uffa3\012" +
    "\uffa3\013\uffa3\014\uffa3\022\uffa3\023\uffa3\026\uffa3\033\uffa3" +
    "\034\uffa3\035\uffa3\036\uffa3\037\uffa3\044\uffa3\045\uffa3\052" +
    "\uffa3\055\uffa3\056\uffa3\001\002\000\044\010\uffa7\012\uffa7" +
    "\013\uffa7\014\uffa7\022\uffa7\023\uffa7\026\uffa7\033\uffa7\034" +
    "\uffa7\035\uffa7\036\uffa7\037\uffa7\044\uffa7\045\uffa7\052\uffa7" +
    "\055\uffa7\056\uffa7\001\002\000\006\033\u0111\061\u013a\001" +
    "\002\000\004\033\u013b\001\002\000\006\016\367\032\u013c" +
    "\001\002\000\044\010\uffad\012\uffad\013\uffad\014\uffad\022" +
    "\uffad\023\uffad\026\uffad\033\uffad\034\uffad\035\uffad\036\uffad" +
    "\037\uffad\044\uffad\045\uffad\052\uffad\055\uffad\056\uffad\001" +
    "\002\000\006\016\367\032\u0145\001\002\000\006\016\367" +
    "\032\u0140\001\002\000\004\032\u0142\001\002\000\046\006" +
    "\024\010\uffc8\012\uffc8\013\uffc8\014\uffc8\022\uffc8\023\uffc8" +
    "\026\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8\044" +
    "\uffc8\045\uffc8\052\uffc8\055\uffc8\056\uffc8\001\002\000\044" +
    "\010\uffd0\012\uffd0\013\uffd0\014\uffd0\022\uffd0\023\uffd0\026" +
    "\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\044\uffd0" +
    "\045\uffd0\052\uffd0\055\uffd0\056\uffd0\001\002\000\046\006" +
    "\024\010\uffc4\012\uffc4\013\uffc4\014\uffc4\022\uffc4\023\uffc4" +
    "\026\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\044" +
    "\uffc4\045\uffc4\052\uffc4\055\uffc4\056\uffc4\001\002\000\044" +
    "\010\uffcc\012\uffcc\013\uffcc\014\uffcc\022\uffcc\023\uffcc\026" +
    "\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\044\uffcc" +
    "\045\uffcc\052\uffcc\055\uffcc\056\uffcc\001\002\000\004\032" +
    "\u0147\001\002\000\046\006\024\010\uffb8\012\uffb8\013\uffb8" +
    "\014\uffb8\022\uffb8\023\uffb8\026\uffb8\033\uffb8\034\uffb8\035" +
    "\uffb8\036\uffb8\037\uffb8\044\uffb8\045\uffb8\052\uffb8\055\uffb8" +
    "\056\uffb8\001\002\000\044\010\uffc0\012\uffc0\013\uffc0\014" +
    "\uffc0\022\uffc0\023\uffc0\026\uffc0\033\uffc0\034\uffc0\035\uffc0" +
    "\036\uffc0\037\uffc0\044\uffc0\045\uffc0\052\uffc0\055\uffc0\056" +
    "\uffc0\001\002\000\046\006\024\010\uffb4\012\uffb4\013\uffb4" +
    "\014\uffb4\022\uffb4\023\uffb4\026\uffb4\033\uffb4\034\uffb4\035" +
    "\uffb4\036\uffb4\037\uffb4\044\uffb4\045\uffb4\052\uffb4\055\uffb4" +
    "\056\uffb4\001\002\000\044\010\uffbc\012\uffbc\013\uffbc\014" +
    "\uffbc\022\uffbc\023\uffbc\026\uffbc\033\uffbc\034\uffbc\035\uffbc" +
    "\036\uffbc\037\uffbc\044\uffbc\045\uffbc\052\uffbc\055\uffbc\056" +
    "\uffbc\001\002\000\006\002\uffed\040\015\001\002\000\006" +
    "\026\u015a\045\021\001\002\000\004\026\u0158\001\002\000" +
    "\010\026\u014d\044\030\045\021\001\002\000\006\002\uffec" +
    "\040\015\001\002\000\006\026\u0152\045\021\001\002\000" +
    "\004\026\u0150\001\002\000\006\002\uffe8\040\015\001\002" +
    "\000\004\002\ufff8\001\002\000\006\002\uffe9\040\015\001" +
    "\002\000\004\026\u0154\001\002\000\006\002\uffe6\040\015" +
    "\001\002\000\004\002\ufff6\001\002\000\004\002\ufff9\001" +
    "\002\000\004\002\ufffc\001\002\000\006\002\uffea\040\015" +
    "\001\002\000\004\002\ufffa\001\002\000\006\002\uffeb\040" +
    "\015\001\002\000\004\026\u015c\001\002\000\006\002\uffe7" +
    "\040\015\001\002\000\004\002\ufff7\001\002\000\004\002" +
    "\ufffb\001\002\000\004\002\ufffd\001\002\000\006\002\uffe1" +
    "\040\015\001\002\000\004\026\u0162\001\002\000\006\002" +
    "\uffe0\040\015\001\002\000\004\002\ufff0\001\002\000\004" +
    "\002\ufff1\001\002\000\004\023\u018d\001\002\000\006\003" +
    "\u0168\023\u0167\001\002\000\004\006\u016a\001\002\000\004" +
    "\006\u016a\001\002\000\004\024\u0171\001\002\000\006\003" +
    "\u016b\033\u016c\001\002\000\010\003\uff7c\024\uff7c\047\u016f" +
    "\001\002\000\010\003\uff7e\024\uff7e\047\u016d\001\002\000" +
    "\004\006\u016a\001\002\000\006\003\uff7f\024\uff7f\001\002" +
    "\000\004\006\u016a\001\002\000\006\003\uff7d\024\uff7d\001" +
    "\002\000\012\025\uff92\046\u0175\057\u0174\061\u0173\001\002" +
    "\000\004\025\uff90\001\002\000\012\025\uff78\046\u0175\057" +
    "\uff78\061\u0173\001\002\000\006\003\u017a\023\u0179\001\002" +
    "\000\012\025\uff79\046\u0175\057\uff79\061\u0173\001\002\000" +
    "\006\025\uff91\057\u0174\001\002\000\004\025\uff8f\001\002" +
    "\000\006\025\uff7b\057\uff7b\001\002\000\004\006\u017e\001" +
    "\002\000\004\006\u017b\001\002\000\004\033\u017c\001\002" +
    "\000\004\024\u017d\001\002\000\004\025\uff81\001\002\000" +
    "\006\003\u017f\033\u0180\001\002\000\004\024\u0182\001\002" +
    "\000\004\024\u0181\001\002\000\004\025\uff82\001\002\000" +
    "\004\025\uff80\001\002\000\006\025\uff7a\057\uff7a\001\002" +
    "\000\006\003\u0185\024\u0186\001\002\000\012\025\uff8e\046" +
    "\u0175\057\u0174\061\u0173\001\002\000\012\025\uff9a\046\u0175" +
    "\057\u0174\061\u0173\001\002\000\004\025\uff98\001\002\000" +
    "\006\025\uff99\057\u0174\001\002\000\004\025\uff97\001\002" +
    "\000\004\025\uff8c\001\002\000\006\025\uff8d\057\u0174\001" +
    "\002\000\004\025\uff8b\001\002\000\004\006\u016a\001\002" +
    "\000\004\024\u018f\001\002\000\012\025\uff96\046\u0175\057" +
    "\u0174\061\u0173\001\002\000\004\025\uff94\001\002\000\006" +
    "\025\uff95\057\u0174\001\002\000\004\025\uff93\001\002\000" +
    "\004\032\u0194\001\002\000\004\040\015\001\002\000\004" +
    "\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0193\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\022\022\023\024\025" +
    "\021\027\031\033\026\001\001\000\002\001\001\000\006" +
    "\027\u0160\033\026\001\001\000\012\023\u014b\025\u0149\027" +
    "\u014a\033\026\001\001\000\002\001\001\000\010\025\346" +
    "\027\347\033\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\034\001\001\000\002" +
    "\001\001\000\004\003\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\044\001\001\000\004\023\041\001\001\000\002\001" +
    "\001\000\004\025\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\046\001\001\000\002\001\001\000" +
    "\004\023\050\001\001\000\002\001\001\000\004\025\052" +
    "\001\001\000\002\001\001\000\042\004\057\006\067\007" +
    "\071\013\073\014\062\015\075\016\105\023\074\026\054" +
    "\032\063\034\076\037\111\040\104\041\103\043\107\045" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\004\057\013\073\026\054\034\076\037\263\041\103\043" +
    "\107\045\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\237\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\004\057\013\073\026\054\034\076" +
    "\037\236\041\103\043\107\045\070\001\001\000\040\004" +
    "\057\006\067\007\071\013\073\014\062\015\075\016\105" +
    "\026\054\032\223\034\076\037\111\040\104\041\103\043" +
    "\107\045\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\004\057\013\073\026\054\034" +
    "\076\037\176\041\103\043\107\045\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\145\044\150\001" +
    "\001\000\040\004\057\006\067\007\071\013\073\014\062" +
    "\015\075\016\105\026\054\032\144\034\076\037\111\040" +
    "\104\041\103\043\107\045\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\004\057\006\067\007\071\013\073" +
    "\014\062\015\075\016\105\026\054\032\113\034\076\037" +
    "\111\040\104\041\103\043\107\045\070\001\001\000\002" +
    "\001\001\000\022\004\057\013\073\026\054\034\076\037" +
    "\115\041\103\043\107\045\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\004\057\006\124\007\127\013" +
    "\073\014\121\015\130\016\132\020\122\026\054\034\076" +
    "\037\133\041\103\042\126\043\107\045\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\004\057\006\124" +
    "\007\127\013\073\014\121\015\130\016\132\020\122\026" +
    "\054\034\076\037\133\041\103\042\142\043\107\045\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\004\057\013\073\026\054\034\076\037\136\041" +
    "\103\043\107\045\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\004\057\006\124\007\127\013\073\014" +
    "\121\015\130\016\132\020\122\026\054\034\076\037\133" +
    "\041\103\042\135\043\107\045\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\004\057\013\073\026\054\034\076" +
    "\037\157\041\103\043\107\045\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\004\057\013\073\026\054" +
    "\034\076\037\156\041\103\043\107\045\070\001\001\000" +
    "\002\001\001\000\022\004\057\013\073\026\054\034\076" +
    "\037\155\041\103\043\107\045\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\004\057\006\124\007\127\013" +
    "\073\014\121\015\130\016\132\020\122\026\054\034\076" +
    "\037\133\041\103\042\162\043\107\045\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\004\057\013\073\026\054\034\076\037" +
    "\166\041\103\043\107\045\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\004\057\013\073\026\054\034\076\037\173\041\103" +
    "\043\107\045\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\027\201\033\026\001\001\000\002\001\001\000" +
    "\022\004\057\013\073\026\054\034\076\037\203\041\103" +
    "\043\107\045\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\004\057\006\124\007\127\013\073\014\121" +
    "\015\130\016\132\020\122\026\054\034\076\037\133\041" +
    "\103\042\207\043\107\045\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\004\057\006\124\007\127\013\073\014\121\015\130" +
    "\016\132\020\122\026\054\034\076\037\133\041\103\042" +
    "\214\043\107\045\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\004" +
    "\057\006\124\007\127\013\073\014\121\015\130\016\132" +
    "\020\122\026\054\034\076\037\133\041\103\042\221\043" +
    "\107\045\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\004\057\013" +
    "\073\026\054\034\076\037\225\041\103\043\107\045\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\027" +
    "\230\033\026\001\001\000\002\001\001\000\022\004\057" +
    "\013\073\026\054\034\076\037\232\041\103\043\107\045" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\027\235\033\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\004\057\013\073\026\054\034\076\037\242" +
    "\041\103\043\107\045\070\001\001\000\022\004\057\013" +
    "\073\026\054\034\076\037\241\041\103\043\107\045\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\004" +
    "\057\013\073\026\054\034\076\036\245\037\246\041\103" +
    "\043\107\045\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\004\057\013\073\026\054" +
    "\034\076\036\250\037\246\041\103\043\107\045\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\004\057" +
    "\013\073\026\054\034\076\036\254\037\246\041\103\043" +
    "\107\045\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\004\057\013\073\026\054\034" +
    "\076\037\257\041\103\043\107\045\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\027\262\033\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\004\057\013\073\026\054\034\076\037\266\041" +
    "\103\043\107\045\070\001\001\000\002\001\001\000\022" +
    "\004\057\013\073\026\054\034\076\037\270\041\103\043" +
    "\107\045\070\001\001\000\002\001\001\000\012\021\272" +
    "\026\054\035\273\041\274\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\044\301\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\004\057\013\073\026\054\034" +
    "\076\037\300\041\103\043\107\045\070\001\001\000\002" +
    "\001\001\000\022\004\057\013\073\026\054\034\076\037" +
    "\302\041\103\043\107\045\070\001\001\000\002\001\001" +
    "\000\022\004\057\013\073\026\054\034\076\037\304\041" +
    "\103\043\107\045\070\001\001\000\002\001\001\000\022" +
    "\004\057\013\073\026\054\034\076\037\306\041\103\043" +
    "\107\045\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\004\057\006\124\007\127\013\073\014\121\015" +
    "\130\016\132\020\122\026\054\034\076\037\133\041\103" +
    "\042\312\043\107\045\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\026\054\041\315" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\333\001\001\000\004\010\323\001\001" +
    "\000\004\022\331\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\326\001\001\000\002\001\001\000\004" +
    "\022\330\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\336\001\001\000\002\001\001\000\004\022\335" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\341\001\001\000\004\022\344\001\001\000\002\001\001" +
    "\000\004\022\343\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\357\001\001\000\006\027\353\033\026" +
    "\001\001\000\002\001\001\000\004\003\351\001\001\000" +
    "\002\001\001\000\004\003\356\001\001\000\002\001\001" +
    "\000\004\003\355\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\u010c" +
    "\001\001\000\002\001\001\000\004\024\364\001\001\000" +
    "\002\001\001\000\004\023\370\001\001\000\022\004\057" +
    "\013\073\026\054\034\076\037\367\041\103\043\107\045" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\372\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\u0105\001\001" +
    "\000\004\024\u0100\001\001\000\002\001\001\000\004\023" +
    "\u0102\001\001\000\002\001\001\000\004\023\u0104\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\u0107\001" +
    "\001\000\002\001\001\000\004\023\u0109\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\u010c\001\001\000" +
    "\002\001\001\000\004\023\u011c\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\u0111\001\001\000\002\001" +
    "\001\000\004\023\u0113\001\001\000\002\001\001\000\004" +
    "\023\u0115\001\001\000\002\001\001\000\004\024\u0117\001" +
    "\001\000\002\001\001\000\004\023\u0119\001\001\000\002" +
    "\001\001\000\004\023\u011b\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\u011e\001\001\000\002\001\001" +
    "\000\004\024\u0126\001\001\000\004\024\u0121\001\001\000" +
    "\002\001\001\000\004\023\u0123\001\001\000\002\001\001" +
    "\000\004\023\u0125\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\u0128\001\001\000\002\001\001\000\004" +
    "\023\u012a\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\u012d\001\001\000\002\001\001\000\004\023\u012f" +
    "\001\001\000\002\001\001\000\004\023\u0131\001\001\000" +
    "\002\001\001\000\004\024\u0133\001\001\000\002\001\001" +
    "\000\004\023\u0135\001\001\000\002\001\001\000\004\023" +
    "\u0137\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\u0117\001\001\000\002\001\001\000" +
    "\004\024\u0143\001\001\000\004\024\u013e\001\001\000\002" +
    "\001\001\000\004\023\u0140\001\001\000\002\001\001\000" +
    "\004\023\u0142\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\u0145\001\001\000\002\001\001\000\004\023" +
    "\u0147\001\001\000\002\001\001\000\004\003\u015e\001\001" +
    "\000\006\027\u015a\033\026\001\001\000\002\001\001\000" +
    "\010\025\u014d\027\u014e\033\026\001\001\000\004\003\u0156" +
    "\001\001\000\006\027\u0152\033\026\001\001\000\002\001" +
    "\001\000\004\003\u0150\001\001\000\002\001\001\000\004" +
    "\003\u0155\001\001\000\002\001\001\000\004\003\u0154\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\u0158\001\001\000\002\001\001\000\004\003" +
    "\u015d\001\001\000\002\001\001\000\004\003\u015c\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\u0163\001\001\000\002\001\001\000\004\003\u0162" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\u0183\001\001\000\004" +
    "\011\u0168\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\u016d\001\001" +
    "\000\002\001\001\000\004\011\u016f\001\001\000\002\001" +
    "\001\000\006\030\u0175\031\u0171\001\001\000\002\001\001" +
    "\000\004\030\u0182\001\001\000\002\001\001\000\004\030" +
    "\u0177\001\001\000\004\031\u0176\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\030\u018a\031\u0189\001\001\000\006\030\u0187\031" +
    "\u0186\001\001\000\002\001\001\000\004\031\u0188\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\u018b\001" +
    "\001\000\002\001\001\000\004\011\u018d\001\001\000\002" +
    "\001\001\000\006\030\u0190\031\u018f\001\001\000\002\001" +
    "\001\000\004\031\u0191\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\u0194\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  public ArrayList<Symbol> errores = new ArrayList<>();
  public ArrayList<String> erroresStr = new ArrayList<>();
  
  public void syntax_error(Symbol s) {
    System.out.println("ERROR EN " + s.value + " " + Integer.toString(s.right + 1) + ": " + Integer.toString(s.left + 1) );
    String cadena = "";
    for (int i = this.stack.size() - 1; i > 0; i--) {
      Symbol sp = this.stack.get(i);
       
      System.out.println(sp.value + " " + Integer.toString(sp.right + 1) + ": " + Integer.toString(sp.left + 1) );
      cadena = sp.value + " " + cadena;
      System.out.println(cadena );
        if(sym.T_dato == sp.sym){
            
            for(int j = i-1; j > 0; j--){
                
                sp = this.stack.get(j);
                //cadena = sp.value + " " + cadena;
                System.out.println(sp.value + " " + Integer.toString(sp.right + 1) + ": " + Integer.toString(sp.left + 1) );
                System.out.println(cadena );
                if ("struct".equals(sp.value)) {
                cadena += "~" + s.value + "~ ...";
                Symbol sp2 = new Symbol(sp.sym, sp.left, sp.right, cadena);
                errores.add(sp2);
                erroresStr.add("Variable_Struct");
                break;
                }
                if ("function".equals(sp.value)) {
                cadena += "~" + s.value + "~ ...";
                Symbol sp2 = new Symbol(sp.sym, sp.left, sp.right, cadena);
                errores.add(sp2);
                erroresStr.add("Parametro_Function");
                break;
                }
                if ("returns".equals(sp.value)) {
                cadena += "~" + s.value + "~ ...";
                Symbol sp2 = new Symbol(sp.sym, sp.left, sp.right, cadena);
                errores.add(sp2);
                erroresStr.add("Returns_Function");
                break;
                }
                
            }
            break;  
        }
      if ("enum".equals(sp.value)) {
        System.out.println("Soy un error de enum xd");
        //System.out.println("Soy un error de enum xd");
        cadena += "~" + s.value + "~ ...";
        //if (this.lookahead != null) for (Symbol x : this.lookahead) System.out.println(x.value);
        Symbol sp2 = new Symbol(sp.sym, sp.left, sp.right, cadena);
        errores.add(sp2);
        erroresStr.add("Enum");
        break;
      }
      if ("struct".equals(sp.value)) {
        //System.out.println("Soy un error de struct chama");
        cadena += "~" + s.value + "~ ...";
        //if (this.lookahead != null) for (Symbol x : this.lookahead) System.out.println(x.value);
        Symbol sp2 = new Symbol(sp.sym, sp.left, sp.right, cadena);
        errores.add(sp2);
        erroresStr.add("Struct");
        break;
      }
      if ("function".equals(sp.value)) {
        System.out.println("Soy un error de function chama");
        cadena += "~" + s.value + "~ ...";
        System.out.println(cadena);
        //if (this.lookahead != null) for (Symbol x : this.lookahead) System.out.println(x.value);
        Symbol sp2 = new Symbol(sp.sym, sp.left, sp.right, cadena);
        errores.add(sp2);
        erroresStr.add("Function");
        break;
      }
        }
  }
  @Override
  public int error_sync_size() {
    return 2;
  }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // SENTENCIA_FOR ::= ASIGNACION_COMPLEJA P_coma EXPRESION P_coma EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a CUERPO_EC Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // DO_WHILE ::= Do Llave_a Llave_c While Parentesis_a EXPRESION Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // DO_WHILE ::= Do Llave_a CUERPO_EC Llave_c While Parentesis_a EXPRESION Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // WHILE ::= While Parentesis_a EXPRESION Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // WHILE ::= While Parentesis_a EXPRESION Parentesis_c Llave_a CUERPO_EC Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // IF_ELSE ::= If Parentesis_a EXPRESION Parentesis_c Llave_a Llave_c Else Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // IF_ELSE ::= If Parentesis_a EXPRESION Parentesis_c Llave_a Llave_c Else Llave_a CUERPO_EC Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // IF_ELSE ::= If Parentesis_a EXPRESION Parentesis_c Llave_a CUERPO_EC Llave_c Else Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // IF_ELSE ::= If Parentesis_a EXPRESION Parentesis_c Llave_a CUERPO_EC Llave_c Else Llave_a CUERPO_EC Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // EXPRESION_BOOLEANA ::= P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEANA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // IF ::= If Parentesis_a EXPRESION Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // IF ::= If Parentesis_a EXPRESION Parentesis_c Llave_a CUERPO_EC Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // OP_TERNARIO ::= Parentesis_a EXPRESION Parentesis_c Pregunta EXPRESION Dos_Puntos EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_TERNARIO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // CUERPO_EC ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO_EC",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // CUERPO_EC ::= EXPRESION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO_EC",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // CUERPO_EC ::= SENTENCIA CUERPO_EC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO_EC",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // CUERPO_EC ::= EXPRESION P_coma CUERPO_EC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO_EC",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // SENTENCIA ::= Return EXPRESION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // SENTENCIA ::= Continue P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // SENTENCIA ::= Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // ESTRUCTURA_CONTROL ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CONTROL",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // ESTRUCTURA_CONTROL ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CONTROL",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // ESTRUCTURA_CONTROL ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CONTROL",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // ESTRUCTURA_CONTROL ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CONTROL",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // ESTRUCTURA_CONTROL ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CONTROL",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // OP_UNARIO ::= Not 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_UNARIO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // OP_UNARIO ::= Menos 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_UNARIO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // OP_UNARIO ::= Mas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_UNARIO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // OP_ARITMETICO ::= Menos 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // OP_ARITMETICO ::= Mas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // OP_ARITMETICO ::= Op_Aritmetico 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // EXPRESION_AUX ::= IDENTIFICADOR_CUERPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_AUX",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // EXPRESION_AUX ::= LITERAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_AUX",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // EXPRESION_AUX ::= IDENTIFICADOR_CUERPO Op_logico EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_AUX",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // EXPRESION_AUX ::= LITERAL Op_logico EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_AUX",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // EXPRESION_AUX ::= IDENTIFICADOR_CUERPO OP_ARITMETICO EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_AUX",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // EXPRESION_AUX ::= LITERAL OP_ARITMETICO EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_AUX",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // EXPRESION_AUX ::= OP_UNARIO EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_AUX",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // EXPRESION_AUX ::= Parentesis_a EXPRESION Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_AUX",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // EXPRESION ::= OP_TERNARIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // EXPRESION ::= ASIGNACION_BASICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // EXPRESION ::= EXPRESION_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // LITERAL ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // LITERAL ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // LITERAL ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // ARGUMENTOS ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // ARGUMENTOS ::= EXPRESION Coma ARGUMENTOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // ATRIBUCION_IGUAL ::= Igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATRIBUCION_IGUAL",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // ATRIBUCION_IGUAL ::= Op_atribucion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATRIBUCION_IGUAL",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // ASIGNACION_COMPLEJA ::= T_dato Identificador Igual EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION_COMPLEJA",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // ASIGNACION_COMPLEJA ::= IDENTIFICADOR_CUERPO ATRIBUCION_IGUAL EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION_COMPLEJA",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // ASIGNACION_BASICA ::= IDENTIFICADOR_CUERPO ATRIBUCION_IGUAL EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION_BASICA",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // IDENTIFICADOR_CUERPO ::= IDENTIFICADOR_COMPLEJO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_CUERPO",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // IDENTIFICADOR_CUERPO ::= IDENTIFICADOR_COMPLEJO Punto IDENTIFICADOR_CUERPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_CUERPO",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // IDENTIFICADOR_COMPLEJO ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_COMPLEJO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // IDENTIFICADOR_COMPLEJO ::= Identificador Parentesis_a ARGUMENTOS Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_COMPLEJO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // IDENTIFICADOR_COMPLEJO ::= Identificador Parentesis_a Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_COMPLEJO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // IDENTIFICADOR_COMPLEJO ::= This 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_COMPLEJO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // IDENTIFICADOR_COMPLEJO ::= This Parentesis_a ARGUMENTOS Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_COMPLEJO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // IDENTIFICADOR_COMPLEJO ::= This Parentesis_a Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_COMPLEJO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // CUERPO ::= ESTRUCTURA_CONTROL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // CUERPO ::= EXPRESION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // CUERPO ::= ESTRUCTURA_CONTROL CUERPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // CUERPO ::= EXPRESION P_coma CUERPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // MODIFICADORES ::= Visibilidad 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // MODIFICADORES ::= Modificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // MODIFICADORES ::= Visibilidad MODIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // MODIFICADORES ::= Modificador MODIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // PARAMETROS ::= T_dato error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // PARAMETROS ::= T_dato error Coma PARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // PARAMETROS ::= T_dato Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // PARAMETROS ::= T_dato Identificador Coma PARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // RETURNS ::= Returns Parentesis_a T_dato error Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURNS",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // RETURNS ::= Returns error T_dato Identificador Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURNS",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // RETURNS ::= Returns Parentesis_a T_dato Identificador Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURNS",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // FUNCION ::= FUNCION_HEADER Llave_a Return EXPRESION P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // FUNCION ::= FUNCION_HEADER Llave_a CUERPO Return EXPRESION P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // FUNCION ::= FUNCION_HEADER Llave_a VARIABLES CUERPO Return EXPRESION P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // FUNCION ::= FUNCION_HEADER Llave_a VARIABLES Return EXPRESION P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // FUNCION ::= FUNCION_HEADER Llave_a Return EXPRESION P_coma Llave_c FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // FUNCION ::= FUNCION_HEADER Llave_a CUERPO Return EXPRESION P_coma Llave_c FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // FUNCION ::= FUNCION_HEADER Llave_a VARIABLES CUERPO Return EXPRESION P_coma Llave_c FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // FUNCION ::= FUNCION_HEADER Llave_a VARIABLES Return EXPRESION P_coma Llave_c FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // FUNCION_HEADER ::= Function Identificador Parentesis_a PARAMETROS error MODIFICADORES RETURNS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_HEADER",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // FUNCION_HEADER ::= Function Identificador Parentesis_a PARAMETROS error RETURNS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_HEADER",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // FUNCION_HEADER ::= Function Identificador Parentesis_a PARAMETROS error MODIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_HEADER",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // FUNCION_HEADER ::= Function Identificador Parentesis_a PARAMETROS error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_HEADER",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // FUNCION_HEADER ::= Function Identificador error PARAMETROS Parentesis_c MODIFICADORES RETURNS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_HEADER",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // FUNCION_HEADER ::= Function Identificador error PARAMETROS Parentesis_c RETURNS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_HEADER",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // FUNCION_HEADER ::= Function Identificador error PARAMETROS Parentesis_c MODIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_HEADER",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // FUNCION_HEADER ::= Function Identificador error PARAMETROS Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_HEADER",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // FUNCION_HEADER ::= Function error Parentesis_a PARAMETROS Parentesis_c MODIFICADORES RETURNS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_HEADER",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // FUNCION_HEADER ::= Function error Parentesis_a PARAMETROS Parentesis_c RETURNS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_HEADER",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // FUNCION_HEADER ::= Function error Parentesis_a PARAMETROS Parentesis_c MODIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_HEADER",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // FUNCION_HEADER ::= Function error Parentesis_a PARAMETROS Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_HEADER",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // FUNCION_HEADER ::= Function Identificador Parentesis_a PARAMETROS Parentesis_c MODIFICADORES RETURNS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_HEADER",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // FUNCION_HEADER ::= Function Identificador Parentesis_a PARAMETROS Parentesis_c RETURNS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_HEADER",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // FUNCION_HEADER ::= Function Identificador Parentesis_a PARAMETROS Parentesis_c MODIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_HEADER",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // FUNCION_HEADER ::= Function Identificador Parentesis_a PARAMETROS Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_HEADER",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ESTRUCTURA ::= Struct Identificador error VARIABLES Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ESTRUCTURA ::= Struct error Llave_a VARIABLES Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ESTRUCTURA ::= Struct Identificador error VARIABLES Llave_c ESTRUCTURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ESTRUCTURA ::= Struct error Llave_a VARIABLES Llave_c ESTRUCTURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ESTRUCTURA ::= Struct Identificador Llave_a VARIABLES Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ESTRUCTURA ::= Struct Identificador Llave_a VARIABLES Llave_c ESTRUCTURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ASIGNACION ::= Igual EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // VARIABLES ::= T_dato Corchete_a error Identificador ASIGNACION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // VARIABLES ::= T_dato Corchete_a error Visibilidad Identificador ASIGNACION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // VARIABLES ::= T_dato Corchete_a error Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // VARIABLES ::= T_dato Corchete_a error Visibilidad Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // VARIABLES ::= T_dato Corchete_a error Identificador ASIGNACION P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // VARIABLES ::= T_dato Corchete_a error Visibilidad Identificador ASIGNACION P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // VARIABLES ::= T_dato Corchete_a error Identificador P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // VARIABLES ::= T_dato Corchete_a error Visibilidad Identificador P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // VARIABLES ::= T_dato error Corchete_c Identificador ASIGNACION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // VARIABLES ::= T_dato error Corchete_c Visibilidad Identificador ASIGNACION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // VARIABLES ::= T_dato error Corchete_c Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // VARIABLES ::= T_dato error Corchete_c Visibilidad Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // VARIABLES ::= T_dato error Corchete_c Identificador ASIGNACION P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // VARIABLES ::= T_dato error Corchete_c Visibilidad Identificador ASIGNACION P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // VARIABLES ::= T_dato error Corchete_c Identificador P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // VARIABLES ::= T_dato Corchete_a Corchete_c error ASIGNACION P_coma T_dato error Corchete_c Visibilidad Identificador P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // VARIABLES ::= T_dato Corchete_a Corchete_c Visibilidad error ASIGNACION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // VARIABLES ::= T_dato error ASIGNACION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // VARIABLES ::= T_dato Visibilidad error ASIGNACION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // VARIABLES ::= T_dato Corchete_a Corchete_c error P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // VARIABLES ::= T_dato Corchete_a Corchete_c Visibilidad error P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // VARIABLES ::= T_dato error P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // VARIABLES ::= T_dato Visibilidad error P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // VARIABLES ::= T_dato Corchete_a Corchete_c error ASIGNACION P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // VARIABLES ::= T_dato Corchete_a Corchete_c Visibilidad error ASIGNACION P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // VARIABLES ::= T_dato error ASIGNACION P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // VARIABLES ::= T_dato Visibilidad error ASIGNACION P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // VARIABLES ::= T_dato Corchete_a Corchete_c error P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // VARIABLES ::= T_dato Corchete_a Corchete_c Visibilidad error P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VARIABLES ::= T_dato error P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VARIABLES ::= T_dato Visibilidad error P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VARIABLES ::= T_dato Corchete_a Corchete_c Identificador ASIGNACION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // VARIABLES ::= T_dato Corchete_a Corchete_c Visibilidad Identificador ASIGNACION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // VARIABLES ::= T_dato Identificador ASIGNACION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // VARIABLES ::= T_dato Visibilidad Identificador ASIGNACION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // VARIABLES ::= T_dato Corchete_a Corchete_c Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // VARIABLES ::= T_dato Corchete_a Corchete_c Visibilidad Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // VARIABLES ::= T_dato Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // VARIABLES ::= T_dato Visibilidad Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // VARIABLES ::= T_dato Corchete_a Corchete_c Identificador ASIGNACION P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // VARIABLES ::= T_dato Corchete_a Corchete_c Visibilidad Identificador ASIGNACION P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // VARIABLES ::= T_dato Identificador ASIGNACION P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // VARIABLES ::= T_dato Visibilidad Identificador ASIGNACION P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VARIABLES ::= T_dato Corchete_a Corchete_c Identificador P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VARIABLES ::= T_dato Corchete_a Corchete_c Visibilidad Identificador P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // VARIABLES ::= T_dato Identificador P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VARIABLES ::= T_dato Visibilidad Identificador P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LISTA ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LISTA ::= Identificador Coma LISTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ENUMERADOR ::= Enum Identificador error Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ENUMERADOR ::= Enum Identificador error LISTA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ENUMERADOR ::= Enum error Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ENUMERADOR ::= Enum error Llave_a LISTA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ENUMERADOR ::= Enum Identificador error Llave_c ENUMERADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ENUMERADOR ::= Enum Identificador error LISTA Llave_c ENUMERADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ENUMERADOR ::= Enum error Llave_a Llave_c ENUMERADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ENUMERADOR ::= Enum error Llave_a LISTA Llave_c ENUMERADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ENUMERADOR ::= Enum Identificador Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ENUMERADOR ::= Enum Identificador Llave_a LISTA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ENUMERADOR ::= Enum Identificador Llave_a Llave_c ENUMERADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ENUMERADOR ::= Enum Identificador Llave_a LISTA Llave_c ENUMERADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONTRATO ::= Contract Identificador Llave_a FUNCION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONTRATO ::= Contract Identificador Llave_a ESTRUCTURA FUNCION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONTRATO ::= Contract Identificador Llave_a ESTRUCTURA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONTRATO ::= Contract Identificador Llave_a VARIABLES ESTRUCTURA FUNCION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONTRATO ::= Contract Identificador Llave_a VARIABLES FUNCION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CONTRATO ::= Contract Identificador Llave_a VARIABLES ESTRUCTURA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CONTRATO ::= Contract Identificador Llave_a VARIABLES Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR VARIABLES ESTRUCTURA FUNCION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR ESTRUCTURA FUNCION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR VARIABLES FUNCION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR VARIABLES ESTRUCTURA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR FUNCION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR ESTRUCTURA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR VARIABLES Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CONTRATO ::= Contract Identificador Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CONTRATO ::= Contract Identificador Llave_a FUNCION Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CONTRATO ::= Contract Identificador Llave_a ESTRUCTURA FUNCION Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CONTRATO ::= Contract Identificador Llave_a ESTRUCTURA Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONTRATO ::= Contract Identificador Llave_a VARIABLES ESTRUCTURA FUNCION Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CONTRATO ::= Contract Identificador Llave_a VARIABLES FUNCION Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CONTRATO ::= Contract Identificador Llave_a VARIABLES ESTRUCTURA Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CONTRATO ::= Contract Identificador Llave_a VARIABLES Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR VARIABLES ESTRUCTURA FUNCION Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR ESTRUCTURA FUNCION Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR VARIABLES FUNCION Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR VARIABLES ESTRUCTURA Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR FUNCION Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR ESTRUCTURA Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR VARIABLES Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CONTRATO ::= Contract Identificador Llave_a Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Pragma Solidity Caret Numero Numero P_coma CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Pragma Solidity Numero Numero P_coma CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

