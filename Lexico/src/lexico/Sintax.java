
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Jul 24 01:56:57 CST 2020
//----------------------------------------------------

package lexico;

import java_cup.runtime.Symbol;
import java.util.Stack;
import java.util.ArrayList;
import java.util.Iterator;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Jul 24 01:56:57 CST 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0108\000\002\002\004\000\002\002\010\000\002\002" +
    "\011\000\002\002\006\000\002\002\012\000\002\003\007" +
    "\000\002\003\010\000\002\003\011\000\002\003\011\000" +
    "\002\003\011\000\002\003\012\000\002\003\012\000\002" +
    "\003\012\000\002\003\013\000\002\003\010\000\002\003" +
    "\011\000\002\003\011\000\002\003\012\000\002\003\010" +
    "\000\002\003\011\000\002\003\010\000\002\003\006\000" +
    "\002\003\007\000\002\003\010\000\002\003\010\000\002" +
    "\003\010\000\002\003\011\000\002\003\011\000\002\003" +
    "\011\000\002\003\012\000\002\003\007\000\002\003\010" +
    "\000\002\003\010\000\002\003\011\000\002\003\007\000" +
    "\002\003\010\000\002\003\007\000\002\003\007\000\002" +
    "\003\010\000\002\003\011\000\002\003\011\000\002\003" +
    "\011\000\002\003\012\000\002\003\012\000\002\003\012" +
    "\000\002\003\013\000\002\003\010\000\002\003\011\000" +
    "\002\003\011\000\002\003\012\000\002\003\010\000\002" +
    "\003\011\000\002\003\010\000\002\003\006\000\002\003" +
    "\007\000\002\003\010\000\002\003\010\000\002\003\010" +
    "\000\002\003\011\000\002\003\011\000\002\003\011\000" +
    "\002\003\012\000\002\003\007\000\002\003\010\000\002" +
    "\003\010\000\002\003\011\000\002\003\007\000\002\003" +
    "\010\000\002\003\007\000\002\022\010\000\002\022\007" +
    "\000\002\022\007\000\002\022\006\000\002\022\010\000" +
    "\002\022\007\000\002\022\010\000\002\022\007\000\002" +
    "\022\007\000\002\022\006\000\002\022\007\000\002\022" +
    "\006\000\002\010\005\000\002\010\003\000\002\023\007" +
    "\000\002\023\006\000\002\023\011\000\002\023\010\000" +
    "\002\023\010\000\002\023\007\000\002\023\012\000\002" +
    "\023\011\000\002\023\006\000\002\023\005\000\002\023" +
    "\010\000\002\023\007\000\002\023\007\000\002\023\006" +
    "\000\002\023\011\000\002\023\010\000\002\023\007\000" +
    "\002\023\006\000\002\023\011\000\002\023\010\000\002" +
    "\023\010\000\002\023\007\000\002\023\012\000\002\023" +
    "\011\000\002\023\006\000\002\023\005\000\002\023\010" +
    "\000\002\023\007\000\002\023\007\000\002\023\006\000" +
    "\002\023\011\000\002\023\017\000\002\023\010\000\002" +
    "\023\012\000\002\023\011\000\002\023\010\000\002\023" +
    "\007\000\002\023\011\000\002\023\010\000\002\023\011" +
    "\000\002\023\010\000\002\023\012\000\002\023\011\000" +
    "\002\023\010\000\002\023\007\000\002\023\011\000\002" +
    "\023\010\000\002\024\004\000\002\025\010\000\002\025" +
    "\007\000\002\025\010\000\002\025\010\000\002\025\007" +
    "\000\002\025\007\000\002\033\007\000\002\033\010\000" +
    "\002\033\010\000\002\033\011\000\002\033\007\000\002" +
    "\033\010\000\002\033\010\000\002\033\011\000\002\033" +
    "\007\000\002\033\010\000\002\033\010\000\002\033\011" +
    "\000\002\033\007\000\002\033\010\000\002\033\010\000" +
    "\002\033\011\000\002\027\007\000\002\027\010\000\002" +
    "\027\007\000\002\027\006\000\002\027\006\000\002\027" +
    "\007\000\002\027\006\000\002\027\005\000\002\031\007" +
    "\000\002\031\007\000\002\031\007\000\002\011\006\000" +
    "\002\011\004\000\002\011\006\000\002\011\004\000\002" +
    "\030\004\000\002\030\004\000\002\030\003\000\002\030" +
    "\003\000\002\032\005\000\002\032\004\000\002\032\004" +
    "\000\002\032\003\000\002\026\005\000\002\026\006\000" +
    "\002\026\003\000\002\026\005\000\002\026\006\000\002" +
    "\026\003\000\002\041\005\000\002\041\003\000\002\034" +
    "\005\000\002\035\005\000\002\035\006\000\002\044\003" +
    "\000\002\044\003\000\002\036\005\000\002\036\003\000" +
    "\002\045\003\000\002\045\003\000\002\045\003\000\002" +
    "\037\003\000\002\037\003\000\002\037\003\000\002\043" +
    "\005\000\002\043\004\000\002\043\005\000\002\043\005" +
    "\000\002\043\005\000\002\043\005\000\002\043\003\000" +
    "\002\043\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\005\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\004\000\002\020" +
    "\004\000\002\020\005\000\002\042\005\000\002\042\004" +
    "\000\002\042\004\000\002\042\003\000\002\004\011\000" +
    "\002\006\011\000\002\006\010\000\002\006\010\000\002" +
    "\006\007\000\002\006\011\000\002\006\010\000\002\017" +
    "\003\000\002\007\015\000\002\007\014\000\002\007\014" +
    "\000\002\007\013\000\002\007\014\000\002\007\013\000" +
    "\002\007\013\000\002\007\012\000\002\014\011\000\002" +
    "\014\010\000\002\014\010\000\002\014\007\000\002\014" +
    "\011\000\002\014\010\000\002\015\013\000\002\015\012" +
    "\000\002\015\013\000\002\015\012\000\002\015\010\000" +
    "\002\015\007\000\002\016\011\000\002\016\010\000\002" +
    "\016\010\000\002\016\007\000\002\016\011\000\002\016" +
    "\010\000\002\021\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01fa\000\004\042\004\001\002\000\006\003\007\043" +
    "\010\001\002\000\004\002\006\001\002\000\004\002\001" +
    "\001\002\000\004\032\u01fb\001\002\000\006\037\011\050" +
    "\012\001\002\000\004\037\u01f8\001\002\000\004\037\013" +
    "\001\002\000\004\037\014\001\002\000\004\032\015\001" +
    "\002\000\006\003\016\040\017\001\002\000\004\040\017" +
    "\001\002\000\006\003\021\033\022\001\002\000\004\002" +
    "\uffff\001\002\000\004\025\u01c7\001\002\000\004\025\023" +
    "\001\002\000\014\006\027\026\033\041\031\044\034\045" +
    "\024\001\002\000\006\003\u0199\033\u019a\001\002\000\006" +
    "\026\u0194\045\024\001\002\000\012\006\027\026\u017d\044" +
    "\034\045\024\001\002\000\012\003\u0126\027\u0127\033\u0128" +
    "\061\u0125\001\002\000\010\026\u011a\044\034\045\024\001" +
    "\002\000\006\003\u0103\033\u0104\001\002\000\004\025\057" +
    "\001\002\000\006\002\uffec\040\017\001\002\000\006\003" +
    "\040\033\041\001\002\000\004\026\036\001\002\000\006" +
    "\002\uffdd\040\017\001\002\000\004\002\uffed\001\002\000" +
    "\004\025\052\001\002\000\006\003\043\025\042\001\002" +
    "\000\004\006\027\001\002\000\004\006\027\001\002\000" +
    "\004\026\045\001\002\000\010\026\uff79\044\034\045\uff79" +
    "\001\002\000\006\026\uff7b\045\uff7b\001\002\000\004\026" +
    "\050\001\002\000\010\026\uff7d\044\034\045\uff7d\001\002" +
    "\000\006\026\uff7e\045\uff7e\001\002\000\004\006\027\001" +
    "\002\000\004\026\054\001\002\000\010\026\uff7a\044\034" +
    "\045\uff7a\001\002\000\006\026\uff7c\045\uff7c\001\002\000" +
    "\004\002\ufffc\001\002\000\042\006\027\010\104\012\107" +
    "\013\113\014\061\022\070\023\062\026\075\033\071\034" +
    "\065\035\106\036\077\037\064\052\072\055\115\056\105" +
    "\001\002\000\030\015\uff4a\016\uff4a\017\uff4a\021\uff4a\024" +
    "\uff4a\032\uff4a\034\uff4a\035\uff4a\047\uff4a\051\u0101\060\uff4a" +
    "\001\002\000\006\003\345\023\344\001\002\000\024\022" +
    "\070\023\062\033\071\034\065\035\106\036\077\037\064" +
    "\052\072\055\115\001\002\000\012\015\uff3d\024\uff3d\032" +
    "\uff3d\047\uff3d\001\002\000\022\015\uff42\017\uff42\024\uff42" +
    "\032\uff42\034\uff42\035\uff42\047\uff42\060\uff42\001\002\000" +
    "\024\022\uff31\023\uff31\033\uff31\034\uff31\035\uff31\036\uff31" +
    "\037\uff31\052\uff31\055\uff31\001\002\000\040\010\uff2c\012" +
    "\uff2c\013\uff2c\014\uff2c\022\uff2c\023\uff2c\026\uff2c\033\uff2c" +
    "\034\uff2c\035\uff2c\036\uff2c\037\uff2c\052\uff2c\055\uff2c\056" +
    "\uff2c\001\002\000\004\026\334\001\002\000\022\015\uff40" +
    "\017\uff40\024\uff40\032\uff40\034\uff40\035\uff40\047\uff40\060" +
    "\uff40\001\002\000\032\015\uff4c\016\uff4c\017\uff4c\021\uff4c" +
    "\023\330\024\uff4c\032\uff4c\034\uff4c\035\uff4c\047\uff4c\051" +
    "\uff4c\060\uff4c\001\002\000\032\015\uff4f\016\uff4f\017\uff4f" +
    "\021\uff4f\023\321\024\uff4f\032\uff4f\034\uff4f\035\uff4f\047" +
    "\uff4f\051\uff4f\060\uff4f\001\002\000\040\010\uff2d\012\uff2d" +
    "\013\uff2d\014\uff2d\022\uff2d\023\uff2d\026\uff2d\033\uff2d\034" +
    "\uff2d\035\uff2d\036\uff2d\037\uff2d\052\uff2d\055\uff2d\056\uff2d" +
    "\001\002\000\022\015\uff36\017\316\024\uff36\032\uff36\034" +
    "\170\035\165\047\uff36\060\172\001\002\000\006\026\uff61" +
    "\045\024\001\002\000\040\010\uff2e\012\uff2e\013\uff2e\014" +
    "\uff2e\022\uff2e\023\uff2e\026\uff2e\033\uff2e\034\uff2e\035\uff2e" +
    "\036\uff2e\037\uff2e\052\uff2e\055\uff2e\056\uff2e\001\002\000" +
    "\024\022\uff2f\023\uff2f\033\uff2f\034\uff2f\035\uff2f\036\uff2f" +
    "\037\uff2f\052\uff2f\055\uff2f\001\002\000\024\022\070\023" +
    "\062\033\071\034\065\035\106\036\077\037\064\052\072" +
    "\055\115\001\002\000\040\010\104\012\107\013\113\014" +
    "\061\022\070\023\062\026\307\033\071\034\065\035\106" +
    "\036\077\037\064\052\072\055\115\056\105\001\002\000" +
    "\040\010\uff2b\012\uff2b\013\uff2b\014\uff2b\022\uff2b\023\uff2b" +
    "\026\uff2b\033\uff2b\034\uff2b\035\uff2b\036\uff2b\037\uff2b\052" +
    "\uff2b\055\uff2b\056\uff2b\001\002\000\012\015\uff3e\024\uff3e" +
    "\032\uff3e\047\uff3e\001\002\000\006\003\242\023\241\001" +
    "\002\000\024\022\070\023\062\033\071\034\065\035\106" +
    "\036\077\037\064\052\072\055\115\001\002\000\024\022" +
    "\uff30\023\uff30\033\uff30\034\uff30\035\uff30\036\uff30\037\uff30" +
    "\052\uff30\055\uff30\001\002\000\006\003\200\025\177\001" +
    "\002\000\026\015\uff35\016\173\017\171\021\167\024\uff35" +
    "\032\uff35\034\170\035\165\047\uff35\060\172\001\002\000" +
    "\040\010\104\012\107\013\113\014\061\022\070\023\062" +
    "\026\uff52\033\071\034\065\035\106\036\077\037\064\052" +
    "\072\055\115\056\105\001\002\000\040\010\uff2a\012\uff2a" +
    "\013\uff2a\014\uff2a\022\uff2a\023\uff2a\026\uff2a\033\uff2a\034" +
    "\uff2a\035\uff2a\036\uff2a\037\uff2a\052\uff2a\055\uff2a\056\uff2a" +
    "\001\002\000\006\003\122\023\121\001\002\000\012\015" +
    "\uff3f\024\uff3f\032\uff3f\047\uff3f\001\002\000\022\015\uff41" +
    "\017\uff41\024\uff41\032\uff41\034\uff41\035\uff41\047\uff41\060" +
    "\uff41\001\002\000\004\032\117\001\002\000\040\010\104" +
    "\012\107\013\113\014\061\022\070\023\062\026\uff53\033" +
    "\071\034\065\035\106\036\077\037\064\052\072\055\115" +
    "\056\105\001\002\000\004\026\uff55\001\002\000\024\022" +
    "\070\023\062\033\071\034\065\035\106\036\077\037\064" +
    "\052\072\055\115\001\002\000\004\024\123\001\002\000" +
    "\004\025\124\001\002\000\044\010\104\012\107\013\113" +
    "\014\061\022\070\023\062\026\132\033\071\034\065\035" +
    "\106\036\077\037\064\052\072\053\130\054\125\055\115" +
    "\056\136\001\002\000\004\032\150\001\002\000\044\010" +
    "\uff26\012\uff26\013\uff26\014\uff26\022\uff26\023\uff26\026\uff26" +
    "\033\uff26\034\uff26\035\uff26\036\uff26\037\uff26\052\uff26\053" +
    "\uff26\054\uff26\055\uff26\056\uff26\001\002\000\044\010\104" +
    "\012\107\013\113\014\061\022\070\023\062\026\uff1d\033" +
    "\071\034\065\035\106\036\077\037\064\052\072\053\130" +
    "\054\125\055\115\056\136\001\002\000\004\032\146\001" +
    "\002\000\044\010\uff27\012\uff27\013\uff27\014\uff27\022\uff27" +
    "\023\uff27\026\uff27\033\uff27\034\uff27\035\uff27\036\uff27\037" +
    "\uff27\052\uff27\053\uff27\054\uff27\055\uff27\056\uff27\001\002" +
    "\000\044\010\uff09\012\uff09\013\uff09\014\uff09\022\uff09\023" +
    "\uff09\026\uff09\033\uff09\034\uff09\035\uff09\036\uff09\037\uff09" +
    "\052\uff09\053\uff09\054\uff09\055\uff09\056\uff09\001\002\000" +
    "\004\026\145\001\002\000\044\010\uff28\012\uff28\013\uff28" +
    "\014\uff28\022\uff28\023\uff28\026\uff28\033\uff28\034\uff28\035" +
    "\uff28\036\uff28\037\uff28\052\uff28\053\uff28\054\uff28\055\uff28" +
    "\056\uff28\001\002\000\044\010\uff25\012\uff25\013\uff25\014" +
    "\uff25\022\uff25\023\uff25\026\uff25\033\uff25\034\uff25\035\uff25" +
    "\036\uff25\037\uff25\052\uff25\053\uff25\054\uff25\055\uff25\056" +
    "\uff25\001\002\000\024\022\070\023\062\033\071\034\065" +
    "\035\106\036\077\037\064\052\072\055\115\001\002\000" +
    "\044\010\uff24\012\uff24\013\uff24\014\uff24\022\uff24\023\uff24" +
    "\026\uff24\033\uff24\034\uff24\035\uff24\036\uff24\037\uff24\052" +
    "\uff24\053\uff24\054\uff24\055\uff24\056\uff24\001\002\000\004" +
    "\032\141\001\002\000\044\010\104\012\107\013\113\014" +
    "\061\022\070\023\062\026\uff1e\033\071\034\065\035\106" +
    "\036\077\037\064\052\072\053\130\054\125\055\115\056" +
    "\136\001\002\000\004\026\uff20\001\002\000\004\032\144" +
    "\001\002\000\044\010\uff21\012\uff21\013\uff21\014\uff21\022" +
    "\uff21\023\uff21\026\uff21\033\uff21\034\uff21\035\uff21\036\uff21" +
    "\037\uff21\052\uff21\053\uff21\054\uff21\055\uff21\056\uff21\001" +
    "\002\000\044\010\uff0a\012\uff0a\013\uff0a\014\uff0a\022\uff0a" +
    "\023\uff0a\026\uff0a\033\uff0a\034\uff0a\035\uff0a\036\uff0a\037" +
    "\uff0a\052\uff0a\053\uff0a\054\uff0a\055\uff0a\056\uff0a\001\002" +
    "\000\044\010\uff23\012\uff23\013\uff23\014\uff23\022\uff23\023" +
    "\uff23\026\uff23\033\uff23\034\uff23\035\uff23\036\uff23\037\uff23" +
    "\052\uff23\053\uff23\054\uff23\055\uff23\056\uff23\001\002\000" +
    "\004\026\uff1f\001\002\000\044\010\uff22\012\uff22\013\uff22" +
    "\014\uff22\022\uff22\023\uff22\026\uff22\033\uff22\034\uff22\035" +
    "\uff22\036\uff22\037\uff22\052\uff22\053\uff22\054\uff22\055\uff22" +
    "\056\uff22\001\002\000\004\024\152\001\002\000\006\003" +
    "\154\025\153\001\002\000\044\010\104\012\107\013\113" +
    "\014\061\022\070\023\062\026\160\033\071\034\065\035" +
    "\106\036\077\037\064\052\072\053\130\054\125\055\115" +
    "\056\136\001\002\000\044\010\104\012\107\013\113\014" +
    "\061\022\070\023\062\026\155\033\071\034\065\035\106" +
    "\036\077\037\064\052\072\053\130\054\125\055\115\056" +
    "\136\001\002\000\044\010\uff07\012\uff07\013\uff07\014\uff07" +
    "\022\uff07\023\uff07\026\uff07\033\uff07\034\uff07\035\uff07\036" +
    "\uff07\037\uff07\052\uff07\053\uff07\054\uff07\055\uff07\056\uff07" +
    "\001\002\000\004\026\157\001\002\000\044\010\uff08\012" +
    "\uff08\013\uff08\014\uff08\022\uff08\023\uff08\026\uff08\033\uff08" +
    "\034\uff08\035\uff08\036\uff08\037\uff08\052\uff08\053\uff08\054" +
    "\uff08\055\uff08\056\uff08\001\002\000\044\010\uff0b\012\uff0b" +
    "\013\uff0b\014\uff0b\022\uff0b\023\uff0b\026\uff0b\033\uff0b\034" +
    "\uff0b\035\uff0b\036\uff0b\037\uff0b\052\uff0b\053\uff0b\054\uff0b" +
    "\055\uff0b\056\uff0b\001\002\000\004\026\162\001\002\000" +
    "\044\010\uff0c\012\uff0c\013\uff0c\014\uff0c\022\uff0c\023\uff0c" +
    "\026\uff0c\033\uff0c\034\uff0c\035\uff0c\036\uff0c\037\uff0c\052" +
    "\uff0c\053\uff0c\054\uff0c\055\uff0c\056\uff0c\001\002\000\004" +
    "\026\uff54\001\002\000\024\022\070\023\062\033\071\034" +
    "\065\035\106\036\077\037\064\052\072\055\115\001\002" +
    "\000\024\022\uff32\023\uff32\033\uff32\034\uff32\035\uff32\036" +
    "\uff32\037\uff32\052\uff32\055\uff32\001\002\000\024\022\070" +
    "\023\062\033\071\034\065\035\106\036\077\037\064\052" +
    "\072\055\115\001\002\000\024\022\uff46\023\uff46\033\uff46" +
    "\034\uff46\035\uff46\036\uff46\037\uff46\052\uff46\055\uff46\001" +
    "\002\000\024\022\uff33\023\uff33\033\uff33\034\uff33\035\uff33" +
    "\036\uff33\037\uff33\052\uff33\055\uff33\001\002\000\024\022" +
    "\070\023\062\033\071\034\065\035\106\036\077\037\064" +
    "\052\072\055\115\001\002\000\024\022\uff34\023\uff34\033" +
    "\uff34\034\uff34\035\uff34\036\uff34\037\uff34\052\uff34\055\uff34" +
    "\001\002\000\024\022\uff45\023\uff45\033\uff45\034\uff45\035" +
    "\uff45\036\uff45\037\uff45\052\uff45\055\uff45\001\002\000\012" +
    "\015\uff37\024\uff37\032\uff37\047\uff37\001\002\000\012\015" +
    "\uff49\024\uff49\032\uff49\047\uff49\001\002\000\012\015\uff39" +
    "\024\uff39\032\uff39\047\uff39\001\002\000\044\010\104\012" +
    "\107\013\113\014\061\022\070\023\062\026\217\033\071" +
    "\034\065\035\106\036\077\037\064\052\072\053\130\054" +
    "\125\055\115\056\136\001\002\000\044\010\104\012\107" +
    "\013\113\014\061\022\070\023\062\026\201\033\071\034" +
    "\065\035\106\036\077\037\064\052\072\053\130\054\125" +
    "\055\115\056\136\001\002\000\004\013\211\001\002\000" +
    "\004\026\203\001\002\000\004\013\204\001\002\000\004" +
    "\023\205\001\002\000\024\022\070\023\062\033\071\034" +
    "\065\035\106\036\077\037\064\052\072\055\115\001\002" +
    "\000\004\024\207\001\002\000\004\032\210\001\002\000" +
    "\044\010\uff04\012\uff04\013\uff04\014\uff04\022\uff04\023\uff04" +
    "\026\uff04\033\uff04\034\uff04\035\uff04\036\uff04\037\uff04\052" +
    "\uff04\053\uff04\054\uff04\055\uff04\056\uff04\001\002\000\004" +
    "\023\212\001\002\000\024\022\070\023\062\033\071\034" +
    "\065\035\106\036\077\037\064\052\072\055\115\001\002" +
    "\000\004\024\214\001\002\000\004\032\215\001\002\000" +
    "\044\010\uff03\012\uff03\013\uff03\014\uff03\022\uff03\023\uff03" +
    "\026\uff03\033\uff03\034\uff03\035\uff03\036\uff03\037\uff03\052" +
    "\uff03\053\uff03\054\uff03\055\uff03\056\uff03\001\002\000\004" +
    "\026\227\001\002\000\006\003\220\013\221\001\002\000" +
    "\004\032\226\001\002\000\004\023\222\001\002\000\024" +
    "\022\070\023\062\033\071\034\065\035\106\036\077\037" +
    "\064\052\072\055\115\001\002\000\004\024\224\001\002" +
    "\000\004\032\225\001\002\000\044\010\uff05\012\uff05\013" +
    "\uff05\014\uff05\022\uff05\023\uff05\026\uff05\033\uff05\034\uff05" +
    "\035\uff05\036\uff05\037\uff05\052\uff05\053\uff05\054\uff05\055" +
    "\uff05\056\uff05\001\002\000\044\010\uff01\012\uff01\013\uff01" +
    "\014\uff01\022\uff01\023\uff01\026\uff01\033\uff01\034\uff01\035" +
    "\uff01\036\uff01\037\uff01\052\uff01\053\uff01\054\uff01\055\uff01" +
    "\056\uff01\001\002\000\006\003\230\013\231\001\002\000" +
    "\004\032\236\001\002\000\004\023\232\001\002\000\024" +
    "\022\070\023\062\033\071\034\065\035\106\036\077\037" +
    "\064\052\072\055\115\001\002\000\004\024\234\001\002" +
    "\000\004\032\235\001\002\000\044\010\uff06\012\uff06\013" +
    "\uff06\014\uff06\022\uff06\023\uff06\026\uff06\033\uff06\034\uff06" +
    "\035\uff06\036\uff06\037\uff06\052\uff06\053\uff06\054\uff06\055" +
    "\uff06\056\uff06\001\002\000\044\010\uff02\012\uff02\013\uff02" +
    "\014\uff02\022\uff02\023\uff02\026\uff02\033\uff02\034\uff02\035" +
    "\uff02\036\uff02\037\uff02\052\uff02\053\uff02\054\uff02\055\uff02" +
    "\056\uff02\001\002\000\004\032\240\001\002\000\040\010" +
    "\uff29\012\uff29\013\uff29\014\uff29\022\uff29\023\uff29\026\uff29" +
    "\033\uff29\034\uff29\035\uff29\036\uff29\037\uff29\052\uff29\055" +
    "\uff29\056\uff29\001\002\000\024\022\070\023\062\033\071" +
    "\034\065\035\106\036\077\037\064\052\072\055\115\001" +
    "\002\000\004\024\243\001\002\000\004\025\244\001\002" +
    "\000\044\010\104\012\107\013\113\014\061\022\070\023" +
    "\062\026\246\033\071\034\065\035\106\036\077\037\064" +
    "\052\072\053\130\054\125\055\115\056\136\001\002\000" +
    "\004\026\254\001\002\000\046\010\uff18\011\247\012\uff18" +
    "\013\uff18\014\uff18\022\uff18\023\uff18\026\uff18\033\uff18\034" +
    "\uff18\035\uff18\036\uff18\037\uff18\052\uff18\053\uff18\054\uff18" +
    "\055\uff18\056\uff18\001\002\000\004\025\250\001\002\000" +
    "\044\010\104\012\107\013\113\014\061\022\070\023\062" +
    "\026\252\033\071\034\065\035\106\036\077\037\064\052" +
    "\072\053\130\054\125\055\115\056\136\001\002\000\004" +
    "\026\253\001\002\000\044\010\uff0d\012\uff0d\013\uff0d\014" +
    "\uff0d\022\uff0d\023\uff0d\026\uff0d\033\uff0d\034\uff0d\035\uff0d" +
    "\036\uff0d\037\uff0d\052\uff0d\053\uff0d\054\uff0d\055\uff0d\056" +
    "\uff0d\001\002\000\044\010\uff0e\012\uff0e\013\uff0e\014\uff0e" +
    "\022\uff0e\023\uff0e\026\uff0e\033\uff0e\034\uff0e\035\uff0e\036" +
    "\uff0e\037\uff0e\052\uff0e\053\uff0e\054\uff0e\055\uff0e\056\uff0e" +
    "\001\002\000\046\010\uff19\011\255\012\uff19\013\uff19\014" +
    "\uff19\022\uff19\023\uff19\026\uff19\033\uff19\034\uff19\035\uff19" +
    "\036\uff19\037\uff19\052\uff19\053\uff19\054\uff19\055\uff19\056" +
    "\uff19\001\002\000\004\025\256\001\002\000\044\010\104" +
    "\012\107\013\113\014\061\022\070\023\062\026\257\033" +
    "\071\034\065\035\106\036\077\037\064\052\072\053\130" +
    "\054\125\055\115\056\136\001\002\000\044\010\uff0f\012" +
    "\uff0f\013\uff0f\014\uff0f\022\uff0f\023\uff0f\026\uff0f\033\uff0f" +
    "\034\uff0f\035\uff0f\036\uff0f\037\uff0f\052\uff0f\053\uff0f\054" +
    "\uff0f\055\uff0f\056\uff0f\001\002\000\004\026\261\001\002" +
    "\000\044\010\uff10\012\uff10\013\uff10\014\uff10\022\uff10\023" +
    "\uff10\026\uff10\033\uff10\034\uff10\035\uff10\036\uff10\037\uff10" +
    "\052\uff10\053\uff10\054\uff10\055\uff10\056\uff10\001\002\000" +
    "\004\024\263\001\002\000\006\003\265\025\264\001\002" +
    "\000\044\010\104\012\107\013\113\014\061\022\070\023" +
    "\062\026\271\033\071\034\065\035\106\036\077\037\064" +
    "\052\072\053\130\054\125\055\115\056\136\001\002\000" +
    "\044\010\104\012\107\013\113\014\061\022\070\023\062" +
    "\026\267\033\071\034\065\035\106\036\077\037\064\052" +
    "\072\053\130\054\125\055\115\056\136\001\002\000\004" +
    "\026\270\001\002\000\044\010\uff16\012\uff16\013\uff16\014" +
    "\uff16\022\uff16\023\uff16\026\uff16\033\uff16\034\uff16\035\uff16" +
    "\036\uff16\037\uff16\052\uff16\053\uff16\054\uff16\055\uff16\056" +
    "\uff16\001\002\000\044\010\uff17\012\uff17\013\uff17\014\uff17" +
    "\022\uff17\023\uff17\026\uff17\033\uff17\034\uff17\035\uff17\036" +
    "\uff17\037\uff17\052\uff17\053\uff17\054\uff17\055\uff17\056\uff17" +
    "\001\002\000\046\010\uff1a\011\301\012\uff1a\013\uff1a\014" +
    "\uff1a\022\uff1a\023\uff1a\026\uff1a\033\uff1a\034\uff1a\035\uff1a" +
    "\036\uff1a\037\uff1a\052\uff1a\053\uff1a\054\uff1a\055\uff1a\056" +
    "\uff1a\001\002\000\004\026\273\001\002\000\046\010\uff1b" +
    "\011\274\012\uff1b\013\uff1b\014\uff1b\022\uff1b\023\uff1b\026" +
    "\uff1b\033\uff1b\034\uff1b\035\uff1b\036\uff1b\037\uff1b\052\uff1b" +
    "\053\uff1b\054\uff1b\055\uff1b\056\uff1b\001\002\000\004\025" +
    "\275\001\002\000\044\010\104\012\107\013\113\014\061" +
    "\022\070\023\062\026\276\033\071\034\065\035\106\036" +
    "\077\037\064\052\072\053\130\054\125\055\115\056\136" +
    "\001\002\000\044\010\uff13\012\uff13\013\uff13\014\uff13\022" +
    "\uff13\023\uff13\026\uff13\033\uff13\034\uff13\035\uff13\036\uff13" +
    "\037\uff13\052\uff13\053\uff13\054\uff13\055\uff13\056\uff13\001" +
    "\002\000\004\026\300\001\002\000\044\010\uff14\012\uff14" +
    "\013\uff14\014\uff14\022\uff14\023\uff14\026\uff14\033\uff14\034" +
    "\uff14\035\uff14\036\uff14\037\uff14\052\uff14\053\uff14\054\uff14" +
    "\055\uff14\056\uff14\001\002\000\004\025\302\001\002\000" +
    "\044\010\104\012\107\013\113\014\061\022\070\023\062" +
    "\026\303\033\071\034\065\035\106\036\077\037\064\052" +
    "\072\053\130\054\125\055\115\056\136\001\002\000\044" +
    "\010\uff11\012\uff11\013\uff11\014\uff11\022\uff11\023\uff11\026" +
    "\uff11\033\uff11\034\uff11\035\uff11\036\uff11\037\uff11\052\uff11" +
    "\053\uff11\054\uff11\055\uff11\056\uff11\001\002\000\004\026" +
    "\305\001\002\000\044\010\uff12\012\uff12\013\uff12\014\uff12" +
    "\022\uff12\023\uff12\026\uff12\033\uff12\034\uff12\035\uff12\036" +
    "\uff12\037\uff12\052\uff12\053\uff12\054\uff12\055\uff12\056\uff12" +
    "\001\002\000\004\026\311\001\002\000\006\026\uff64\045" +
    "\024\001\002\000\004\026\uff68\001\002\000\006\026\uff63" +
    "\045\024\001\002\000\004\026\uff67\001\002\000\012\015" +
    "\uff3b\024\uff3b\032\uff3b\047\uff3b\001\002\000\004\026\uff65" +
    "\001\002\000\024\022\070\023\062\033\071\034\065\035" +
    "\106\036\077\037\064\052\072\055\115\001\002\000\024" +
    "\022\070\023\062\033\071\034\065\035\106\036\077\037" +
    "\064\052\072\055\115\001\002\000\012\015\uff38\024\uff38" +
    "\032\uff38\047\uff38\001\002\000\012\015\uff3a\024\uff3a\032" +
    "\uff3a\047\uff3a\001\002\000\026\022\070\023\062\024\322" +
    "\033\071\034\065\035\106\036\077\037\064\052\072\055" +
    "\115\001\002\000\030\015\uff51\016\uff51\017\uff51\021\uff51" +
    "\024\uff51\032\uff51\034\uff51\035\uff51\047\uff51\051\uff51\060" +
    "\uff51\001\002\000\004\024\327\001\002\000\006\024\uff43" +
    "\047\325\001\002\000\024\022\070\023\062\033\071\034" +
    "\065\035\106\036\077\037\064\052\072\055\115\001\002" +
    "\000\004\024\uff44\001\002\000\030\015\uff50\016\uff50\017" +
    "\uff50\021\uff50\024\uff50\032\uff50\034\uff50\035\uff50\047\uff50" +
    "\051\uff50\060\uff50\001\002\000\026\022\070\023\062\024" +
    "\331\033\071\034\065\035\106\036\077\037\064\052\072" +
    "\055\115\001\002\000\030\015\uff4e\016\uff4e\017\uff4e\021" +
    "\uff4e\024\uff4e\032\uff4e\034\uff4e\035\uff4e\047\uff4e\051\uff4e" +
    "\060\uff4e\001\002\000\004\024\333\001\002\000\030\015" +
    "\uff4d\016\uff4d\017\uff4d\021\uff4d\024\uff4d\032\uff4d\034\uff4d" +
    "\035\uff4d\047\uff4d\051\uff4d\060\uff4d\001\002\000\006\026" +
    "\uff62\045\024\001\002\000\004\026\uff66\001\002\000\004" +
    "\024\337\001\002\000\014\015\uff3c\024\uff3c\032\uff3c\047" +
    "\uff3c\062\340\001\002\000\024\022\070\023\062\033\071" +
    "\034\065\035\106\036\077\037\064\052\072\055\115\001" +
    "\002\000\004\015\342\001\002\000\024\022\070\023\062" +
    "\033\071\034\065\035\106\036\077\037\064\052\072\055" +
    "\115\001\002\000\012\015\uff1c\024\uff1c\032\uff1c\047\uff1c" +
    "\001\002\000\010\006\356\033\071\052\072\001\002\000" +
    "\004\024\346\001\002\000\004\025\347\001\002\000\044" +
    "\010\104\012\107\013\113\014\061\022\070\023\062\026" +
    "\350\033\071\034\065\035\106\036\077\037\064\052\072" +
    "\053\130\054\125\055\115\056\136\001\002\000\044\010" +
    "\ufefd\012\ufefd\013\ufefd\014\ufefd\022\ufefd\023\ufefd\026\ufefd" +
    "\033\ufefd\034\ufefd\035\ufefd\036\ufefd\037\ufefd\052\ufefd\053" +
    "\ufefd\054\ufefd\055\ufefd\056\ufefd\001\002\000\004\026\352" +
    "\001\002\000\044\010\ufefe\012\ufefe\013\ufefe\014\ufefe\022" +
    "\ufefe\023\ufefe\026\ufefe\033\ufefe\034\ufefe\035\ufefe\036\ufefe" +
    "\037\ufefe\052\ufefe\053\ufefe\054\ufefe\055\ufefe\056\ufefe\001" +
    "\002\000\004\024\370\001\002\000\004\032\364\001\002" +
    "\000\006\016\173\021\167\001\002\000\004\033\357\001" +
    "\002\000\004\016\360\001\002\000\024\022\070\023\062" +
    "\033\071\034\065\035\106\036\077\037\064\052\072\055" +
    "\115\001\002\000\004\032\uff47\001\002\000\024\022\070" +
    "\023\062\033\071\034\065\035\106\036\077\037\064\052" +
    "\072\055\115\001\002\000\004\032\uff48\001\002\000\024" +
    "\022\070\023\062\033\071\034\065\035\106\036\077\037" +
    "\064\052\072\055\115\001\002\000\004\032\366\001\002" +
    "\000\024\022\070\023\062\033\071\034\065\035\106\036" +
    "\077\037\064\052\072\055\115\001\002\000\004\024\ufefa" +
    "\001\002\000\006\003\372\025\371\001\002\000\044\010" +
    "\104\012\107\013\113\014\061\022\070\023\062\026\376" +
    "\033\071\034\065\035\106\036\077\037\064\052\072\053" +
    "\130\054\125\055\115\056\136\001\002\000\044\010\104" +
    "\012\107\013\113\014\061\022\070\023\062\026\373\033" +
    "\071\034\065\035\106\036\077\037\064\052\072\053\130" +
    "\054\125\055\115\056\136\001\002\000\044\010\ufefb\012" +
    "\ufefb\013\ufefb\014\ufefb\022\ufefb\023\ufefb\026\ufefb\033\ufefb" +
    "\034\ufefb\035\ufefb\036\ufefb\037\ufefb\052\ufefb\053\ufefb\054" +
    "\ufefb\055\ufefb\056\ufefb\001\002\000\004\026\375\001\002" +
    "\000\044\010\ufefc\012\ufefc\013\ufefc\014\ufefc\022\ufefc\023" +
    "\ufefc\026\ufefc\033\ufefc\034\ufefc\035\ufefc\036\ufefc\037\ufefc" +
    "\052\ufefc\053\ufefc\054\ufefc\055\ufefc\056\ufefc\001\002\000" +
    "\044\010\ufeff\012\ufeff\013\ufeff\014\ufeff\022\ufeff\023\ufeff" +
    "\026\ufeff\033\ufeff\034\ufeff\035\ufeff\036\ufeff\037\ufeff\052" +
    "\ufeff\053\ufeff\054\ufeff\055\ufeff\056\ufeff\001\002\000\004" +
    "\026\u0100\001\002\000\044\010\uff00\012\uff00\013\uff00\014" +
    "\uff00\022\uff00\023\uff00\026\uff00\033\uff00\034\uff00\035\uff00" +
    "\036\uff00\037\uff00\052\uff00\053\uff00\054\uff00\055\uff00\056" +
    "\uff00\001\002\000\006\033\071\052\072\001\002\000\026" +
    "\015\uff4b\016\uff4b\017\uff4b\021\uff4b\024\uff4b\032\uff4b\034" +
    "\uff4b\035\uff4b\047\uff4b\060\uff4b\001\002\000\004\025\u0114" +
    "\001\002\000\006\003\u0106\025\u0105\001\002\000\006\026" +
    "\u010f\033\u0109\001\002\000\006\026\u0107\033\u0109\001\002" +
    "\000\014\006\uffb1\026\uffb1\041\031\044\uffb1\045\uffb1\001" +
    "\002\000\004\026\u010c\001\002\000\006\026\uffaf\047\u010a" +
    "\001\002\000\004\033\u0109\001\002\000\004\026\uffb0\001" +
    "\002\000\014\006\uffb2\026\uffb2\041\031\044\uffb2\045\uffb2" +
    "\001\002\000\012\006\uffb6\026\uffb6\044\uffb6\045\uffb6\001" +
    "\002\000\012\006\uffb5\026\uffb5\044\uffb5\045\uffb5\001\002" +
    "\000\014\006\uffb9\026\uffb9\041\031\044\uffb9\045\uffb9\001" +
    "\002\000\004\026\u0111\001\002\000\014\006\uffba\026\uffba" +
    "\041\031\044\uffba\045\uffba\001\002\000\012\006\uffbc\026" +
    "\uffbc\044\uffbc\045\uffbc\001\002\000\012\006\uffbb\026\uffbb" +
    "\044\uffbb\045\uffbb\001\002\000\006\026\u0115\033\u0109\001" +
    "\002\000\014\006\uffb3\026\uffb3\041\031\044\uffb3\045\uffb3" +
    "\001\002\000\004\026\u0117\001\002\000\014\006\uffb4\026" +
    "\uffb4\041\031\044\uffb4\045\uffb4\001\002\000\012\006\uffb8" +
    "\026\uffb8\044\uffb8\045\uffb8\001\002\000\012\006\uffb7\026" +
    "\uffb7\044\uffb7\045\uffb7\001\002\000\006\002\uffe3\040\017" +
    "\001\002\000\006\026\u011f\045\024\001\002\000\004\026" +
    "\u011d\001\002\000\006\002\uffe1\040\017\001\002\000\004" +
    "\002\ufff1\001\002\000\006\002\uffe2\040\017\001\002\000" +
    "\004\026\u0121\001\002\000\006\002\uffe0\040\017\001\002" +
    "\000\004\002\ufff0\001\002\000\004\002\ufff2\001\002\000" +
    "\004\002\ufff3\001\002\000\006\003\u0171\033\u0172\001\002" +
    "\000\010\016\u012b\030\u016d\032\u0143\001\002\000\006\003" +
    "\u0130\030\u0131\001\002\000\006\016\u012b\032\u012a\001\002" +
    "\000\004\032\u012e\001\002\000\046\006\027\010\uffa5\012" +
    "\uffa5\013\uffa5\014\uffa5\022\uffa5\023\uffa5\026\uffa5\033\uffa5" +
    "\034\uffa5\035\uffa5\036\uffa5\037\uffa5\044\uffa5\045\uffa5\052" +
    "\uffa5\055\uffa5\056\uffa5\001\002\000\024\022\070\023\062" +
    "\033\071\034\065\035\106\036\077\037\064\052\072\055" +
    "\115\001\002\000\004\032\uff7f\001\002\000\044\010\uffad" +
    "\012\uffad\013\uffad\014\uffad\022\uffad\023\uffad\026\uffad\033" +
    "\uffad\034\uffad\035\uffad\036\uffad\037\uffad\044\uffad\045\uffad" +
    "\052\uffad\055\uffad\056\uffad\001\002\000\046\006\027\010" +
    "\uffa1\012\uffa1\013\uffa1\014\uffa1\022\uffa1\023\uffa1\026\uffa1" +
    "\033\uffa1\034\uffa1\035\uffa1\036\uffa1\037\uffa1\044\uffa1\045" +
    "\uffa1\052\uffa1\055\uffa1\056\uffa1\001\002\000\044\010\uffa9" +
    "\012\uffa9\013\uffa9\014\uffa9\022\uffa9\023\uffa9\026\uffa9\033" +
    "\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\044\uffa9\045\uffa9" +
    "\052\uffa9\055\uffa9\056\uffa9\001\002\000\006\033\u0161\061" +
    "\u0160\001\002\000\010\003\u0133\033\u0134\061\u0132\001\002" +
    "\000\006\003\u0154\033\u0155\001\002\000\006\016\u012b\032" +
    "\u013b\001\002\000\006\016\u012b\032\u0136\001\002\000\004" +
    "\032\u0138\001\002\000\046\006\027\010\uffa3\012\uffa3\013" +
    "\uffa3\014\uffa3\022\uffa3\023\uffa3\026\uffa3\033\uffa3\034\uffa3" +
    "\035\uffa3\036\uffa3\037\uffa3\044\uffa3\045\uffa3\052\uffa3\055" +
    "\uffa3\056\uffa3\001\002\000\044\010\uffab\012\uffab\013\uffab" +
    "\014\uffab\022\uffab\023\uffab\026\uffab\033\uffab\034\uffab\035" +
    "\uffab\036\uffab\037\uffab\044\uffab\045\uffab\052\uffab\055\uffab" +
    "\056\uffab\001\002\000\046\006\027\010\uff9f\012\uff9f\013" +
    "\uff9f\014\uff9f\022\uff9f\023\uff9f\026\uff9f\033\uff9f\034\uff9f" +
    "\035\uff9f\036\uff9f\037\uff9f\044\uff9f\045\uff9f\052\uff9f\055" +
    "\uff9f\056\uff9f\001\002\000\044\010\uffa7\012\uffa7\013\uffa7" +
    "\014\uffa7\022\uffa7\023\uffa7\026\uffa7\033\uffa7\034\uffa7\035" +
    "\uffa7\036\uffa7\037\uffa7\044\uffa7\045\uffa7\052\uffa7\055\uffa7" +
    "\056\uffa7\001\002\000\004\032\u013d\001\002\000\046\006" +
    "\027\010\uff93\012\uff93\013\uff93\014\uff93\022\uff93\023\uff93" +
    "\026\uff93\033\uff93\034\uff93\035\uff93\036\uff93\037\uff93\044" +
    "\uff93\045\uff93\052\uff93\055\uff93\056\uff93\001\002\000\044" +
    "\010\uff9b\012\uff9b\013\uff9b\014\uff9b\022\uff9b\023\uff9b\026" +
    "\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b\037\uff9b\044\uff9b" +
    "\045\uff9b\052\uff9b\055\uff9b\056\uff9b\001\002\000\004\006" +
    "\u013f\001\002\000\044\010\uff97\012\uff97\013\uff97\014\uff97" +
    "\022\uff97\023\uff97\026\uff97\033\uff97\034\uff97\035\uff97\036" +
    "\uff97\037\uff97\044\uff97\045\uff97\052\uff97\055\uff97\056\uff97" +
    "\001\002\000\012\003\u0140\027\u0127\033\u0128\061\u0125\001" +
    "\002\000\010\016\u012b\030\u0142\032\u0143\001\002\000\004" +
    "\032\u0152\001\002\000\006\033\u0146\061\u0145\001\002\000" +
    "\046\006\027\010\uff95\012\uff95\013\uff95\014\uff95\022\uff95" +
    "\023\uff95\026\uff95\033\uff95\034\uff95\035\uff95\036\uff95\037" +
    "\uff95\044\uff95\045\uff95\052\uff95\055\uff95\056\uff95\001\002" +
    "\000\044\010\uff9d\012\uff9d\013\uff9d\014\uff9d\022\uff9d\023" +
    "\uff9d\026\uff9d\033\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d" +
    "\044\uff9d\045\uff9d\052\uff9d\055\uff9d\056\uff9d\001\002\000" +
    "\004\033\u014c\001\002\000\006\016\u012b\032\u0148\001\002" +
    "\000\004\032\u014a\001\002\000\046\006\027\010\uff8a\012" +
    "\uff8a\013\uff8a\014\uff8a\022\uff8a\023\uff8a\026\uff8a\033\uff8a" +
    "\034\uff8a\035\uff8a\036\uff8a\037\uff8a\044\uff8a\045\uff8a\052" +
    "\uff8a\055\uff8a\056\uff8a\001\002\000\044\010\uff8e\012\uff8e" +
    "\013\uff8e\014\uff8e\022\uff8e\023\uff8e\026\uff8e\033\uff8e\034" +
    "\uff8e\035\uff8e\036\uff8e\037\uff8e\044\uff8e\045\uff8e\052\uff8e" +
    "\055\uff8e\056\uff8e\001\002\000\046\006\027\010\uff88\012" +
    "\uff88\013\uff88\014\uff88\022\uff88\023\uff88\026\uff88\033\uff88" +
    "\034\uff88\035\uff88\036\uff88\037\uff88\044\uff88\045\uff88\052" +
    "\uff88\055\uff88\056\uff88\001\002\000\044\010\uff8c\012\uff8c" +
    "\013\uff8c\014\uff8c\022\uff8c\023\uff8c\026\uff8c\033\uff8c\034" +
    "\uff8c\035\uff8c\036\uff8c\037\uff8c\044\uff8c\045\uff8c\052\uff8c" +
    "\055\uff8c\056\uff8c\001\002\000\006\016\u012b\032\u014e\001" +
    "\002\000\004\032\u0150\001\002\000\046\006\027\010\uff8b" +
    "\012\uff8b\013\uff8b\014\uff8b\022\uff8b\023\uff8b\026\uff8b\033" +
    "\uff8b\034\uff8b\035\uff8b\036\uff8b\037\uff8b\044\uff8b\045\uff8b" +
    "\052\uff8b\055\uff8b\056\uff8b\001\002\000\044\010\uff8f\012" +
    "\uff8f\013\uff8f\014\uff8f\022\uff8f\023\uff8f\026\uff8f\033\uff8f" +
    "\034\uff8f\035\uff8f\036\uff8f\037\uff8f\044\uff8f\045\uff8f\052" +
    "\uff8f\055\uff8f\056\uff8f\001\002\000\046\006\027\010\uff89" +
    "\012\uff89\013\uff89\014\uff89\022\uff89\023\uff89\026\uff89\033" +
    "\uff89\034\uff89\035\uff89\036\uff89\037\uff89\044\uff89\045\uff89" +
    "\052\uff89\055\uff89\056\uff89\001\002\000\044\010\uff8d\012" +
    "\uff8d\013\uff8d\014\uff8d\022\uff8d\023\uff8d\026\uff8d\033\uff8d" +
    "\034\uff8d\035\uff8d\036\uff8d\037\uff8d\044\uff8d\045\uff8d\052" +
    "\uff8d\055\uff8d\056\uff8d\001\002\000\046\006\027\010\uff91" +
    "\012\uff91\013\uff91\014\uff91\022\uff91\023\uff91\026\uff91\033" +
    "\uff91\034\uff91\035\uff91\036\uff91\037\uff91\044\uff91\045\uff91" +
    "\052\uff91\055\uff91\056\uff91\001\002\000\044\010\uff99\012" +
    "\uff99\013\uff99\014\uff99\022\uff99\023\uff99\026\uff99\033\uff99" +
    "\034\uff99\035\uff99\036\uff99\037\uff99\044\uff99\045\uff99\052" +
    "\uff99\055\uff99\056\uff99\001\002\000\006\016\u012b\032\u015c" +
    "\001\002\000\006\016\u012b\032\u0157\001\002\000\004\032" +
    "\u0159\001\002\000\046\006\027\010\uffa4\012\uffa4\013\uffa4" +
    "\014\uffa4\022\uffa4\023\uffa4\026\uffa4\033\uffa4\034\uffa4\035" +
    "\uffa4\036\uffa4\037\uffa4\044\uffa4\045\uffa4\052\uffa4\055\uffa4" +
    "\056\uffa4\001\002\000\044\010\uffac\012\uffac\013\uffac\014" +
    "\uffac\022\uffac\023\uffac\026\uffac\033\uffac\034\uffac\035\uffac" +
    "\036\uffac\037\uffac\044\uffac\045\uffac\052\uffac\055\uffac\056" +
    "\uffac\001\002\000\046\006\027\010\uffa0\012\uffa0\013\uffa0" +
    "\014\uffa0\022\uffa0\023\uffa0\026\uffa0\033\uffa0\034\uffa0\035" +
    "\uffa0\036\uffa0\037\uffa0\044\uffa0\045\uffa0\052\uffa0\055\uffa0" +
    "\056\uffa0\001\002\000\044\010\uffa8\012\uffa8\013\uffa8\014" +
    "\uffa8\022\uffa8\023\uffa8\026\uffa8\033\uffa8\034\uffa8\035\uffa8" +
    "\036\uffa8\037\uffa8\044\uffa8\045\uffa8\052\uffa8\055\uffa8\056" +
    "\uffa8\001\002\000\004\032\u015e\001\002\000\046\006\027" +
    "\010\uff94\012\uff94\013\uff94\014\uff94\022\uff94\023\uff94\026" +
    "\uff94\033\uff94\034\uff94\035\uff94\036\uff94\037\uff94\044\uff94" +
    "\045\uff94\052\uff94\055\uff94\056\uff94\001\002\000\044\010" +
    "\uff9c\012\uff9c\013\uff9c\014\uff9c\022\uff9c\023\uff9c\026\uff9c" +
    "\033\uff9c\034\uff9c\035\uff9c\036\uff9c\037\uff9c\044\uff9c\045" +
    "\uff9c\052\uff9c\055\uff9c\056\uff9c\001\002\000\046\006\027" +
    "\010\uff90\012\uff90\013\uff90\014\uff90\022\uff90\023\uff90\026" +
    "\uff90\033\uff90\034\uff90\035\uff90\036\uff90\037\uff90\044\uff90" +
    "\045\uff90\052\uff90\055\uff90\056\uff90\001\002\000\044\010" +
    "\uff98\012\uff98\013\uff98\014\uff98\022\uff98\023\uff98\026\uff98" +
    "\033\uff98\034\uff98\035\uff98\036\uff98\037\uff98\044\uff98\045" +
    "\uff98\052\uff98\055\uff98\056\uff98\001\002\000\004\033\u0167" +
    "\001\002\000\006\016\u012b\032\u0163\001\002\000\004\032" +
    "\u0165\001\002\000\046\006\027\010\uff82\012\uff82\013\uff82" +
    "\014\uff82\022\uff82\023\uff82\026\uff82\033\uff82\034\uff82\035" +
    "\uff82\036\uff82\037\uff82\044\uff82\045\uff82\052\uff82\055\uff82" +
    "\056\uff82\001\002\000\044\010\uff86\012\uff86\013\uff86\014" +
    "\uff86\022\uff86\023\uff86\026\uff86\033\uff86\034\uff86\035\uff86" +
    "\036\uff86\037\uff86\044\uff86\045\uff86\052\uff86\055\uff86\056" +
    "\uff86\001\002\000\046\006\027\010\uff80\012\uff80\013\uff80" +
    "\014\uff80\022\uff80\023\uff80\026\uff80\033\uff80\034\uff80\035" +
    "\uff80\036\uff80\037\uff80\044\uff80\045\uff80\052\uff80\055\uff80" +
    "\056\uff80\001\002\000\044\010\uff84\012\uff84\013\uff84\014" +
    "\uff84\022\uff84\023\uff84\026\uff84\033\uff84\034\uff84\035\uff84" +
    "\036\uff84\037\uff84\044\uff84\045\uff84\052\uff84\055\uff84\056" +
    "\uff84\001\002\000\006\016\u012b\032\u0169\001\002\000\004" +
    "\032\u016b\001\002\000\046\006\027\010\uff83\012\uff83\013" +
    "\uff83\014\uff83\022\uff83\023\uff83\026\uff83\033\uff83\034\uff83" +
    "\035\uff83\036\uff83\037\uff83\044\uff83\045\uff83\052\uff83\055" +
    "\uff83\056\uff83\001\002\000\044\010\uff87\012\uff87\013\uff87" +
    "\014\uff87\022\uff87\023\uff87\026\uff87\033\uff87\034\uff87\035" +
    "\uff87\036\uff87\037\uff87\044\uff87\045\uff87\052\uff87\055\uff87" +
    "\056\uff87\001\002\000\046\006\027\010\uff81\012\uff81\013" +
    "\uff81\014\uff81\022\uff81\023\uff81\026\uff81\033\uff81\034\uff81" +
    "\035\uff81\036\uff81\037\uff81\044\uff81\045\uff81\052\uff81\055" +
    "\uff81\056\uff81\001\002\000\044\010\uff85\012\uff85\013\uff85" +
    "\014\uff85\022\uff85\023\uff85\026\uff85\033\uff85\034\uff85\035" +
    "\uff85\036\uff85\037\uff85\044\uff85\045\uff85\052\uff85\055\uff85" +
    "\056\uff85\001\002\000\006\033\u0146\061\u016e\001\002\000" +
    "\004\033\u016f\001\002\000\006\016\u012b\032\u0170\001\002" +
    "\000\044\010\uff8b\012\uff8b\013\uff8b\014\uff8b\022\uff8b\023" +
    "\uff8b\026\uff8b\033\uff8b\034\uff8b\035\uff8b\036\uff8b\037\uff8b" +
    "\044\uff8b\045\uff8b\052\uff8b\055\uff8b\056\uff8b\001\002\000" +
    "\006\016\u012b\032\u0179\001\002\000\006\016\u012b\032\u0174" +
    "\001\002\000\004\032\u0176\001\002\000\046\006\027\010" +
    "\uffa6\012\uffa6\013\uffa6\014\uffa6\022\uffa6\023\uffa6\026\uffa6" +
    "\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6\044\uffa6\045" +
    "\uffa6\052\uffa6\055\uffa6\056\uffa6\001\002\000\044\010\uffae" +
    "\012\uffae\013\uffae\014\uffae\022\uffae\023\uffae\026\uffae\033" +
    "\uffae\034\uffae\035\uffae\036\uffae\037\uffae\044\uffae\045\uffae" +
    "\052\uffae\055\uffae\056\uffae\001\002\000\046\006\027\010" +
    "\uffa2\012\uffa2\013\uffa2\014\uffa2\022\uffa2\023\uffa2\026\uffa2" +
    "\033\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\044\uffa2\045" +
    "\uffa2\052\uffa2\055\uffa2\056\uffa2\001\002\000\044\010\uffaa" +
    "\012\uffaa\013\uffaa\014\uffaa\022\uffaa\023\uffaa\026\uffaa\033" +
    "\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa\044\uffaa\045\uffaa" +
    "\052\uffaa\055\uffaa\056\uffaa\001\002\000\004\032\u017b\001" +
    "\002\000\046\006\027\010\uff96\012\uff96\013\uff96\014\uff96" +
    "\022\uff96\023\uff96\026\uff96\033\uff96\034\uff96\035\uff96\036" +
    "\uff96\037\uff96\044\uff96\045\uff96\052\uff96\055\uff96\056\uff96" +
    "\001\002\000\044\010\uff9e\012\uff9e\013\uff9e\014\uff9e\022" +
    "\uff9e\023\uff9e\026\uff9e\033\uff9e\034\uff9e\035\uff9e\036\uff9e" +
    "\037\uff9e\044\uff9e\045\uff9e\052\uff9e\055\uff9e\056\uff9e\001" +
    "\002\000\046\006\027\010\uff92\012\uff92\013\uff92\014\uff92" +
    "\022\uff92\023\uff92\026\uff92\033\uff92\034\uff92\035\uff92\036" +
    "\uff92\037\uff92\044\uff92\045\uff92\052\uff92\055\uff92\056\uff92" +
    "\001\002\000\044\010\uff9a\012\uff9a\013\uff9a\014\uff9a\022" +
    "\uff9a\023\uff9a\026\uff9a\033\uff9a\034\uff9a\035\uff9a\036\uff9a" +
    "\037\uff9a\044\uff9a\045\uff9a\052\uff9a\055\uff9a\056\uff9a\001" +
    "\002\000\006\002\uffeb\040\017\001\002\000\006\026\u018e" +
    "\045\024\001\002\000\004\026\u018c\001\002\000\010\026" +
    "\u0181\044\034\045\024\001\002\000\006\002\uffea\040\017" +
    "\001\002\000\006\026\u0186\045\024\001\002\000\004\026" +
    "\u0184\001\002\000\006\002\uffe6\040\017\001\002\000\004" +
    "\002\ufff6\001\002\000\006\002\uffe7\040\017\001\002\000" +
    "\004\026\u0188\001\002\000\006\002\uffe4\040\017\001\002" +
    "\000\004\002\ufff4\001\002\000\004\002\ufff7\001\002\000" +
    "\004\002\ufffa\001\002\000\006\002\uffe8\040\017\001\002" +
    "\000\004\002\ufff8\001\002\000\006\002\uffe9\040\017\001" +
    "\002\000\004\026\u0190\001\002\000\006\002\uffe5\040\017" +
    "\001\002\000\004\002\ufff5\001\002\000\004\002\ufff9\001" +
    "\002\000\004\002\ufffb\001\002\000\006\002\uffdf\040\017" +
    "\001\002\000\004\026\u0196\001\002\000\006\002\uffde\040" +
    "\017\001\002\000\004\002\uffee\001\002\000\004\002\uffef" +
    "\001\002\000\004\023\u01c1\001\002\000\006\003\u019c\023" +
    "\u019b\001\002\000\004\006\u019e\001\002\000\004\006\u019e" +
    "\001\002\000\004\024\u01a5\001\002\000\006\003\u019f\033" +
    "\u01a0\001\002\000\010\003\uff5a\024\uff5a\047\u01a3\001\002" +
    "\000\010\003\uff5c\024\uff5c\047\u01a1\001\002\000\004\006" +
    "\u019e\001\002\000\006\003\uff5d\024\uff5d\001\002\000\004" +
    "\006\u019e\001\002\000\006\003\uff5b\024\uff5b\001\002\000" +
    "\012\025\uff70\046\u01a9\057\u01a8\061\u01a7\001\002\000\004" +
    "\025\uff6e\001\002\000\012\025\uff56\046\u01a9\057\uff56\061" +
    "\u01a7\001\002\000\006\003\u01ae\023\u01ad\001\002\000\012" +
    "\025\uff57\046\u01a9\057\uff57\061\u01a7\001\002\000\006\025" +
    "\uff6f\057\u01a8\001\002\000\004\025\uff6d\001\002\000\006" +
    "\025\uff59\057\uff59\001\002\000\004\006\u01b2\001\002\000" +
    "\004\006\u01af\001\002\000\004\033\u01b0\001\002\000\004" +
    "\024\u01b1\001\002\000\004\025\uff5f\001\002\000\006\003" +
    "\u01b3\033\u01b4\001\002\000\004\024\u01b6\001\002\000\004" +
    "\024\u01b5\001\002\000\004\025\uff60\001\002\000\004\025" +
    "\uff5e\001\002\000\006\025\uff58\057\uff58\001\002\000\006" +
    "\003\u01b9\024\u01ba\001\002\000\012\025\uff6c\046\u01a9\057" +
    "\u01a8\061\u01a7\001\002\000\012\025\uff78\046\u01a9\057\u01a8" +
    "\061\u01a7\001\002\000\004\025\uff76\001\002\000\006\025" +
    "\uff77\057\u01a8\001\002\000\004\025\uff75\001\002\000\004" +
    "\025\uff6a\001\002\000\006\025\uff6b\057\u01a8\001\002\000" +
    "\004\025\uff69\001\002\000\004\006\u019e\001\002\000\004" +
    "\024\u01c3\001\002\000\012\025\uff74\046\u01a9\057\u01a8\061" +
    "\u01a7\001\002\000\004\025\uff72\001\002\000\006\025\uff73" +
    "\057\u01a8\001\002\000\004\025\uff71\001\002\000\014\006" +
    "\027\026\u01cb\041\031\044\034\045\024\001\002\000\006" +
    "\026\u01f2\045\024\001\002\000\012\006\027\026\u01db\044" +
    "\034\045\024\001\002\000\010\026\u01d0\044\034\045\024" +
    "\001\002\000\006\002\uffcc\040\017\001\002\000\004\026" +
    "\u01cd\001\002\000\006\002\uffbd\040\017\001\002\000\004" +
    "\002\uffcd\001\002\000\004\002\uffdc\001\002\000\006\002" +
    "\uffc3\040\017\001\002\000\006\026\u01d5\045\024\001\002" +
    "\000\004\026\u01d3\001\002\000\006\002\uffc1\040\017\001" +
    "\002\000\004\002\uffd1\001\002\000\006\002\uffc2\040\017" +
    "\001\002\000\004\026\u01d7\001\002\000\006\002\uffc0\040" +
    "\017\001\002\000\004\002\uffd0\001\002\000\004\002\uffd2" +
    "\001\002\000\004\002\uffd3\001\002\000\006\002\uffcb\040" +
    "\017\001\002\000\006\026\u01ec\045\024\001\002\000\004" +
    "\026\u01ea\001\002\000\010\026\u01df\044\034\045\024\001" +
    "\002\000\006\002\uffca\040\017\001\002\000\006\026\u01e4" +
    "\045\024\001\002\000\004\026\u01e2\001\002\000\006\002" +
    "\uffc6\040\017\001\002\000\004\002\uffd6\001\002\000\006" +
    "\002\uffc7\040\017\001\002\000\004\026\u01e6\001\002\000" +
    "\006\002\uffc4\040\017\001\002\000\004\002\uffd4\001\002" +
    "\000\004\002\uffd7\001\002\000\004\002\uffda\001\002\000" +
    "\006\002\uffc8\040\017\001\002\000\004\002\uffd8\001\002" +
    "\000\006\002\uffc9\040\017\001\002\000\004\026\u01ee\001" +
    "\002\000\006\002\uffc5\040\017\001\002\000\004\002\uffd5" +
    "\001\002\000\004\002\uffd9\001\002\000\004\002\uffdb\001" +
    "\002\000\006\002\uffbf\040\017\001\002\000\004\026\u01f4" +
    "\001\002\000\006\002\uffbe\040\017\001\002\000\004\002" +
    "\uffce\001\002\000\004\002\uffcf\001\002\000\004\002\ufffd" +
    "\001\002\000\004\032\u01f9\001\002\000\004\040\017\001" +
    "\002\000\004\002\000\001\002\000\004\040\017\001\002" +
    "\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01fa\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\017\001\001\000\004" +
    "\003\u01f6\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\022\025\023\027" +
    "\025\024\027\034\033\031\001\001\000\002\001\001\000" +
    "\006\027\u0194\033\031\001\001\000\012\023\u017f\025\u017d" +
    "\027\u017e\033\031\001\001\000\002\001\001\000\010\025" +
    "\u011a\027\u011b\033\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\046\001" +
    "\001\000\004\023\043\001\001\000\002\001\001\000\004" +
    "\025\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\050\001\001\000\002\001\001\000\004\023\052" +
    "\001\001\000\002\001\001\000\004\025\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\004\062\006\072" +
    "\007\075\013\077\014\065\015\101\016\111\023\100\026" +
    "\057\032\066\034\102\037\115\040\110\041\107\043\113" +
    "\045\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\004\062\013\077\026\057\034\102\037\335\041\107" +
    "\043\113\045\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\314\001\001\000\006\027\313" +
    "\033\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\004\062\013\077\026\057\034\102\037\312\041\107" +
    "\043\113\045\073\001\001\000\040\004\062\006\072\007" +
    "\075\013\077\014\065\015\101\016\111\026\057\032\305" +
    "\034\102\037\115\040\110\041\107\043\113\045\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\004\062\013\077\026\057\034\102\037\236\041" +
    "\107\043\113\045\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\163\044\165\001\001\000\040\004" +
    "\062\006\072\007\075\013\077\014\065\015\101\016\111" +
    "\026\057\032\162\034\102\037\115\040\110\041\107\043" +
    "\113\045\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\004\062\006\072\007\075\013\077\014\065\015\101" +
    "\016\111\026\057\032\117\034\102\037\115\040\110\041" +
    "\107\043\113\045\073\001\001\000\002\001\001\000\022" +
    "\004\062\013\077\026\057\034\102\037\150\041\107\043" +
    "\113\045\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\004\062\006\130\007\133\013\077\014\125\015" +
    "\134\016\136\020\126\026\057\034\102\037\137\041\107" +
    "\042\132\043\113\045\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\004\062\006\130\007\133\013\077" +
    "\014\125\015\134\016\136\020\126\026\057\034\102\037" +
    "\137\041\107\042\146\043\113\045\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\004\062" +
    "\013\077\026\057\034\102\037\142\041\107\043\113\045" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\004\062\006\130\007\133\013\077\014\125\015\134\016" +
    "\136\020\126\026\057\034\102\037\137\041\107\042\141" +
    "\043\113\045\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\004\062\006\130\007\133\013\077" +
    "\014\125\015\134\016\136\020\126\026\057\034\102\037" +
    "\137\041\107\042\160\043\113\045\073\001\001\000\040" +
    "\004\062\006\130\007\133\013\077\014\125\015\134\016" +
    "\136\020\126\026\057\034\102\037\137\041\107\042\155" +
    "\043\113\045\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\004\062\013" +
    "\077\026\057\034\102\037\175\041\107\043\113\045\073" +
    "\001\001\000\002\001\001\000\022\004\062\013\077\026" +
    "\057\034\102\037\174\041\107\043\113\045\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\004\062\013" +
    "\077\026\057\034\102\037\173\041\107\043\113\045\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\004\062" +
    "\006\130\007\133\013\077\014\125\015\134\016\136\020" +
    "\126\026\057\034\102\037\137\041\107\042\215\043\113" +
    "\045\073\001\001\000\040\004\062\006\130\007\133\013" +
    "\077\014\125\015\134\016\136\020\126\026\057\034\102" +
    "\037\137\041\107\042\201\043\113\045\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\004\062\013\077\026\057\034\102\037" +
    "\205\041\107\043\113\045\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\004\062\013\077\026\057\034\102\037\212\041\107" +
    "\043\113\045\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\004\062\013" +
    "\077\026\057\034\102\037\222\041\107\043\113\045\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\004\062\013\077\026\057\034" +
    "\102\037\232\041\107\043\113\045\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\004\062" +
    "\013\077\026\057\034\102\037\261\041\107\043\113\045" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\004\062\006\130\007\133\013\077\014\125\015\134\016" +
    "\136\020\126\026\057\034\102\037\137\041\107\042\244" +
    "\043\113\045\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\004\062\006\130\007\133" +
    "\013\077\014\125\015\134\016\136\020\126\026\057\034" +
    "\102\037\137\041\107\042\250\043\113\045\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\004\062\006\130" +
    "\007\133\013\077\014\125\015\134\016\136\020\126\026" +
    "\057\034\102\037\137\041\107\042\257\043\113\045\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\004\062" +
    "\006\130\007\133\013\077\014\125\015\134\016\136\020" +
    "\126\026\057\034\102\037\137\041\107\042\271\043\113" +
    "\045\073\001\001\000\040\004\062\006\130\007\133\013" +
    "\077\014\125\015\134\016\136\020\126\026\057\034\102" +
    "\037\137\041\107\042\265\043\113\045\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\004\062\006\130\007\133\013\077\014\125" +
    "\015\134\016\136\020\126\026\057\034\102\037\137\041" +
    "\107\042\276\043\113\045\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\004\062\006\130\007\133\013\077\014\125\015\134" +
    "\016\136\020\126\026\057\034\102\037\137\041\107\042" +
    "\303\043\113\045\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\027" +
    "\307\033\031\001\001\000\002\001\001\000\006\027\311" +
    "\033\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\004\062\013\077\026\057\034\102" +
    "\037\317\041\107\043\113\045\073\001\001\000\022\004" +
    "\062\013\077\026\057\034\102\037\316\041\107\043\113" +
    "\045\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\004\062\013\077\026\057\034\102\036\322\037\323" +
    "\041\107\043\113\045\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\004\062\013\077" +
    "\026\057\034\102\036\325\037\323\041\107\043\113\045" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\004\062\013\077\026\057\034\102\036\331\037\323\041" +
    "\107\043\113\045\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\027\334\033\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\004\062\013\077\026\057\034\102\037\340\041" +
    "\107\043\113\045\073\001\001\000\002\001\001\000\022" +
    "\004\062\013\077\026\057\034\102\037\342\041\107\043" +
    "\113\045\073\001\001\000\002\001\001\000\012\021\352" +
    "\026\057\035\353\041\354\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\004\062\006\130\007\133\013\077" +
    "\014\125\015\134\016\136\020\126\026\057\034\102\037" +
    "\137\041\107\042\350\043\113\045\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\044\361\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\004\062\013\077\026" +
    "\057\034\102\037\360\041\107\043\113\045\073\001\001" +
    "\000\002\001\001\000\022\004\062\013\077\026\057\034" +
    "\102\037\362\041\107\043\113\045\073\001\001\000\002" +
    "\001\001\000\022\004\062\013\077\026\057\034\102\037" +
    "\364\041\107\043\113\045\073\001\001\000\002\001\001" +
    "\000\022\004\062\013\077\026\057\034\102\037\366\041" +
    "\107\043\113\045\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\004\062\006\130\007\133\013\077\014" +
    "\125\015\134\016\136\020\126\026\057\034\102\037\137" +
    "\041\107\042\376\043\113\045\073\001\001\000\040\004" +
    "\062\006\130\007\133\013\077\014\125\015\134\016\136" +
    "\020\126\026\057\034\102\037\137\041\107\042\373\043" +
    "\113\045\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\026\057\041\u0101\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\u010f\001\001\000\004\010\u0107\001\001\000\004\022\u010d" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\u010a\001\001\000\002\001\001\000\004\022\u010c\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\u0112\001" +
    "\001\000\002\001\001\000\004\022\u0111\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\u0115\001\001\000" +
    "\004\022\u0118\001\001\000\002\001\001\000\004\022\u0117" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\u0123\001\001\000\006\027\u011f\033\031\001\001\000\002" +
    "\001\001\000\004\003\u011d\001\001\000\002\001\001\000" +
    "\004\003\u0122\001\001\000\002\001\001\000\004\003\u0121" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\u0140\001\001\000\002" +
    "\001\001\000\004\024\u0128\001\001\000\002\001\001\000" +
    "\004\023\u012c\001\001\000\022\004\062\013\077\026\057" +
    "\034\102\037\u012b\041\107\043\113\045\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\u012e\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\u0139\001\001\000\004\024\u0134" +
    "\001\001\000\002\001\001\000\004\023\u0136\001\001\000" +
    "\002\001\001\000\004\023\u0138\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\u013b\001\001\000\002\001" +
    "\001\000\004\023\u013d\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\u0140\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\u0143\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\u0146\001\001\000\002\001" +
    "\001\000\004\023\u0148\001\001\000\002\001\001\000\004" +
    "\023\u014a\001\001\000\002\001\001\000\004\024\u014c\001" +
    "\001\000\002\001\001\000\004\023\u014e\001\001\000\002" +
    "\001\001\000\004\023\u0150\001\001\000\002\001\001\000" +
    "\004\023\u0152\001\001\000\002\001\001\000\004\024\u015a" +
    "\001\001\000\004\024\u0155\001\001\000\002\001\001\000" +
    "\004\023\u0157\001\001\000\002\001\001\000\004\023\u0159" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\u015c\001\001\000\002\001\001\000\004\023\u015e\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\u0161\001" +
    "\001\000\002\001\001\000\004\023\u0163\001\001\000\002" +
    "\001\001\000\004\023\u0165\001\001\000\002\001\001\000" +
    "\004\024\u0167\001\001\000\002\001\001\000\004\023\u0169" +
    "\001\001\000\002\001\001\000\004\023\u016b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\u014c\001\001\000\002\001\001\000\004\024\u0177\001" +
    "\001\000\004\024\u0172\001\001\000\002\001\001\000\004" +
    "\023\u0174\001\001\000\002\001\001\000\004\023\u0176\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\u0179" +
    "\001\001\000\002\001\001\000\004\023\u017b\001\001\000" +
    "\002\001\001\000\004\003\u0192\001\001\000\006\027\u018e" +
    "\033\031\001\001\000\002\001\001\000\010\025\u0181\027" +
    "\u0182\033\031\001\001\000\004\003\u018a\001\001\000\006" +
    "\027\u0186\033\031\001\001\000\002\001\001\000\004\003" +
    "\u0184\001\001\000\002\001\001\000\004\003\u0189\001\001" +
    "\000\002\001\001\000\004\003\u0188\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\u018c" +
    "\001\001\000\002\001\001\000\004\003\u0191\001\001\000" +
    "\002\001\001\000\004\003\u0190\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\u0197\001" +
    "\001\000\002\001\001\000\004\003\u0196\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\u01b7\001\001\000\004\011\u019c\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\u01a1\001\001\000\002\001\001" +
    "\000\004\011\u01a3\001\001\000\002\001\001\000\006\030" +
    "\u01a9\031\u01a5\001\001\000\002\001\001\000\004\030\u01b6" +
    "\001\001\000\002\001\001\000\004\030\u01ab\001\001\000" +
    "\004\031\u01aa\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\030\u01be" +
    "\031\u01bd\001\001\000\006\030\u01bb\031\u01ba\001\001\000" +
    "\002\001\001\000\004\031\u01bc\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\u01bf\001\001\000\002\001" +
    "\001\000\004\011\u01c1\001\001\000\002\001\001\000\006" +
    "\030\u01c4\031\u01c3\001\001\000\002\001\001\000\004\031" +
    "\u01c5\001\001\000\002\001\001\000\014\022\u01c8\023\u01c9" +
    "\025\u01c7\027\u01cb\033\031\001\001\000\006\027\u01f2\033" +
    "\031\001\001\000\012\023\u01dd\025\u01db\027\u01dc\033\031" +
    "\001\001\000\010\025\u01d0\027\u01d1\033\031\001\001\000" +
    "\004\003\u01ce\001\001\000\002\001\001\000\004\003\u01cd" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\u01d9\001\001\000\006\027\u01d5\033\031\001\001\000\002" +
    "\001\001\000\004\003\u01d3\001\001\000\002\001\001\000" +
    "\004\003\u01d8\001\001\000\002\001\001\000\004\003\u01d7" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\u01f0\001\001\000\006\027\u01ec\033\031" +
    "\001\001\000\002\001\001\000\010\025\u01df\027\u01e0\033" +
    "\031\001\001\000\004\003\u01e8\001\001\000\006\027\u01e4" +
    "\033\031\001\001\000\002\001\001\000\004\003\u01e2\001" +
    "\001\000\002\001\001\000\004\003\u01e7\001\001\000\002" +
    "\001\001\000\004\003\u01e6\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\u01ea\001\001" +
    "\000\002\001\001\000\004\003\u01ef\001\001\000\002\001" +
    "\001\000\004\003\u01ee\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\u01f5\001\001\000" +
    "\002\001\001\000\004\003\u01f4\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\u01f9\001\001\000\002\001\001\000\004\003\u01fb" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  public ArrayList<Symbol> errores = new ArrayList<>();
  public ArrayList<String> erroresStr = new ArrayList<>();
  
  public void syntax_error(Symbol s) {
    System.out.println("ERROR EN " + s.value + " " + Integer.toString(s.right + 1) + ": " + Integer.toString(s.left + 1) );
    String cadena = "";
    for (int i = this.stack.size() - 1; i > 0; i--) {
      Symbol sp = this.stack.get(i);
       
      System.out.println(sp.value + " " + Integer.toString(sp.right + 1) + ": " + Integer.toString(sp.left + 1) );
      cadena = sp.value + " " + cadena;
      System.out.println(cadena );
        if(sym.T_dato == sp.sym){
            
            for(int j = i-1; j > 0; j--){
                
                sp = this.stack.get(j);
                //cadena = sp.value + " " + cadena;
                System.out.println(sp.value + " " + Integer.toString(sp.right + 1) + ": " + Integer.toString(sp.left + 1) );
                System.out.println(cadena );
                if ("struct".equals(sp.value)) {
                cadena += "~" + s.value + "~ ...";
                Symbol sp2 = new Symbol(sp.sym, sp.left, sp.right, cadena);
                errores.add(sp2);
                erroresStr.add("Variable_Struct");
                break;
                }
                if ("function".equals(sp.value)) {
                cadena += "~" + s.value + "~ ...";
                Symbol sp2 = new Symbol(sp.sym, sp.left, sp.right, cadena);
                errores.add(sp2);
                erroresStr.add("Parametro_Function");
                break;
                }
                if ("returns".equals(sp.value)) {
                cadena += "~" + s.value + "~ ...";
                Symbol sp2 = new Symbol(sp.sym, sp.left, sp.right, cadena);
                errores.add(sp2);
                erroresStr.add("Returns_Function");
                break;
                }
                
            }
            break;  
        }
      if ("enum".equals(sp.value)) {
        System.out.println("Soy un error de enum xd");
        //System.out.println("Soy un error de enum xd");
        cadena += "~" + s.value + "~ ...";
        //if (this.lookahead != null) for (Symbol x : this.lookahead) System.out.println(x.value);
        Symbol sp2 = new Symbol(sp.sym, sp.left, sp.right, cadena);
        errores.add(sp2);
        erroresStr.add("Enum");
        break;
      }
      if ("struct".equals(sp.value)) {
        //System.out.println("Soy un error de struct chama");
        cadena += "~" + s.value + "~ ...";
        //if (this.lookahead != null) for (Symbol x : this.lookahead) System.out.println(x.value);
        Symbol sp2 = new Symbol(sp.sym, sp.left, sp.right, cadena);
        errores.add(sp2);
        erroresStr.add("Struct");
        break;
      }
      if ("function".equals(sp.value)) {
        System.out.println("Soy un error de function chama");
        cadena += "~" + s.value + "~ ...";
        System.out.println(cadena);
        //if (this.lookahead != null) for (Symbol x : this.lookahead) System.out.println(x.value);
        Symbol sp2 = new Symbol(sp.sym, sp.left, sp.right, cadena);
        errores.add(sp2);
        erroresStr.add("Function");
        break;
      }
      if ("pragma".equals(sp.value)) {
        //System.out.println("Soy un error de inicio");
        cadena += "~" + s.value + "~ ...";
        //if (this.lookahead != null) for (Symbol x : this.lookahead) System.out.println(x.value);
        Symbol sp2 = new Symbol(sp.sym, sp.left, sp.right, cadena);
        errores.add(sp2);
        erroresStr.add("Inicio");
        break;
      }
      if (";".equals(sp.value)) {
        //System.out.println("Soy un error de Expresion");
        cadena += "~" + s.value + "~ ...";
        //if (this.lookahead != null) for (Symbol x : this.lookahead) System.out.println(x.value);
        Symbol sp2 = new Symbol(sp.sym, sp.left, sp.right, cadena);
        errores.add(sp2);
        erroresStr.add("Expresion");
        break;
      }
      if ("contract".equals(sp.value)) {
        //System.out.println("Soy un error de inicio");
        cadena += "~" + s.value + "~ ...";
        //if (this.lookahead != null) for (Symbol x : this.lookahead) System.out.println(x.value);
        Symbol sp2 = new Symbol(sp.sym, sp.left, sp.right, cadena);
        errores.add(sp2);
        erroresStr.add("Inicio");
        break;
      }
      if ("if".equals(sp.value)) {
        //System.out.println("Soy un error de if");
        cadena += "~" + s.value + "~ ...";
        //if (this.lookahead != null) for (Symbol x : this.lookahead) System.out.println(x.value);
        Symbol sp2 = new Symbol(sp.sym, sp.left, sp.right, cadena);

        errores.add(sp2);
        erroresStr.add("If");
        

        break;
      }
      if ("for".equals(sp.value)) {
        //System.out.println("Soy un error de for");
        cadena += "~" + s.value + "~ ...";
        //if (this.lookahead != null) for (Symbol x : this.lookahead) System.out.println(x.value);
        Symbol sp2 = new Symbol(sp.sym, sp.left, sp.right, cadena);
        errores.add(sp2);
        erroresStr.add("For");

        break;
      }
      if ("while".equals(sp.value)) {
        //System.out.println("Soy un error de while");
        cadena += "~" + s.value + "~ ...";
        //if (this.lookahead != null) for (Symbol x : this.lookahead) System.out.println(x.value);
        Symbol sp2 = new Symbol(sp.sym, sp.left, sp.right, cadena);
        errores.add(sp2);
        erroresStr.add("While");

        break;
      }
      if ("do".equals(sp.value)) {
        //System.out.println("Soy un error de do");
        cadena += "~" + s.value + "~ ...";
        //if (this.lookahead != null) for (Symbol x : this.lookahead) System.out.println(x.value);
        Symbol sp2 = new Symbol(sp.sym, sp.left, sp.right, cadena);
        errores.add(sp2);
        erroresStr.add("Do");

        break;
      }
        }
  }
  @Override
  public int error_sync_size() {
    return 2;
  }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // SENTENCIA_FOR ::= ASIGNACION_COMPLEJA P_coma EXPRESION P_coma EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c error Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c error CUERPO_EC Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // FOR ::= For error Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // FOR ::= For error Parentesis_c Llave_a CUERPO_EC Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a CUERPO_EC Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // DO_WHILE ::= Do Llave_a Llave_c error P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // DO_WHILE ::= Do Llave_a CUERPO_EC Llave_c error P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // DO_WHILE ::= Do error Llave_c While Parentesis_a EXPRESION Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // DO_WHILE ::= Do error CUERPO_EC Llave_c While Parentesis_a EXPRESION Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // DO_WHILE ::= Do Llave_a Llave_c While Parentesis_a EXPRESION Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // DO_WHILE ::= Do Llave_a CUERPO_EC Llave_c While Parentesis_a EXPRESION Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // WHILE ::= While Parentesis_a EXPRESION Parentesis_c error Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // WHILE ::= While Parentesis_a EXPRESION Parentesis_c error CUERPO_EC Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // WHILE ::= While error Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // WHILE ::= While error Parentesis_c Llave_a CUERPO_EC Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // WHILE ::= While Parentesis_a EXPRESION Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // WHILE ::= While Parentesis_a EXPRESION Parentesis_c Llave_a CUERPO_EC Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // IF_ELSE ::= If error Parentesis_c Llave_a Llave_c Else Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // IF_ELSE ::= If error Parentesis_c Llave_a Llave_c Else Llave_a CUERPO_EC Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // IF_ELSE ::= If error Parentesis_c Llave_a CUERPO_EC Llave_c Else Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // IF_ELSE ::= If error Parentesis_c Llave_a CUERPO_EC Llave_c Else Llave_a CUERPO_EC Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // IF_ELSE ::= If Parentesis_a EXPRESION Parentesis_c Llave_a Llave_c Else Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // IF_ELSE ::= If Parentesis_a EXPRESION Parentesis_c Llave_a Llave_c Else Llave_a CUERPO_EC Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // IF_ELSE ::= If Parentesis_a EXPRESION Parentesis_c Llave_a CUERPO_EC Llave_c Else Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // IF_ELSE ::= If Parentesis_a EXPRESION Parentesis_c Llave_a CUERPO_EC Llave_c Else Llave_a CUERPO_EC Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // EXPRESION_BOOLEANA ::= P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEANA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // IF ::= If Parentesis_a EXPRESION Parentesis_c error Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // IF ::= If Parentesis_a EXPRESION Parentesis_c error CUERPO_EC Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // IF ::= If error Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // IF ::= If error Parentesis_c Llave_a CUERPO_EC Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // IF ::= If Parentesis_a EXPRESION Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // IF ::= If Parentesis_a EXPRESION Parentesis_c Llave_a CUERPO_EC Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // OP_TERNARIO ::= Parentesis_a EXPRESION Parentesis_c Pregunta EXPRESION Dos_Puntos EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_TERNARIO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // CUERPO_EC ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO_EC",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // CUERPO_EC ::= EXPRESION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO_EC",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // CUERPO_EC ::= SENTENCIA CUERPO_EC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO_EC",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // CUERPO_EC ::= EXPRESION P_coma CUERPO_EC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO_EC",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // SENTENCIA ::= Return EXPRESION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // SENTENCIA ::= Continue P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // SENTENCIA ::= Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // ESTRUCTURA_CONTROL ::= Return EXPRESION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CONTROL",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // ESTRUCTURA_CONTROL ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CONTROL",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // ESTRUCTURA_CONTROL ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CONTROL",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // ESTRUCTURA_CONTROL ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CONTROL",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // ESTRUCTURA_CONTROL ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CONTROL",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // ESTRUCTURA_CONTROL ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CONTROL",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // OP_UNARIO ::= Not 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_UNARIO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // OP_UNARIO ::= Menos 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_UNARIO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // OP_UNARIO ::= Mas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_UNARIO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // OP_ARITMETICO ::= Menos 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // OP_ARITMETICO ::= Mas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // OP_ARITMETICO ::= Op_Aritmetico 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // EXPRESION_AUX ::= IDENTIFICADOR_CUERPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_AUX",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // EXPRESION_AUX ::= LITERAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_AUX",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // EXPRESION_AUX ::= IDENTIFICADOR_CUERPO Op_logico EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_AUX",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // EXPRESION_AUX ::= LITERAL Op_logico EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_AUX",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // EXPRESION_AUX ::= IDENTIFICADOR_CUERPO OP_ARITMETICO EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_AUX",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // EXPRESION_AUX ::= LITERAL OP_ARITMETICO EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_AUX",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // EXPRESION_AUX ::= OP_UNARIO EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_AUX",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // EXPRESION_AUX ::= Parentesis_a EXPRESION Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_AUX",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // EXPRESION ::= OP_TERNARIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // EXPRESION ::= ASIGNACION_BASICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // EXPRESION ::= EXPRESION_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // LITERAL ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // LITERAL ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // LITERAL ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LITERAL",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // ARGUMENTOS ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // ARGUMENTOS ::= EXPRESION Coma ARGUMENTOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // ATRIBUCION_IGUAL ::= Igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATRIBUCION_IGUAL",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // ATRIBUCION_IGUAL ::= Op_atribucion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATRIBUCION_IGUAL",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // ASIGNACION_COMPLEJA ::= T_dato Identificador Igual EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION_COMPLEJA",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // ASIGNACION_COMPLEJA ::= IDENTIFICADOR_CUERPO ATRIBUCION_IGUAL EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION_COMPLEJA",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // ASIGNACION_BASICA ::= IDENTIFICADOR_CUERPO ATRIBUCION_IGUAL EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION_BASICA",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // IDENTIFICADOR_CUERPO ::= IDENTIFICADOR_COMPLEJO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_CUERPO",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // IDENTIFICADOR_CUERPO ::= IDENTIFICADOR_COMPLEJO Punto IDENTIFICADOR_CUERPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_CUERPO",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // IDENTIFICADOR_COMPLEJO ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_COMPLEJO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // IDENTIFICADOR_COMPLEJO ::= Identificador Parentesis_a ARGUMENTOS Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_COMPLEJO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // IDENTIFICADOR_COMPLEJO ::= Identificador Parentesis_a Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_COMPLEJO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // IDENTIFICADOR_COMPLEJO ::= This 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_COMPLEJO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // IDENTIFICADOR_COMPLEJO ::= This Parentesis_a ARGUMENTOS Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_COMPLEJO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // IDENTIFICADOR_COMPLEJO ::= This Parentesis_a Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_COMPLEJO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // CUERPO ::= ESTRUCTURA_CONTROL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // CUERPO ::= EXPRESION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // CUERPO ::= ESTRUCTURA_CONTROL CUERPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // CUERPO ::= EXPRESION P_coma CUERPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // MODIFICADORES ::= Visibilidad 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // MODIFICADORES ::= Modificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // MODIFICADORES ::= Visibilidad MODIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // MODIFICADORES ::= Modificador MODIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // PARAMETROS ::= T_dato error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // PARAMETROS ::= T_dato error Coma PARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // PARAMETROS ::= T_dato Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // PARAMETROS ::= T_dato Identificador Coma PARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // RETURNS ::= Returns Parentesis_a T_dato error Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURNS",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // RETURNS ::= Returns error T_dato Identificador Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURNS",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // RETURNS ::= Returns Parentesis_a T_dato Identificador Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURNS",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // FUNCION ::= FUNCION_HEADER Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // FUNCION ::= FUNCION_HEADER Llave_a CUERPO Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // FUNCION ::= FUNCION_HEADER Llave_a VARIABLES CUERPO Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // FUNCION ::= FUNCION_HEADER Llave_a VARIABLES Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // FUNCION ::= FUNCION_HEADER Llave_a Llave_c FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // FUNCION ::= FUNCION_HEADER Llave_a CUERPO Llave_c FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // FUNCION ::= FUNCION_HEADER Llave_a VARIABLES CUERPO Llave_c FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // FUNCION ::= FUNCION_HEADER Llave_a VARIABLES Llave_c FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // FUNCION_HEADER ::= Function Identificador Parentesis_a PARAMETROS error MODIFICADORES RETURNS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_HEADER",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // FUNCION_HEADER ::= Function Identificador Parentesis_a PARAMETROS error RETURNS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_HEADER",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // FUNCION_HEADER ::= Function Identificador Parentesis_a PARAMETROS error MODIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_HEADER",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // FUNCION_HEADER ::= Function Identificador Parentesis_a PARAMETROS error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_HEADER",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // FUNCION_HEADER ::= Function Identificador error PARAMETROS Parentesis_c MODIFICADORES RETURNS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_HEADER",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // FUNCION_HEADER ::= Function Identificador error PARAMETROS Parentesis_c RETURNS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_HEADER",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // FUNCION_HEADER ::= Function Identificador error PARAMETROS Parentesis_c MODIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_HEADER",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // FUNCION_HEADER ::= Function Identificador error PARAMETROS Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_HEADER",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // FUNCION_HEADER ::= Function error Parentesis_a PARAMETROS Parentesis_c MODIFICADORES RETURNS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_HEADER",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // FUNCION_HEADER ::= Function error Parentesis_a PARAMETROS Parentesis_c RETURNS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_HEADER",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // FUNCION_HEADER ::= Function error Parentesis_a PARAMETROS Parentesis_c MODIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_HEADER",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // FUNCION_HEADER ::= Function error Parentesis_a PARAMETROS Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_HEADER",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // FUNCION_HEADER ::= Function Identificador Parentesis_a PARAMETROS Parentesis_c MODIFICADORES RETURNS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_HEADER",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // FUNCION_HEADER ::= Function Identificador Parentesis_a PARAMETROS Parentesis_c RETURNS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_HEADER",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // FUNCION_HEADER ::= Function Identificador Parentesis_a PARAMETROS Parentesis_c MODIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_HEADER",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // FUNCION_HEADER ::= Function Identificador Parentesis_a PARAMETROS Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_HEADER",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // ESTRUCTURA ::= Struct Identificador error VARIABLES Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // ESTRUCTURA ::= Struct error Llave_a VARIABLES Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ESTRUCTURA ::= Struct Identificador error VARIABLES Llave_c ESTRUCTURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ESTRUCTURA ::= Struct error Llave_a VARIABLES Llave_c ESTRUCTURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ESTRUCTURA ::= Struct Identificador Llave_a VARIABLES Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ESTRUCTURA ::= Struct Identificador Llave_a VARIABLES Llave_c ESTRUCTURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ASIGNACION ::= Igual EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // VARIABLES ::= T_dato Corchete_a error Identificador ASIGNACION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // VARIABLES ::= T_dato Corchete_a error Visibilidad Identificador ASIGNACION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // VARIABLES ::= T_dato Corchete_a error Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // VARIABLES ::= T_dato Corchete_a error Visibilidad Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // VARIABLES ::= T_dato Corchete_a error Identificador ASIGNACION P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // VARIABLES ::= T_dato Corchete_a error Visibilidad Identificador ASIGNACION P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // VARIABLES ::= T_dato Corchete_a error Identificador P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // VARIABLES ::= T_dato Corchete_a error Visibilidad Identificador P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // VARIABLES ::= T_dato error Corchete_c Identificador ASIGNACION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // VARIABLES ::= T_dato error Corchete_c Visibilidad Identificador ASIGNACION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // VARIABLES ::= T_dato error Corchete_c Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // VARIABLES ::= T_dato error Corchete_c Visibilidad Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // VARIABLES ::= T_dato error Corchete_c Identificador ASIGNACION P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // VARIABLES ::= T_dato error Corchete_c Visibilidad Identificador ASIGNACION P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // VARIABLES ::= T_dato error Corchete_c Identificador P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // VARIABLES ::= T_dato Corchete_a Corchete_c error ASIGNACION P_coma T_dato error Corchete_c Visibilidad Identificador P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // VARIABLES ::= T_dato Corchete_a Corchete_c Visibilidad error ASIGNACION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // VARIABLES ::= T_dato error ASIGNACION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // VARIABLES ::= T_dato Visibilidad error ASIGNACION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // VARIABLES ::= T_dato Corchete_a Corchete_c error P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // VARIABLES ::= T_dato Corchete_a Corchete_c Visibilidad error P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // VARIABLES ::= T_dato error P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // VARIABLES ::= T_dato Visibilidad error P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // VARIABLES ::= T_dato Corchete_a Corchete_c error ASIGNACION P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // VARIABLES ::= T_dato Corchete_a Corchete_c Visibilidad error ASIGNACION P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // VARIABLES ::= T_dato error ASIGNACION P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // VARIABLES ::= T_dato Visibilidad error ASIGNACION P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // VARIABLES ::= T_dato Corchete_a Corchete_c error P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // VARIABLES ::= T_dato Corchete_a Corchete_c Visibilidad error P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // VARIABLES ::= T_dato error P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // VARIABLES ::= T_dato Visibilidad error P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // VARIABLES ::= T_dato Corchete_a Corchete_c Identificador ASIGNACION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // VARIABLES ::= T_dato Corchete_a Corchete_c Visibilidad Identificador ASIGNACION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // VARIABLES ::= T_dato Identificador ASIGNACION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // VARIABLES ::= T_dato Visibilidad Identificador ASIGNACION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // VARIABLES ::= T_dato Corchete_a Corchete_c Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // VARIABLES ::= T_dato Corchete_a Corchete_c Visibilidad Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // VARIABLES ::= T_dato Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // VARIABLES ::= T_dato Visibilidad Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // VARIABLES ::= T_dato Corchete_a Corchete_c Identificador ASIGNACION P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // VARIABLES ::= T_dato Corchete_a Corchete_c Visibilidad Identificador ASIGNACION P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // VARIABLES ::= T_dato Identificador ASIGNACION P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // VARIABLES ::= T_dato Visibilidad Identificador ASIGNACION P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // VARIABLES ::= T_dato Corchete_a Corchete_c Identificador P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // VARIABLES ::= T_dato Corchete_a Corchete_c Visibilidad Identificador P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // VARIABLES ::= T_dato Identificador P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // VARIABLES ::= T_dato Visibilidad Identificador P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // LISTA ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // LISTA ::= Identificador Coma LISTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ENUMERADOR ::= Enum Identificador error Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ENUMERADOR ::= Enum Identificador error LISTA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ENUMERADOR ::= Enum error Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ENUMERADOR ::= Enum error Llave_a LISTA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ENUMERADOR ::= Enum Identificador error Llave_c ENUMERADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ENUMERADOR ::= Enum Identificador error LISTA Llave_c ENUMERADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ENUMERADOR ::= Enum error Llave_a Llave_c ENUMERADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ENUMERADOR ::= Enum error Llave_a LISTA Llave_c ENUMERADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ENUMERADOR ::= Enum Identificador Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ENUMERADOR ::= Enum Identificador Llave_a LISTA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ENUMERADOR ::= Enum Identificador Llave_a Llave_c ENUMERADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ENUMERADOR ::= Enum Identificador Llave_a LISTA Llave_c ENUMERADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CONTRATO ::= Contract error Llave_a FUNCION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CONTRATO ::= Contract error Llave_a ESTRUCTURA FUNCION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CONTRATO ::= Contract error Llave_a ESTRUCTURA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CONTRATO ::= Contract error Llave_a VARIABLES ESTRUCTURA FUNCION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CONTRATO ::= Contract error Llave_a VARIABLES FUNCION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CONTRATO ::= Contract error Llave_a VARIABLES ESTRUCTURA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CONTRATO ::= Contract error Llave_a VARIABLES Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CONTRATO ::= Contract error Llave_a ENUMERADOR VARIABLES ESTRUCTURA FUNCION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CONTRATO ::= Contract error Llave_a ENUMERADOR ESTRUCTURA FUNCION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CONTRATO ::= Contract error Llave_a ENUMERADOR VARIABLES FUNCION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CONTRATO ::= Contract error Llave_a ENUMERADOR VARIABLES ESTRUCTURA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CONTRATO ::= Contract error Llave_a ENUMERADOR FUNCION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CONTRATO ::= Contract error Llave_a ENUMERADOR ESTRUCTURA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CONTRATO ::= Contract error Llave_a ENUMERADOR VARIABLES Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CONTRATO ::= Contract error Llave_a ENUMERADOR Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CONTRATO ::= Contract error Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CONTRATO ::= Contract error Llave_a FUNCION Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CONTRATO ::= Contract error Llave_a ESTRUCTURA FUNCION Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CONTRATO ::= Contract error Llave_a ESTRUCTURA Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CONTRATO ::= Contract error Llave_a VARIABLES ESTRUCTURA FUNCION Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CONTRATO ::= Contract error Llave_a VARIABLES FUNCION Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CONTRATO ::= Contract error Llave_a VARIABLES ESTRUCTURA Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CONTRATO ::= Contract error Llave_a VARIABLES Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CONTRATO ::= Contract error Llave_a ENUMERADOR VARIABLES ESTRUCTURA FUNCION Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CONTRATO ::= Contract error Llave_a ENUMERADOR ESTRUCTURA FUNCION Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CONTRATO ::= Contract error Llave_a ENUMERADOR VARIABLES FUNCION Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CONTRATO ::= Contract error Llave_a ENUMERADOR VARIABLES ESTRUCTURA Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CONTRATO ::= Contract error Llave_a ENUMERADOR FUNCION Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CONTRATO ::= Contract error Llave_a ENUMERADOR ESTRUCTURA Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CONTRATO ::= Contract error Llave_a ENUMERADOR VARIABLES Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CONTRATO ::= Contract error Llave_a ENUMERADOR Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CONTRATO ::= Contract error Llave_a Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CONTRATO ::= Contract Identificador Llave_a FUNCION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONTRATO ::= Contract Identificador Llave_a ESTRUCTURA FUNCION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONTRATO ::= Contract Identificador Llave_a ESTRUCTURA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONTRATO ::= Contract Identificador Llave_a VARIABLES ESTRUCTURA FUNCION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONTRATO ::= Contract Identificador Llave_a VARIABLES FUNCION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONTRATO ::= Contract Identificador Llave_a VARIABLES ESTRUCTURA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONTRATO ::= Contract Identificador Llave_a VARIABLES Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR VARIABLES ESTRUCTURA FUNCION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR ESTRUCTURA FUNCION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR VARIABLES FUNCION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR VARIABLES ESTRUCTURA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR FUNCION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR ESTRUCTURA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR VARIABLES Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CONTRATO ::= Contract Identificador Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CONTRATO ::= Contract Identificador Llave_a FUNCION Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CONTRATO ::= Contract Identificador Llave_a ESTRUCTURA FUNCION Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CONTRATO ::= Contract Identificador Llave_a ESTRUCTURA Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CONTRATO ::= Contract Identificador Llave_a VARIABLES ESTRUCTURA FUNCION Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CONTRATO ::= Contract Identificador Llave_a VARIABLES FUNCION Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONTRATO ::= Contract Identificador Llave_a VARIABLES ESTRUCTURA Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CONTRATO ::= Contract Identificador Llave_a VARIABLES Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR VARIABLES ESTRUCTURA FUNCION Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR ESTRUCTURA FUNCION Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR VARIABLES FUNCION Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR VARIABLES ESTRUCTURA Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR FUNCION Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR ESTRUCTURA Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR VARIABLES Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CONTRATO ::= Contract Identificador Llave_a Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= Pragma Solidity Caret Numero Numero P_coma error CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= Pragma error P_coma CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Pragma Solidity Caret Numero Numero P_coma CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Pragma Solidity Numero Numero P_coma CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

