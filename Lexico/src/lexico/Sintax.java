
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jul 23 01:12:41 CST 2020
//----------------------------------------------------

package lexico;

import java_cup.runtime.Symbol;
import java.util.Stack;
import java.util.ArrayList;
import java.util.Iterator;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jul 23 01:12:41 CST 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\314\000\002\002\004\000\002\002\010\000\002\002" +
    "\011\000\002\003\007\000\002\003\010\000\002\003\011" +
    "\000\002\003\011\000\002\003\011\000\002\003\012\000" +
    "\002\003\012\000\002\003\012\000\002\003\013\000\002" +
    "\003\010\000\002\003\011\000\002\003\011\000\002\003" +
    "\012\000\002\003\010\000\002\003\011\000\002\003\010" +
    "\000\002\003\006\000\002\003\007\000\002\003\010\000" +
    "\002\003\010\000\002\003\010\000\002\003\011\000\002" +
    "\003\011\000\002\003\011\000\002\003\012\000\002\003" +
    "\007\000\002\003\010\000\002\003\010\000\002\003\011" +
    "\000\002\003\007\000\002\003\010\000\002\003\007\000" +
    "\002\020\010\000\002\020\007\000\002\020\007\000\002" +
    "\020\006\000\002\020\010\000\002\020\007\000\002\020" +
    "\010\000\002\020\007\000\002\020\007\000\002\020\006" +
    "\000\002\020\007\000\002\020\006\000\002\010\005\000" +
    "\002\010\003\000\002\021\007\000\002\021\006\000\002" +
    "\021\011\000\002\021\010\000\002\021\010\000\002\021" +
    "\007\000\002\021\012\000\002\021\011\000\002\021\006" +
    "\000\002\021\005\000\002\021\010\000\002\021\007\000" +
    "\002\021\007\000\002\021\006\000\002\021\011\000\002" +
    "\021\010\000\002\021\007\000\002\021\006\000\002\021" +
    "\011\000\002\021\010\000\002\021\010\000\002\021\007" +
    "\000\002\021\012\000\002\021\011\000\002\021\006\000" +
    "\002\021\005\000\002\021\010\000\002\021\007\000\002" +
    "\021\007\000\002\021\006\000\002\021\011\000\002\021" +
    "\017\000\002\021\010\000\002\021\012\000\002\021\011" +
    "\000\002\021\010\000\002\021\007\000\002\021\011\000" +
    "\002\021\010\000\002\021\011\000\002\021\010\000\002" +
    "\021\012\000\002\021\011\000\002\021\010\000\002\021" +
    "\007\000\002\021\011\000\002\021\010\000\002\022\004" +
    "\000\002\023\010\000\002\023\007\000\002\023\010\000" +
    "\002\023\010\000\002\023\007\000\002\023\007\000\002" +
    "\030\007\000\002\030\010\000\002\030\010\000\002\030" +
    "\011\000\002\024\012\000\002\024\013\000\002\024\012" +
    "\000\002\024\011\000\002\024\011\000\002\024\012\000" +
    "\002\024\011\000\002\024\010\000\002\026\007\000\002" +
    "\011\006\000\002\011\004\000\002\025\004\000\002\025" +
    "\004\000\002\025\003\000\002\025\003\000\002\027\004" +
    "\000\002\027\005\000\002\027\004\000\002\027\003\000" +
    "\002\027\004\000\002\027\003\000\002\037\007\000\002" +
    "\037\010\000\002\037\005\000\002\037\010\000\002\037" +
    "\007\000\002\037\005\000\002\031\006\000\002\031\006" +
    "\000\002\032\006\000\002\032\007\000\002\032\006\000" +
    "\002\033\006\000\002\033\005\000\002\034\005\000\002" +
    "\034\003\000\002\035\003\000\002\035\003\000\002\041" +
    "\005\000\002\041\005\000\002\041\005\000\002\041\005" +
    "\000\002\041\005\000\002\041\005\000\002\041\005\000" +
    "\002\041\005\000\002\041\005\000\002\041\005\000\002" +
    "\041\005\000\002\041\005\000\002\041\003\000\002\041" +
    "\003\000\002\041\003\000\002\041\003\000\002\041\003" +
    "\000\002\041\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\004\000\002\016\004" +
    "\000\002\016\005\000\002\040\004\000\002\040\005\000" +
    "\002\040\004\000\002\040\003\000\002\040\004\000\002" +
    "\040\003\000\002\004\011\000\002\006\011\000\002\006" +
    "\010\000\002\015\003\000\002\007\015\000\002\007\014" +
    "\000\002\007\014\000\002\007\013\000\002\012\011\000" +
    "\002\012\010\000\002\013\013\000\002\013\012\000\002" +
    "\014\011\000\002\014\010\000\002\017\007\000\002\017" +
    "\006\000\002\017\006\000\002\017\006\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u019c\000\004\037\004\001\002\000\004\040\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\006\034\010\045\011\001\002\000\004\034\u019c\001" +
    "\002\000\004\034\012\001\002\000\004\034\013\001\002" +
    "\000\004\032\014\001\002\000\004\035\015\001\002\000" +
    "\004\033\017\001\002\000\004\002\uffff\001\002\000\004" +
    "\025\020\001\002\000\014\006\024\026\031\036\026\041" +
    "\030\042\021\001\002\000\004\033\u0188\001\002\000\006" +
    "\026\u0183\042\021\001\002\000\012\006\024\026\u016c\041" +
    "\030\042\021\001\002\000\012\003\u0115\027\u0116\033\u0117" +
    "\056\u0114\001\002\000\010\026\u0109\041\030\042\021\001" +
    "\002\000\006\003\362\033\363\001\002\000\004\025\054" +
    "\001\002\000\006\003\036\033\037\001\002\000\006\002" +
    "\uffee\035\015\001\002\000\004\026\033\001\002\000\006" +
    "\002\uffdf\035\015\001\002\000\004\002\uffef\001\002\000" +
    "\004\002\ufffe\001\002\000\004\025\050\001\002\000\006" +
    "\003\041\025\040\001\002\000\004\006\024\001\002\000" +
    "\004\006\024\001\002\000\004\026\043\001\002\000\010" +
    "\026\uff9b\041\030\042\uff9b\001\002\000\006\026\uff9d\042" +
    "\uff9d\001\002\000\004\026\046\001\002\000\010\026\uff9f" +
    "\041\030\042\uff9f\001\002\000\006\026\uffa0\042\uffa0\001" +
    "\002\000\004\006\024\001\002\000\004\026\052\001\002" +
    "\000\010\026\uff9c\041\030\042\uff9c\001\002\000\006\026" +
    "\uff9e\042\uff9e\001\002\000\032\006\024\010\074\012\076" +
    "\013\101\014\055\022\063\023\056\033\065\034\060\047" +
    "\064\052\104\053\075\001\002\000\004\023\321\001\002" +
    "\000\016\022\063\023\056\033\112\034\060\047\064\052" +
    "\104\001\002\000\012\015\uff71\024\uff71\032\uff71\044\uff71" +
    "\001\002\000\016\015\uff64\017\307\024\uff64\032\uff64\044" +
    "\uff64\055\310\001\002\000\004\053\302\001\002\000\030" +
    "\010\uff5c\012\uff5c\013\uff5c\014\uff5c\022\uff5c\023\uff5c\033" +
    "\uff5c\034\uff5c\047\uff5c\052\uff5c\053\uff5c\001\002\000\016" +
    "\015\uff62\017\276\024\uff62\032\uff62\044\uff62\055\277\001" +
    "\002\000\004\046\270\001\002\000\016\016\265\017\122" +
    "\023\121\032\uff61\046\124\055\123\001\002\000\030\010" +
    "\uff5d\012\uff5d\013\uff5d\014\uff5d\022\uff5d\023\uff5d\033\uff5d" +
    "\034\uff5d\047\uff5d\052\uff5d\053\uff5d\001\002\000\016\015" +
    "\uff60\017\261\024\uff60\032\uff60\044\uff60\055\262\001\002" +
    "\000\030\010\uff5e\012\uff5e\013\uff5e\014\uff5e\022\uff5e\023" +
    "\uff5e\033\uff5e\034\uff5e\047\uff5e\052\uff5e\053\uff5e\001\002" +
    "\000\030\010\074\012\076\013\101\014\055\022\063\023" +
    "\056\033\065\034\060\047\064\052\104\053\247\001\002" +
    "\000\030\010\uff5b\012\uff5b\013\uff5b\014\uff5b\022\uff5b\023" +
    "\uff5b\033\uff5b\034\uff5b\047\uff5b\052\uff5b\053\uff5b\001\002" +
    "\000\030\010\074\012\076\013\101\014\055\022\063\023" +
    "\056\033\065\034\060\047\064\052\104\053\uff84\001\002" +
    "\000\004\023\224\001\002\000\016\022\063\023\056\033" +
    "\112\034\060\047\064\052\104\001\002\000\004\025\202" +
    "\001\002\000\012\016\177\017\115\032\uff5f\055\116\001" +
    "\002\000\030\010\074\012\076\013\101\014\055\022\063" +
    "\023\056\033\065\034\060\047\064\052\104\053\uff82\001" +
    "\002\000\004\023\143\001\002\000\030\010\uff5a\012\uff5a" +
    "\013\uff5a\014\uff5a\022\uff5a\023\uff5a\033\uff5a\034\uff5a\047" +
    "\uff5a\052\uff5a\053\uff5a\001\002\000\012\015\uff72\024\uff72" +
    "\032\uff72\044\uff72\001\002\000\016\015\uff63\017\110\024" +
    "\uff63\032\uff63\044\uff63\055\111\001\002\000\004\032\106" +
    "\001\002\000\030\010\074\012\076\013\101\014\055\022" +
    "\063\023\056\033\065\034\060\047\064\052\104\053\uff83" +
    "\001\002\000\004\053\uff86\001\002\000\016\022\063\023" +
    "\056\033\112\034\060\047\064\052\104\001\002\000\016" +
    "\022\063\023\056\033\112\034\060\047\064\052\104\001" +
    "\002\000\022\015\uff61\017\122\023\121\024\uff61\032\uff61" +
    "\044\uff61\046\124\055\123\001\002\000\016\015\uff5f\017" +
    "\115\024\uff5f\032\uff5f\044\uff5f\055\116\001\002\000\012" +
    "\015\uff6f\024\uff6f\032\uff6f\044\uff6f\001\002\000\016\022" +
    "\063\023\056\033\112\034\060\047\064\052\104\001\002" +
    "\000\016\022\063\023\056\033\112\034\060\047\064\052" +
    "\104\001\002\000\012\015\uff6b\024\uff6b\032\uff6b\044\uff6b" +
    "\001\002\000\012\015\uff65\024\uff65\032\uff65\044\uff65\001" +
    "\002\000\020\022\063\023\056\024\137\033\112\034\060" +
    "\047\064\052\104\001\002\000\016\022\063\023\056\033" +
    "\112\034\060\047\064\052\104\001\002\000\016\022\063" +
    "\023\056\033\112\034\060\047\064\052\104\001\002\000" +
    "\004\033\125\001\002\000\022\015\uff7c\016\uff7c\017\uff7c" +
    "\023\126\024\uff7c\032\uff7c\044\uff7c\055\uff7c\001\002\000" +
    "\020\022\063\023\056\024\127\033\112\034\060\047\064" +
    "\052\104\001\002\000\020\015\uff7d\016\uff7d\017\uff7d\024" +
    "\uff7d\032\uff7d\044\uff7d\055\uff7d\001\002\000\004\024\134" +
    "\001\002\000\006\024\uff73\044\132\001\002\000\016\022" +
    "\063\023\056\033\112\034\060\047\064\052\104\001\002" +
    "\000\004\024\uff74\001\002\000\020\015\uff7e\016\uff7e\017" +
    "\uff7e\024\uff7e\032\uff7e\044\uff7e\055\uff7e\001\002\000\012" +
    "\015\uff6d\024\uff6d\032\uff6d\044\uff6d\001\002\000\012\015" +
    "\uff67\024\uff67\032\uff67\044\uff67\001\002\000\016\015\uff75" +
    "\017\uff75\024\uff75\032\uff75\044\uff75\055\uff75\001\002\000" +
    "\004\024\141\001\002\000\016\015\uff76\017\uff76\024\uff76" +
    "\032\uff76\044\uff76\055\uff76\001\002\000\012\015\uff69\024" +
    "\uff69\032\uff69\044\uff69\001\002\000\016\022\063\023\056" +
    "\033\112\034\060\047\064\052\104\001\002\000\004\024" +
    "\146\001\002\000\004\024\uff48\001\002\000\004\025\147" +
    "\001\002\000\036\010\074\012\076\013\101\014\055\022" +
    "\063\023\056\026\156\033\065\034\060\047\064\050\153" +
    "\051\150\052\104\053\162\001\002\000\004\032\175\001" +
    "\002\000\036\010\uff57\012\uff57\013\uff57\014\uff57\022\uff57" +
    "\023\uff57\026\uff57\033\uff57\034\uff57\047\uff57\050\uff57\051" +
    "\uff57\052\uff57\053\uff57\001\002\000\036\010\074\012\076" +
    "\013\101\014\055\022\063\023\056\026\uff4c\033\065\034" +
    "\060\047\064\050\153\051\150\052\104\053\162\001\002" +
    "\000\004\032\173\001\002\000\036\010\uff58\012\uff58\013" +
    "\uff58\014\uff58\022\uff58\023\uff58\026\uff58\033\uff58\034\uff58" +
    "\047\uff58\050\uff58\051\uff58\052\uff58\053\uff58\001\002\000" +
    "\004\026\172\001\002\000\036\010\uff42\012\uff42\013\uff42" +
    "\014\uff42\022\uff42\023\uff42\026\uff42\033\uff42\034\uff42\047" +
    "\uff42\050\uff42\051\uff42\052\uff42\053\uff42\001\002\000\036" +
    "\010\uff59\012\uff59\013\uff59\014\uff59\022\uff59\023\uff59\026" +
    "\uff59\033\uff59\034\uff59\047\uff59\050\uff59\051\uff59\052\uff59" +
    "\053\uff59\001\002\000\036\010\uff56\012\uff56\013\uff56\014" +
    "\uff56\022\uff56\023\uff56\026\uff56\033\uff56\034\uff56\047\uff56" +
    "\050\uff56\051\uff56\052\uff56\053\uff56\001\002\000\036\010" +
    "\074\012\076\013\101\014\055\022\063\023\056\026\uff4e" +
    "\033\065\034\060\047\064\050\153\051\150\052\104\053" +
    "\162\001\002\000\016\022\063\023\056\033\112\034\060" +
    "\047\064\052\104\001\002\000\036\010\uff55\012\uff55\013" +
    "\uff55\014\uff55\022\uff55\023\uff55\026\uff55\033\uff55\034\uff55" +
    "\047\uff55\050\uff55\051\uff55\052\uff55\053\uff55\001\002\000" +
    "\004\032\165\001\002\000\036\010\074\012\076\013\101" +
    "\014\055\022\063\023\056\026\uff4d\033\065\034\060\047" +
    "\064\050\153\051\150\052\104\053\162\001\002\000\004" +
    "\026\uff50\001\002\000\004\032\170\001\002\000\036\010" +
    "\uff52\012\uff52\013\uff52\014\uff52\022\uff52\023\uff52\026\uff52" +
    "\033\uff52\034\uff52\047\uff52\050\uff52\051\uff52\052\uff52\053" +
    "\uff52\001\002\000\004\026\uff51\001\002\000\036\010\uff43" +
    "\012\uff43\013\uff43\014\uff43\022\uff43\023\uff43\026\uff43\033" +
    "\uff43\034\uff43\047\uff43\050\uff43\051\uff43\052\uff43\053\uff43" +
    "\001\002\000\036\010\uff54\012\uff54\013\uff54\014\uff54\022" +
    "\uff54\023\uff54\026\uff54\033\uff54\034\uff54\047\uff54\050\uff54" +
    "\051\uff54\052\uff54\053\uff54\001\002\000\004\026\uff4f\001" +
    "\002\000\036\010\uff53\012\uff53\013\uff53\014\uff53\022\uff53" +
    "\023\uff53\026\uff53\033\uff53\034\uff53\047\uff53\050\uff53\051" +
    "\uff53\052\uff53\053\uff53\001\002\000\004\053\uff85\001\002" +
    "\000\016\022\063\023\056\033\112\034\060\047\064\052" +
    "\104\001\002\000\004\032\201\001\002\000\036\010\uff7b" +
    "\012\uff7b\013\uff7b\014\uff7b\022\uff7b\023\uff7b\026\uff7b\033" +
    "\uff7b\034\uff7b\047\uff7b\050\uff7b\051\uff7b\052\uff7b\053\uff7b" +
    "\001\002\000\036\010\074\012\076\013\101\014\055\022" +
    "\063\023\056\026\203\033\065\034\060\047\064\050\153" +
    "\051\150\052\104\053\162\001\002\000\004\013\213\001" +
    "\002\000\004\026\205\001\002\000\004\013\206\001\002" +
    "\000\004\023\207\001\002\000\016\022\063\023\056\033" +
    "\112\034\060\047\064\052\104\001\002\000\004\024\211" +
    "\001\002\000\004\032\212\001\002\000\036\010\uff41\012" +
    "\uff41\013\uff41\014\uff41\022\uff41\023\uff41\026\uff41\033\uff41" +
    "\034\uff41\047\uff41\050\uff41\051\uff41\052\uff41\053\uff41\001" +
    "\002\000\004\023\214\001\002\000\016\022\063\023\056" +
    "\033\112\034\060\047\064\052\104\001\002\000\004\024" +
    "\216\001\002\000\004\032\217\001\002\000\036\010\uff40" +
    "\012\uff40\013\uff40\014\uff40\022\uff40\023\uff40\026\uff40\033" +
    "\uff40\034\uff40\047\uff40\050\uff40\051\uff40\052\uff40\053\uff40" +
    "\001\002\000\004\032\221\001\002\000\004\026\222\001" +
    "\002\000\006\026\uff8f\042\021\001\002\000\004\026\uff93" +
    "\001\002\000\016\022\063\023\056\033\112\034\060\047" +
    "\064\052\104\001\002\000\004\024\226\001\002\000\004" +
    "\025\227\001\002\000\036\010\074\012\076\013\101\014" +
    "\055\022\063\023\056\026\230\033\065\034\060\047\064" +
    "\050\153\051\150\052\104\053\162\001\002\000\040\010" +
    "\uff49\011\240\012\uff49\013\uff49\014\uff49\022\uff49\023\uff49" +
    "\026\uff49\033\uff49\034\uff49\047\uff49\050\uff49\051\uff49\052" +
    "\uff49\053\uff49\001\002\000\004\026\232\001\002\000\040" +
    "\010\uff4a\011\233\012\uff4a\013\uff4a\014\uff4a\022\uff4a\023" +
    "\uff4a\026\uff4a\033\uff4a\034\uff4a\047\uff4a\050\uff4a\051\uff4a" +
    "\052\uff4a\053\uff4a\001\002\000\004\025\234\001\002\000" +
    "\036\010\074\012\076\013\101\014\055\022\063\023\056" +
    "\026\235\033\065\034\060\047\064\050\153\051\150\052" +
    "\104\053\162\001\002\000\036\010\uff46\012\uff46\013\uff46" +
    "\014\uff46\022\uff46\023\uff46\026\uff46\033\uff46\034\uff46\047" +
    "\uff46\050\uff46\051\uff46\052\uff46\053\uff46\001\002\000\004" +
    "\026\237\001\002\000\036\010\uff47\012\uff47\013\uff47\014" +
    "\uff47\022\uff47\023\uff47\026\uff47\033\uff47\034\uff47\047\uff47" +
    "\050\uff47\051\uff47\052\uff47\053\uff47\001\002\000\004\025" +
    "\241\001\002\000\036\010\074\012\076\013\101\014\055" +
    "\022\063\023\056\026\242\033\065\034\060\047\064\050" +
    "\153\051\150\052\104\053\162\001\002\000\036\010\uff44" +
    "\012\uff44\013\uff44\014\uff44\022\uff44\023\uff44\026\uff44\033" +
    "\uff44\034\uff44\047\uff44\050\uff44\051\uff44\052\uff44\053\uff44" +
    "\001\002\000\004\026\244\001\002\000\036\010\uff45\012" +
    "\uff45\013\uff45\014\uff45\022\uff45\023\uff45\026\uff45\033\uff45" +
    "\034\uff45\047\uff45\050\uff45\051\uff45\052\uff45\053\uff45\001" +
    "\002\000\004\053\uff87\001\002\000\004\053\254\001\002" +
    "\000\016\022\063\023\056\033\112\034\060\047\064\052" +
    "\104\001\002\000\004\032\251\001\002\000\004\026\252" +
    "\001\002\000\006\026\uff92\042\021\001\002\000\004\026" +
    "\uff96\001\002\000\016\022\063\023\056\033\112\034\060" +
    "\047\064\052\104\001\002\000\004\032\256\001\002\000" +
    "\004\026\257\001\002\000\006\026\uff91\042\021\001\002" +
    "\000\004\026\uff95\001\002\000\016\022\063\023\056\033" +
    "\112\034\060\047\064\052\104\001\002\000\016\022\063" +
    "\023\056\033\112\034\060\047\064\052\104\001\002\000" +
    "\012\015\uff6c\024\uff6c\032\uff6c\044\uff6c\001\002\000\012" +
    "\015\uff66\024\uff66\032\uff66\044\uff66\001\002\000\016\022" +
    "\063\023\056\033\112\034\060\047\064\052\104\001\002" +
    "\000\004\032\267\001\002\000\036\010\uff7a\012\uff7a\013" +
    "\uff7a\014\uff7a\022\uff7a\023\uff7a\026\uff7a\033\uff7a\034\uff7a" +
    "\047\uff7a\050\uff7a\051\uff7a\052\uff7a\053\uff7a\001\002\000" +
    "\004\033\271\001\002\000\022\015\uff7f\016\uff7f\017\uff7f" +
    "\023\272\024\uff7f\032\uff7f\044\uff7f\055\uff7f\001\002\000" +
    "\020\022\063\023\056\024\273\033\112\034\060\047\064" +
    "\052\104\001\002\000\020\015\uff81\016\uff81\017\uff81\024" +
    "\uff81\032\uff81\044\uff81\055\uff81\001\002\000\004\024\275" +
    "\001\002\000\020\015\uff80\016\uff80\017\uff80\024\uff80\032" +
    "\uff80\044\uff80\055\uff80\001\002\000\016\022\063\023\056" +
    "\033\112\034\060\047\064\052\104\001\002\000\016\022" +
    "\063\023\056\033\112\034\060\047\064\052\104\001\002" +
    "\000\012\015\uff6e\024\uff6e\032\uff6e\044\uff6e\001\002\000" +
    "\012\015\uff68\024\uff68\032\uff68\044\uff68\001\002\000\016" +
    "\022\063\023\056\033\112\034\060\047\064\052\104\001" +
    "\002\000\004\032\304\001\002\000\004\026\305\001\002" +
    "\000\006\026\uff90\042\021\001\002\000\004\026\uff94\001" +
    "\002\000\016\022\063\023\056\033\112\034\060\047\064" +
    "\052\104\001\002\000\016\022\063\023\056\033\112\034" +
    "\060\047\064\052\104\001\002\000\012\015\uff70\024\uff70" +
    "\032\uff70\044\uff70\001\002\000\012\015\uff6a\024\uff6a\032" +
    "\uff6a\044\uff6a\001\002\000\004\024\314\001\002\000\004" +
    "\057\315\001\002\000\016\022\063\023\056\033\112\034" +
    "\060\047\064\052\104\001\002\000\004\015\317\001\002" +
    "\000\016\022\063\023\056\033\112\034\060\047\064\052" +
    "\104\001\002\000\012\015\uff4b\024\uff4b\032\uff4b\044\uff4b" +
    "\001\002\000\012\006\326\032\323\033\327\047\064\001" +
    "\002\000\004\024\355\001\002\000\020\022\063\023\056" +
    "\032\350\033\112\034\060\047\064\052\104\001\002\000" +
    "\004\032\342\001\002\000\004\016\337\001\002\000\004" +
    "\033\333\001\002\000\006\016\330\046\124\001\002\000" +
    "\016\022\063\023\056\033\112\034\060\047\064\052\104" +
    "\001\002\000\004\032\332\001\002\000\004\032\uff77\001" +
    "\002\000\004\016\334\001\002\000\016\022\063\023\056" +
    "\033\112\034\060\047\064\052\104\001\002\000\004\032" +
    "\336\001\002\000\004\032\uff78\001\002\000\016\022\063" +
    "\023\056\033\112\034\060\047\064\052\104\001\002\000" +
    "\004\032\341\001\002\000\004\032\uff79\001\002\000\020" +
    "\022\063\023\056\032\343\033\112\034\060\047\064\052" +
    "\104\001\002\000\020\022\063\023\056\024\uff37\033\112" +
    "\034\060\047\064\052\104\001\002\000\004\032\345\001" +
    "\002\000\020\022\063\023\056\024\uff3a\033\112\034\060" +
    "\047\064\052\104\001\002\000\004\024\uff3d\001\002\000" +
    "\004\024\uff3b\001\002\000\020\022\063\023\056\024\uff36" +
    "\033\112\034\060\047\064\052\104\001\002\000\004\032" +
    "\352\001\002\000\020\022\063\023\056\024\uff38\033\112" +
    "\034\060\047\064\052\104\001\002\000\004\024\uff3c\001" +
    "\002\000\004\024\uff39\001\002\000\004\025\356\001\002" +
    "\000\036\010\074\012\076\013\101\014\055\022\063\023" +
    "\056\026\360\033\065\034\060\047\064\050\153\051\150" +
    "\052\104\053\162\001\002\000\004\026\361\001\002\000" +
    "\036\010\uff3e\012\uff3e\013\uff3e\014\uff3e\022\uff3e\023\uff3e" +
    "\026\uff3e\033\uff3e\034\uff3e\047\uff3e\050\uff3e\051\uff3e\052" +
    "\uff3e\053\uff3e\001\002\000\036\010\uff3f\012\uff3f\013\uff3f" +
    "\014\uff3f\022\uff3f\023\uff3f\026\uff3f\033\uff3f\034\uff3f\047" +
    "\uff3f\050\uff3f\051\uff3f\052\uff3f\053\uff3f\001\002\000\004" +
    "\025\u0103\001\002\000\006\003\365\025\364\001\002\000" +
    "\006\026\376\033\370\001\002\000\006\026\366\033\370" +
    "\001\002\000\014\006\uffd3\026\uffd3\036\026\041\uffd3\042" +
    "\uffd3\001\002\000\004\026\373\001\002\000\006\026\uffd1" +
    "\044\371\001\002\000\004\033\370\001\002\000\004\026" +
    "\uffd2\001\002\000\014\006\uffd4\026\uffd4\036\026\041\uffd4" +
    "\042\uffd4\001\002\000\012\006\uffd8\026\uffd8\041\uffd8\042" +
    "\uffd8\001\002\000\012\006\uffd7\026\uffd7\041\uffd7\042\uffd7" +
    "\001\002\000\014\006\uffdb\026\uffdb\036\026\041\uffdb\042" +
    "\uffdb\001\002\000\004\026\u0100\001\002\000\014\006\uffdc" +
    "\026\uffdc\036\026\041\uffdc\042\uffdc\001\002\000\012\006" +
    "\uffde\026\uffde\041\uffde\042\uffde\001\002\000\012\006\uffdd" +
    "\026\uffdd\041\uffdd\042\uffdd\001\002\000\006\026\u0104\033" +
    "\370\001\002\000\014\006\uffd5\026\uffd5\036\026\041\uffd5" +
    "\042\uffd5\001\002\000\004\026\u0106\001\002\000\014\006" +
    "\uffd6\026\uffd6\036\026\041\uffd6\042\uffd6\001\002\000\012" +
    "\006\uffda\026\uffda\041\uffda\042\uffda\001\002\000\012\006" +
    "\uffd9\026\uffd9\041\uffd9\042\uffd9\001\002\000\006\002\uffe5" +
    "\035\015\001\002\000\006\026\u010e\042\021\001\002\000" +
    "\004\026\u010c\001\002\000\006\002\uffe3\035\015\001\002" +
    "\000\004\002\ufff3\001\002\000\006\002\uffe4\035\015\001" +
    "\002\000\004\026\u0110\001\002\000\006\002\uffe2\035\015" +
    "\001\002\000\004\002\ufff2\001\002\000\004\002\ufff4\001" +
    "\002\000\004\002\ufff5\001\002\000\006\003\u0160\033\u0161" +
    "\001\002\000\010\016\u011a\030\u015c\032\u0131\001\002\000" +
    "\006\003\u011f\030\u0120\001\002\000\006\016\u011a\032\u0119" +
    "\001\002\000\004\032\u011d\001\002\000\040\006\024\010" +
    "\uffc7\012\uffc7\013\uffc7\014\uffc7\022\uffc7\023\uffc7\026\uffc7" +
    "\033\uffc7\034\uffc7\041\uffc7\042\uffc7\047\uffc7\052\uffc7\053" +
    "\uffc7\001\002\000\016\022\063\023\056\033\112\034\060" +
    "\047\064\052\104\001\002\000\004\032\uffa1\001\002\000" +
    "\036\010\uffcf\012\uffcf\013\uffcf\014\uffcf\022\uffcf\023\uffcf" +
    "\026\uffcf\033\uffcf\034\uffcf\041\uffcf\042\uffcf\047\uffcf\052" +
    "\uffcf\053\uffcf\001\002\000\040\006\024\010\uffc3\012\uffc3" +
    "\013\uffc3\014\uffc3\022\uffc3\023\uffc3\026\uffc3\033\uffc3\034" +
    "\uffc3\041\uffc3\042\uffc3\047\uffc3\052\uffc3\053\uffc3\001\002" +
    "\000\036\010\uffcb\012\uffcb\013\uffcb\014\uffcb\022\uffcb\023" +
    "\uffcb\026\uffcb\033\uffcb\034\uffcb\041\uffcb\042\uffcb\047\uffcb" +
    "\052\uffcb\053\uffcb\001\002\000\006\033\u0150\056\u014f\001" +
    "\002\000\010\003\u0122\033\u0123\056\u0121\001\002\000\006" +
    "\003\u0143\033\u0144\001\002\000\006\016\u011a\032\u012a\001" +
    "\002\000\006\016\u011a\032\u0125\001\002\000\004\032\u0127" +
    "\001\002\000\040\006\024\010\uffc5\012\uffc5\013\uffc5\014" +
    "\uffc5\022\uffc5\023\uffc5\026\uffc5\033\uffc5\034\uffc5\041\uffc5" +
    "\042\uffc5\047\uffc5\052\uffc5\053\uffc5\001\002\000\036\010" +
    "\uffcd\012\uffcd\013\uffcd\014\uffcd\022\uffcd\023\uffcd\026\uffcd" +
    "\033\uffcd\034\uffcd\041\uffcd\042\uffcd\047\uffcd\052\uffcd\053" +
    "\uffcd\001\002\000\040\006\024\010\uffc1\012\uffc1\013\uffc1" +
    "\014\uffc1\022\uffc1\023\uffc1\026\uffc1\033\uffc1\034\uffc1\041" +
    "\uffc1\042\uffc1\047\uffc1\052\uffc1\053\uffc1\001\002\000\036" +
    "\010\uffc9\012\uffc9\013\uffc9\014\uffc9\022\uffc9\023\uffc9\026" +
    "\uffc9\033\uffc9\034\uffc9\041\uffc9\042\uffc9\047\uffc9\052\uffc9" +
    "\053\uffc9\001\002\000\004\032\u012c\001\002\000\040\006" +
    "\024\010\uffb5\012\uffb5\013\uffb5\014\uffb5\022\uffb5\023\uffb5" +
    "\026\uffb5\033\uffb5\034\uffb5\041\uffb5\042\uffb5\047\uffb5\052" +
    "\uffb5\053\uffb5\001\002\000\036\010\uffbd\012\uffbd\013\uffbd" +
    "\014\uffbd\022\uffbd\023\uffbd\026\uffbd\033\uffbd\034\uffbd\041" +
    "\uffbd\042\uffbd\047\uffbd\052\uffbd\053\uffbd\001\002\000\004" +
    "\006\u012e\001\002\000\036\010\uffb9\012\uffb9\013\uffb9\014" +
    "\uffb9\022\uffb9\023\uffb9\026\uffb9\033\uffb9\034\uffb9\041\uffb9" +
    "\042\uffb9\047\uffb9\052\uffb9\053\uffb9\001\002\000\012\003" +
    "\u012f\027\u0116\033\u0117\056\u0114\001\002\000\010\016\u011a" +
    "\030\u0132\032\u0131\001\002\000\004\032\u0141\001\002\000" +
    "\040\006\024\010\uffb7\012\uffb7\013\uffb7\014\uffb7\022\uffb7" +
    "\023\uffb7\026\uffb7\033\uffb7\034\uffb7\041\uffb7\042\uffb7\047" +
    "\uffb7\052\uffb7\053\uffb7\001\002\000\006\033\u0134\056\u0133" +
    "\001\002\000\004\033\u013a\001\002\000\006\016\u011a\032" +
    "\u0136\001\002\000\004\032\u0138\001\002\000\040\006\024" +
    "\010\uffac\012\uffac\013\uffac\014\uffac\022\uffac\023\uffac\026" +
    "\uffac\033\uffac\034\uffac\041\uffac\042\uffac\047\uffac\052\uffac" +
    "\053\uffac\001\002\000\036\010\uffb0\012\uffb0\013\uffb0\014" +
    "\uffb0\022\uffb0\023\uffb0\026\uffb0\033\uffb0\034\uffb0\041\uffb0" +
    "\042\uffb0\047\uffb0\052\uffb0\053\uffb0\001\002\000\040\006" +
    "\024\010\uffaa\012\uffaa\013\uffaa\014\uffaa\022\uffaa\023\uffaa" +
    "\026\uffaa\033\uffaa\034\uffaa\041\uffaa\042\uffaa\047\uffaa\052" +
    "\uffaa\053\uffaa\001\002\000\036\010\uffae\012\uffae\013\uffae" +
    "\014\uffae\022\uffae\023\uffae\026\uffae\033\uffae\034\uffae\041" +
    "\uffae\042\uffae\047\uffae\052\uffae\053\uffae\001\002\000\006" +
    "\016\u011a\032\u013c\001\002\000\004\032\u013e\001\002\000" +
    "\040\006\024\010\uffad\012\uffad\013\uffad\014\uffad\022\uffad" +
    "\023\uffad\026\uffad\033\uffad\034\uffad\041\uffad\042\uffad\047" +
    "\uffad\052\uffad\053\uffad\001\002\000\036\010\uffb1\012\uffb1" +
    "\013\uffb1\014\uffb1\022\uffb1\023\uffb1\026\uffb1\033\uffb1\034" +
    "\uffb1\041\uffb1\042\uffb1\047\uffb1\052\uffb1\053\uffb1\001\002" +
    "\000\040\006\024\010\uffab\012\uffab\013\uffab\014\uffab\022" +
    "\uffab\023\uffab\026\uffab\033\uffab\034\uffab\041\uffab\042\uffab" +
    "\047\uffab\052\uffab\053\uffab\001\002\000\036\010\uffaf\012" +
    "\uffaf\013\uffaf\014\uffaf\022\uffaf\023\uffaf\026\uffaf\033\uffaf" +
    "\034\uffaf\041\uffaf\042\uffaf\047\uffaf\052\uffaf\053\uffaf\001" +
    "\002\000\036\010\uffbf\012\uffbf\013\uffbf\014\uffbf\022\uffbf" +
    "\023\uffbf\026\uffbf\033\uffbf\034\uffbf\041\uffbf\042\uffbf\047" +
    "\uffbf\052\uffbf\053\uffbf\001\002\000\040\006\024\010\uffb3" +
    "\012\uffb3\013\uffb3\014\uffb3\022\uffb3\023\uffb3\026\uffb3\033" +
    "\uffb3\034\uffb3\041\uffb3\042\uffb3\047\uffb3\052\uffb3\053\uffb3" +
    "\001\002\000\036\010\uffbb\012\uffbb\013\uffbb\014\uffbb\022" +
    "\uffbb\023\uffbb\026\uffbb\033\uffbb\034\uffbb\041\uffbb\042\uffbb" +
    "\047\uffbb\052\uffbb\053\uffbb\001\002\000\006\016\u011a\032" +
    "\u014b\001\002\000\006\016\u011a\032\u0146\001\002\000\004" +
    "\032\u0148\001\002\000\040\006\024\010\uffc6\012\uffc6\013" +
    "\uffc6\014\uffc6\022\uffc6\023\uffc6\026\uffc6\033\uffc6\034\uffc6" +
    "\041\uffc6\042\uffc6\047\uffc6\052\uffc6\053\uffc6\001\002\000" +
    "\036\010\uffce\012\uffce\013\uffce\014\uffce\022\uffce\023\uffce" +
    "\026\uffce\033\uffce\034\uffce\041\uffce\042\uffce\047\uffce\052" +
    "\uffce\053\uffce\001\002\000\040\006\024\010\uffc2\012\uffc2" +
    "\013\uffc2\014\uffc2\022\uffc2\023\uffc2\026\uffc2\033\uffc2\034" +
    "\uffc2\041\uffc2\042\uffc2\047\uffc2\052\uffc2\053\uffc2\001\002" +
    "\000\036\010\uffca\012\uffca\013\uffca\014\uffca\022\uffca\023" +
    "\uffca\026\uffca\033\uffca\034\uffca\041\uffca\042\uffca\047\uffca" +
    "\052\uffca\053\uffca\001\002\000\004\032\u014d\001\002\000" +
    "\040\006\024\010\uffb6\012\uffb6\013\uffb6\014\uffb6\022\uffb6" +
    "\023\uffb6\026\uffb6\033\uffb6\034\uffb6\041\uffb6\042\uffb6\047" +
    "\uffb6\052\uffb6\053\uffb6\001\002\000\036\010\uffbe\012\uffbe" +
    "\013\uffbe\014\uffbe\022\uffbe\023\uffbe\026\uffbe\033\uffbe\034" +
    "\uffbe\041\uffbe\042\uffbe\047\uffbe\052\uffbe\053\uffbe\001\002" +
    "\000\040\006\024\010\uffb2\012\uffb2\013\uffb2\014\uffb2\022" +
    "\uffb2\023\uffb2\026\uffb2\033\uffb2\034\uffb2\041\uffb2\042\uffb2" +
    "\047\uffb2\052\uffb2\053\uffb2\001\002\000\036\010\uffba\012" +
    "\uffba\013\uffba\014\uffba\022\uffba\023\uffba\026\uffba\033\uffba" +
    "\034\uffba\041\uffba\042\uffba\047\uffba\052\uffba\053\uffba\001" +
    "\002\000\004\033\u0156\001\002\000\006\016\u011a\032\u0152" +
    "\001\002\000\004\032\u0154\001\002\000\040\006\024\010" +
    "\uffa4\012\uffa4\013\uffa4\014\uffa4\022\uffa4\023\uffa4\026\uffa4" +
    "\033\uffa4\034\uffa4\041\uffa4\042\uffa4\047\uffa4\052\uffa4\053" +
    "\uffa4\001\002\000\036\010\uffa8\012\uffa8\013\uffa8\014\uffa8" +
    "\022\uffa8\023\uffa8\026\uffa8\033\uffa8\034\uffa8\041\uffa8\042" +
    "\uffa8\047\uffa8\052\uffa8\053\uffa8\001\002\000\040\006\024" +
    "\010\uffa2\012\uffa2\013\uffa2\014\uffa2\022\uffa2\023\uffa2\026" +
    "\uffa2\033\uffa2\034\uffa2\041\uffa2\042\uffa2\047\uffa2\052\uffa2" +
    "\053\uffa2\001\002\000\036\010\uffa6\012\uffa6\013\uffa6\014" +
    "\uffa6\022\uffa6\023\uffa6\026\uffa6\033\uffa6\034\uffa6\041\uffa6" +
    "\042\uffa6\047\uffa6\052\uffa6\053\uffa6\001\002\000\006\016" +
    "\u011a\032\u0158\001\002\000\004\032\u015a\001\002\000\040" +
    "\006\024\010\uffa5\012\uffa5\013\uffa5\014\uffa5\022\uffa5\023" +
    "\uffa5\026\uffa5\033\uffa5\034\uffa5\041\uffa5\042\uffa5\047\uffa5" +
    "\052\uffa5\053\uffa5\001\002\000\036\010\uffa9\012\uffa9\013" +
    "\uffa9\014\uffa9\022\uffa9\023\uffa9\026\uffa9\033\uffa9\034\uffa9" +
    "\041\uffa9\042\uffa9\047\uffa9\052\uffa9\053\uffa9\001\002\000" +
    "\040\006\024\010\uffa3\012\uffa3\013\uffa3\014\uffa3\022\uffa3" +
    "\023\uffa3\026\uffa3\033\uffa3\034\uffa3\041\uffa3\042\uffa3\047" +
    "\uffa3\052\uffa3\053\uffa3\001\002\000\036\010\uffa7\012\uffa7" +
    "\013\uffa7\014\uffa7\022\uffa7\023\uffa7\026\uffa7\033\uffa7\034" +
    "\uffa7\041\uffa7\042\uffa7\047\uffa7\052\uffa7\053\uffa7\001\002" +
    "\000\006\033\u0134\056\u015d\001\002\000\004\033\u015e\001" +
    "\002\000\006\016\u011a\032\u015f\001\002\000\036\010\uffad" +
    "\012\uffad\013\uffad\014\uffad\022\uffad\023\uffad\026\uffad\033" +
    "\uffad\034\uffad\041\uffad\042\uffad\047\uffad\052\uffad\053\uffad" +
    "\001\002\000\006\016\u011a\032\u0168\001\002\000\006\016" +
    "\u011a\032\u0163\001\002\000\004\032\u0165\001\002\000\040" +
    "\006\024\010\uffc8\012\uffc8\013\uffc8\014\uffc8\022\uffc8\023" +
    "\uffc8\026\uffc8\033\uffc8\034\uffc8\041\uffc8\042\uffc8\047\uffc8" +
    "\052\uffc8\053\uffc8\001\002\000\036\010\uffd0\012\uffd0\013" +
    "\uffd0\014\uffd0\022\uffd0\023\uffd0\026\uffd0\033\uffd0\034\uffd0" +
    "\041\uffd0\042\uffd0\047\uffd0\052\uffd0\053\uffd0\001\002\000" +
    "\040\006\024\010\uffc4\012\uffc4\013\uffc4\014\uffc4\022\uffc4" +
    "\023\uffc4\026\uffc4\033\uffc4\034\uffc4\041\uffc4\042\uffc4\047" +
    "\uffc4\052\uffc4\053\uffc4\001\002\000\036\010\uffcc\012\uffcc" +
    "\013\uffcc\014\uffcc\022\uffcc\023\uffcc\026\uffcc\033\uffcc\034" +
    "\uffcc\041\uffcc\042\uffcc\047\uffcc\052\uffcc\053\uffcc\001\002" +
    "\000\004\032\u016a\001\002\000\040\006\024\010\uffb8\012" +
    "\uffb8\013\uffb8\014\uffb8\022\uffb8\023\uffb8\026\uffb8\033\uffb8" +
    "\034\uffb8\041\uffb8\042\uffb8\047\uffb8\052\uffb8\053\uffb8\001" +
    "\002\000\036\010\uffc0\012\uffc0\013\uffc0\014\uffc0\022\uffc0" +
    "\023\uffc0\026\uffc0\033\uffc0\034\uffc0\041\uffc0\042\uffc0\047" +
    "\uffc0\052\uffc0\053\uffc0\001\002\000\040\006\024\010\uffb4" +
    "\012\uffb4\013\uffb4\014\uffb4\022\uffb4\023\uffb4\026\uffb4\033" +
    "\uffb4\034\uffb4\041\uffb4\042\uffb4\047\uffb4\052\uffb4\053\uffb4" +
    "\001\002\000\036\010\uffbc\012\uffbc\013\uffbc\014\uffbc\022" +
    "\uffbc\023\uffbc\026\uffbc\033\uffbc\034\uffbc\041\uffbc\042\uffbc" +
    "\047\uffbc\052\uffbc\053\uffbc\001\002\000\006\002\uffed\035" +
    "\015\001\002\000\006\026\u017d\042\021\001\002\000\004" +
    "\026\u017b\001\002\000\010\026\u0170\041\030\042\021\001" +
    "\002\000\006\002\uffec\035\015\001\002\000\006\026\u0175" +
    "\042\021\001\002\000\004\026\u0173\001\002\000\006\002" +
    "\uffe8\035\015\001\002\000\004\002\ufff8\001\002\000\006" +
    "\002\uffe9\035\015\001\002\000\004\026\u0177\001\002\000" +
    "\006\002\uffe6\035\015\001\002\000\004\002\ufff6\001\002" +
    "\000\004\002\ufff9\001\002\000\004\002\ufffc\001\002\000" +
    "\006\002\uffea\035\015\001\002\000\004\002\ufffa\001\002" +
    "\000\006\002\uffeb\035\015\001\002\000\004\026\u017f\001" +
    "\002\000\006\002\uffe7\035\015\001\002\000\004\002\ufff7" +
    "\001\002\000\004\002\ufffb\001\002\000\004\002\ufffd\001" +
    "\002\000\006\002\uffe1\035\015\001\002\000\004\026\u0185" +
    "\001\002\000\006\002\uffe0\035\015\001\002\000\004\002" +
    "\ufff0\001\002\000\004\002\ufff1\001\002\000\004\023\u0189" +
    "\001\002\000\004\006\u018b\001\002\000\004\024\u018f\001" +
    "\002\000\004\033\u018c\001\002\000\006\024\uff8c\044\u018d" +
    "\001\002\000\004\006\u018b\001\002\000\004\024\uff8d\001" +
    "\002\000\012\025\uff9a\043\u0193\054\u0192\056\u0190\001\002" +
    "\000\012\025\uff88\043\u0193\054\uff88\056\u0190\001\002\000" +
    "\004\025\uff98\001\002\000\004\023\u0197\001\002\000\012" +
    "\025\uff89\043\u0193\054\uff89\056\u0190\001\002\000\006\025" +
    "\uff99\054\u0192\001\002\000\004\025\uff97\001\002\000\006" +
    "\025\uff8b\054\uff8b\001\002\000\004\006\u0198\001\002\000" +
    "\004\033\u0199\001\002\000\004\024\u019a\001\002\000\004" +
    "\025\uff8e\001\002\000\006\025\uff8a\054\uff8a\001\002\000" +
    "\004\032\u019d\001\002\000\004\035\015\001\002\000\004" +
    "\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u019c\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\020\022\021\024\023" +
    "\021\024\031\030\026\001\001\000\002\001\001\000\006" +
    "\024\u0183\030\026\001\001\000\012\021\u016e\023\u016c\024" +
    "\u016d\030\026\001\001\000\002\001\001\000\010\023\u0109" +
    "\024\u010a\030\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\034\001\001\000\002" +
    "\001\001\000\004\003\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\044\001\001\000\004\021\041\001\001\000\002\001" +
    "\001\000\004\023\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\046\001\001\000\002\001\001\000" +
    "\004\021\050\001\001\000\002\001\001\000\004\023\052" +
    "\001\001\000\002\001\001\000\036\004\056\006\065\007" +
    "\067\012\061\013\071\014\101\021\070\027\060\031\072" +
    "\033\066\035\104\036\077\037\076\041\102\001\001\000" +
    "\002\001\001\000\016\004\056\015\312\033\066\035\144" +
    "\037\112\041\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\004\056\006\065" +
    "\007\067\012\061\013\071\014\101\027\245\031\072\033" +
    "\066\035\104\036\077\037\076\041\102\001\001\000\002" +
    "\001\001\000\034\004\056\006\065\007\067\012\061\013" +
    "\071\014\101\027\244\031\072\033\066\035\104\036\077" +
    "\037\076\041\102\001\001\000\002\001\001\000\014\004" +
    "\056\033\066\035\217\037\112\041\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\004\056\006\065\007" +
    "\067\012\061\013\071\014\101\027\175\031\072\033\066" +
    "\035\104\036\077\037\076\041\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\004\056\006\065\007\067\012" +
    "\061\013\071\014\101\027\106\031\072\033\066\035\104" +
    "\036\077\037\076\041\102\001\001\000\002\001\001\000" +
    "\014\004\056\033\066\035\141\037\112\041\102\001\001" +
    "\000\014\004\056\033\066\035\113\037\112\041\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\004\056\033\066\035\117\037\112\041\102\001" +
    "\001\000\014\004\056\033\066\035\116\037\112\041\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\004" +
    "\056\033\066\034\137\035\130\037\112\041\102\001\001" +
    "\000\014\004\056\033\066\035\135\037\112\041\102\001" +
    "\001\000\014\004\056\033\066\035\134\037\112\041\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\004" +
    "\056\033\066\034\127\035\130\037\112\041\102\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\004\056\033\066\034\132\035\130\037\112\041\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\004\056\015" +
    "\143\033\066\035\144\037\112\041\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\004" +
    "\056\006\153\007\156\012\150\013\157\014\162\016\151" +
    "\031\160\033\066\035\163\037\076\040\154\041\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\004\056" +
    "\006\153\007\156\012\150\013\157\014\162\016\151\031" +
    "\160\033\066\035\163\037\076\040\173\041\102\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\004\056\006\153\007\156\012\150\013\157\014\162\016" +
    "\151\031\160\033\066\035\163\037\076\040\170\041\102" +
    "\001\001\000\014\004\056\033\066\035\166\037\112\041" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\004\056\006\153\007\156\012\150\013\157\014\162\016" +
    "\151\031\160\033\066\035\163\037\076\040\165\041\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\004\056\033\066\035\177\037\112\041\102\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\004\056\006" +
    "\153\007\156\012\150\013\157\014\162\016\151\031\160" +
    "\033\066\035\163\037\076\040\203\041\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\004\056\015\207\033\066\035\144\037" +
    "\112\041\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\004\056\015" +
    "\214\033\066\035\144\037\112\041\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\024\222\030\026\001\001" +
    "\000\002\001\001\000\016\004\056\015\224\033\066\035" +
    "\144\037\112\041\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\004\056\006\153\007\156\012\150\013" +
    "\157\014\162\016\151\031\160\033\066\035\163\037\076" +
    "\040\230\041\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\004\056" +
    "\006\153\007\156\012\150\013\157\014\162\016\151\031" +
    "\160\033\066\035\163\037\076\040\235\041\102\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\004\056\006\153\007\156\012\150" +
    "\013\157\014\162\016\151\031\160\033\066\035\163\037" +
    "\076\040\242\041\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\004\056\033\066\035\247\037\112\041\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\024" +
    "\252\030\026\001\001\000\002\001\001\000\014\004\056" +
    "\033\066\035\254\037\112\041\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\024\257\030\026\001\001" +
    "\000\002\001\001\000\014\004\056\033\066\035\263\037" +
    "\112\041\102\001\001\000\014\004\056\033\066\035\262" +
    "\037\112\041\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\004\056\033\066\035\265\037\112\041\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\004\056\033\066\034\273" +
    "\035\130\037\112\041\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\004\056\033\066" +
    "\035\300\037\112\041\102\001\001\000\014\004\056\033" +
    "\066\035\277\037\112\041\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\004\056\033\066\035\302\037" +
    "\112\041\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\024\305\030\026\001\001\000\002\001\001\000" +
    "\014\004\056\033\066\035\311\037\112\041\102\001\001" +
    "\000\014\004\056\033\066\035\310\037\112\041\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\004\056\033\066\035\315\037" +
    "\112\041\102\001\001\000\002\001\001\000\014\004\056" +
    "\033\066\035\317\037\112\041\102\001\001\000\002\001" +
    "\001\000\010\017\321\032\323\037\324\001\001\000\002" +
    "\001\001\000\014\004\056\033\066\035\350\037\112\041" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\056\033\066\035" +
    "\330\037\112\041\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\056\033\066\035" +
    "\334\037\112\041\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\004\056\033\066\035\337\037\112\041" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\004\056\033\066\035\343\037\112\041\102\001\001\000" +
    "\014\004\056\033\066\035\346\037\112\041\102\001\001" +
    "\000\002\001\001\000\014\004\056\033\066\035\345\037" +
    "\112\041\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\004\056\033\066\035\353\037\112\041\102\001" +
    "\001\000\002\001\001\000\014\004\056\033\066\035\352" +
    "\037\112\041\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\004\056\006\153\007\156" +
    "\012\150\013\157\014\162\016\151\031\160\033\066\035" +
    "\163\037\076\040\356\041\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\376\001\001\000\004\010\366" +
    "\001\001\000\004\020\374\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\371\001\001\000\002\001\001" +
    "\000\004\020\373\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\u0101\001\001\000\002\001\001\000\004" +
    "\020\u0100\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\u0104\001\001\000\004\020\u0107\001\001\000\002" +
    "\001\001\000\004\020\u0106\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\u0112\001\001\000\006\024\u010e" +
    "\030\026\001\001\000\002\001\001\000\004\003\u010c\001" +
    "\001\000\002\001\001\000\004\003\u0111\001\001\000\002" +
    "\001\001\000\004\003\u0110\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\u012f\001\001\000\002\001\001\000\004\022\u0117\001" +
    "\001\000\002\001\001\000\004\021\u011b\001\001\000\014" +
    "\004\056\033\066\035\u011a\037\112\041\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\u011d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\u0128\001\001\000\004\022\u0123" +
    "\001\001\000\002\001\001\000\004\021\u0125\001\001\000" +
    "\002\001\001\000\004\021\u0127\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\u012a\001\001\000\002\001" +
    "\001\000\004\021\u012c\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\u012f\001\001\000\002\001\001\000" +
    "\004\021\u013f\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\u0134\001\001\000\002\001\001\000\004\021" +
    "\u0136\001\001\000\002\001\001\000\004\021\u0138\001\001" +
    "\000\002\001\001\000\004\022\u013a\001\001\000\002\001" +
    "\001\000\004\021\u013c\001\001\000\002\001\001\000\004" +
    "\021\u013e\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\u0141\001\001\000\002\001\001\000\004\022\u0149" +
    "\001\001\000\004\022\u0144\001\001\000\002\001\001\000" +
    "\004\021\u0146\001\001\000\002\001\001\000\004\021\u0148" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\u014b\001\001\000\002\001\001\000\004\021\u014d\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\u0150\001" +
    "\001\000\002\001\001\000\004\021\u0152\001\001\000\002" +
    "\001\001\000\004\021\u0154\001\001\000\002\001\001\000" +
    "\004\022\u0156\001\001\000\002\001\001\000\004\021\u0158" +
    "\001\001\000\002\001\001\000\004\021\u015a\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\u013a\001\001\000\002\001\001\000\004\022\u0166\001" +
    "\001\000\004\022\u0161\001\001\000\002\001\001\000\004" +
    "\021\u0163\001\001\000\002\001\001\000\004\021\u0165\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\u0168" +
    "\001\001\000\002\001\001\000\004\021\u016a\001\001\000" +
    "\002\001\001\000\004\003\u0181\001\001\000\006\024\u017d" +
    "\030\026\001\001\000\002\001\001\000\010\023\u0170\024" +
    "\u0171\030\026\001\001\000\004\003\u0179\001\001\000\006" +
    "\024\u0175\030\026\001\001\000\002\001\001\000\004\003" +
    "\u0173\001\001\000\002\001\001\000\004\003\u0178\001\001" +
    "\000\002\001\001\000\004\003\u0177\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\u017b" +
    "\001\001\000\002\001\001\000\004\003\u0180\001\001\000" +
    "\002\001\001\000\004\003\u017f\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\u0186\001" +
    "\001\000\002\001\001\000\004\003\u0185\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\u0189\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\u018d\001\001\000\002\001\001\000" +
    "\006\025\u0193\026\u0190\001\001\000\004\025\u019a\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\u0195\001" +
    "\001\000\004\026\u0194\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\u019d\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  public ArrayList<Symbol> errores = new ArrayList<>();
  public ArrayList<String> erroresStr = new ArrayList<>();
  
  public void syntax_error(Symbol s) {
    for (int i = this.stack.size() - 1; i > 0; i--) {
      Symbol sp = this.stack.get(i);
       String cadena = "";
      System.out.println(sp.value + " " + Integer.toString(sp.right + 1) + ": " + Integer.toString(sp.left + 1) );
      cadena = sp.value + " " + cadena;
      System.out.println(cadena );
        if("4".equals(Integer.toString(sp.sym))){
            System.out.println(cadena );
            for(int j = i-1; j > 0; j--){
                sp = this.stack.get(j);
                cadena = sp.value + " " + cadena;
                System.out.println(cadena );
                if ("struct".equals(sp.value)) {
                cadena += "~" + s.value + "~ ...";
                Symbol sp2 = new Symbol(sp.sym, sp.left, sp.right, cadena);
                errores.add(sp2);
                erroresStr.add("Variable_Struct");
                break;
                }
            }
            break;  
        }
      if ("enum".equals(sp.value)) {
        System.out.println("Soy un error de enum xd");
        //System.out.println("Soy un error de enum xd");
        cadena += "~" + s.value + "~ ...";
        //if (this.lookahead != null) for (Symbol x : this.lookahead) System.out.println(x.value);
        Symbol sp2 = new Symbol(sp.sym, sp.left, sp.right, cadena);
        errores.add(sp2);
        erroresStr.add("Enum");
        break;
      }
      if ("struct".equals(sp.value)) {
        //System.out.println("Soy un error de struct chama");
        cadena += "~" + s.value + "~ ...";
        //if (this.lookahead != null) for (Symbol x : this.lookahead) System.out.println(x.value);
        Symbol sp2 = new Symbol(sp.sym, sp.left, sp.right, cadena);
        errores.add(sp2);
        erroresStr.add("Struct");
        break;
      }
        }
  }
  @Override
  public int error_sync_size() {
    return 2;
  }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // SENTENCIA_FOR ::= P_coma P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // SENTENCIA_FOR ::= ASIGNACION_COMPLEJA P_coma P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // SENTENCIA_FOR ::= P_coma EXPRESION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // SENTENCIA_FOR ::= P_coma P_coma EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // SENTENCIA_FOR ::= ASIGNACION_COMPLEJA P_coma EXPRESION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // SENTENCIA_FOR ::= ASIGNACION_COMPLEJA P_coma P_coma EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // SENTENCIA_FOR ::= P_coma EXPRESION P_coma EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // SENTENCIA_FOR ::= ASIGNACION_COMPLEJA P_coma EXPRESION P_coma EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a CUERPO_EC Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // DO_WHILE ::= Do Llave_a Llave_c While Parentesis_a EXPRESION_BOOLEANA Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // DO_WHILE ::= Do Llave_a CUERPO_EC Llave_c While Parentesis_a EXPRESION_BOOLEANA Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // WHILE ::= While Parentesis_a EXPRESION_BOOLEANA Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // WHILE ::= While Parentesis_a EXPRESION_BOOLEANA Parentesis_c Llave_a CUERPO_EC Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // IF_ELSE ::= If Parentesis_a EXPRESION_BOOLEANA Parentesis_c Llave_a Llave_c Else Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // IF_ELSE ::= If Parentesis_a EXPRESION_BOOLEANA Parentesis_c Llave_a Llave_c Else Llave_a CUERPO_EC Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // IF_ELSE ::= If Parentesis_a EXPRESION_BOOLEANA Parentesis_c Llave_a CUERPO_EC Llave_c Else Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // IF_ELSE ::= If Parentesis_a EXPRESION_BOOLEANA Parentesis_c Llave_a CUERPO_EC Llave_c Else Llave_a CUERPO_EC Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // EXPRESION_BOOLEANA ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_BOOLEANA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // IF ::= If Parentesis_a EXPRESION_BOOLEANA Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // IF ::= If Parentesis_a EXPRESION_BOOLEANA Parentesis_c Llave_a CUERPO_EC Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // OP_TERNARIO ::= Parentesis_a EXPRESION_BOOLEANA Parentesis_c Pregunta EXPRESION Dos_Puntos EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_TERNARIO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // CUERPO_EC ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO_EC",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // CUERPO_EC ::= EXPRESION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO_EC",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // CUERPO_EC ::= ASIGNACION_BASICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO_EC",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // CUERPO_EC ::= SENTENCIA CUERPO_EC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO_EC",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // CUERPO_EC ::= EXPRESION P_coma CUERPO_EC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO_EC",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // CUERPO_EC ::= ASIGNACION_BASICA CUERPO_EC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO_EC",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // SENTENCIA ::= Return EXPRESION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // SENTENCIA ::= Continue P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // SENTENCIA ::= Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // ESTRUCTURA_CONTROL ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CONTROL",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // ESTRUCTURA_CONTROL ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CONTROL",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // ESTRUCTURA_CONTROL ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CONTROL",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // ESTRUCTURA_CONTROL ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CONTROL",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // ESTRUCTURA_CONTROL ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CONTROL",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // EXPRESION_AUX ::= IDENTIFICADOR_CUERPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_AUX",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // EXPRESION_AUX ::= LLAMADA_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_AUX",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // EXPRESION_AUX ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_AUX",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // EXPRESION_AUX ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_AUX",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // EXPRESION_AUX ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_AUX",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // EXPRESION_AUX ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_AUX",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // EXPRESION_AUX ::= IDENTIFICADOR_CUERPO Op_logico EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_AUX",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // EXPRESION_AUX ::= LLAMADA_FUNCION Op_logico EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_AUX",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // EXPRESION_AUX ::= Identificador Op_logico EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_AUX",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // EXPRESION_AUX ::= Op_booleano Op_logico EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_AUX",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // EXPRESION_AUX ::= String Op_logico EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_AUX",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // EXPRESION_AUX ::= Numero Op_logico EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_AUX",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // EXPRESION_AUX ::= IDENTIFICADOR_CUERPO Op_Aritmetico EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_AUX",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // EXPRESION_AUX ::= LLAMADA_FUNCION Op_Aritmetico EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_AUX",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // EXPRESION_AUX ::= Identificador Op_Aritmetico EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_AUX",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // EXPRESION_AUX ::= Op_booleano Op_Aritmetico EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_AUX",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // EXPRESION_AUX ::= String Op_Aritmetico EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_AUX",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // EXPRESION_AUX ::= Numero Op_Aritmetico EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION_AUX",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // EXPRESION ::= OP_TERNARIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // EXPRESION ::= EXPRESION_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ARGUMENTOS ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ARGUMENTOS ::= EXPRESION Coma ARGUMENTOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // LLAMADA_FUNCION ::= Identificador Parentesis_a Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // LLAMADA_FUNCION ::= Identificador Parentesis_a ARGUMENTOS Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ASIGNACION_COMPLEJA ::= Identificador Igual EXPRESION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION_COMPLEJA",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ASIGNACION_COMPLEJA ::= T_dato Identificador Igual EXPRESION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION_COMPLEJA",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // ASIGNACION_COMPLEJA ::= IDENTIFICADOR_CUERPO Igual EXPRESION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION_COMPLEJA",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // ASIGNACION_BASICA ::= Identificador Igual EXPRESION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION_BASICA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ASIGNACION_BASICA ::= IDENTIFICADOR_CUERPO Igual EXPRESION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION_BASICA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // IDENTIFICADOR_CUERPO ::= Identificador Punto Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_CUERPO",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // IDENTIFICADOR_CUERPO ::= Identificador Punto Identificador Parentesis_a Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_CUERPO",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // IDENTIFICADOR_CUERPO ::= Identificador Punto Identificador Parentesis_a ARGUMENTOS Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_CUERPO",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // IDENTIFICADOR_CUERPO ::= This Punto Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_CUERPO",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // IDENTIFICADOR_CUERPO ::= This Punto Identificador Parentesis_a ARGUMENTOS Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_CUERPO",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // IDENTIFICADOR_CUERPO ::= This Punto Identificador Parentesis_a Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_CUERPO",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CUERPO ::= ESTRUCTURA_CONTROL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // CUERPO ::= EXPRESION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CUERPO ::= ASIGNACION_BASICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // CUERPO ::= ESTRUCTURA_CONTROL CUERPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // CUERPO ::= EXPRESION P_coma CUERPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // CUERPO ::= ASIGNACION_BASICA CUERPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // MODIFICADORES ::= Visibilidad 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // MODIFICADORES ::= Modificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // MODIFICADORES ::= Visibilidad MODIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // MODIFICADORES ::= Modificador MODIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODIFICADORES",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // PARAMETROS ::= T_dato Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // PARAMETROS ::= T_dato Identificador Coma PARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // RETURNS ::= Returns Parentesis_a T_dato Identificador Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURNS",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // FUNCION ::= FUNCION_HEADER Llave_a Return EXPRESION P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // FUNCION ::= FUNCION_HEADER Llave_a CUERPO Return EXPRESION P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // FUNCION ::= FUNCION_HEADER Llave_a VARIABLES CUERPO Return EXPRESION P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // FUNCION ::= FUNCION_HEADER Llave_a VARIABLES Return EXPRESION P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // FUNCION ::= FUNCION_HEADER Llave_a Return EXPRESION P_coma Llave_c FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // FUNCION ::= FUNCION_HEADER Llave_a CUERPO Return EXPRESION P_coma Llave_c FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // FUNCION ::= FUNCION_HEADER Llave_a VARIABLES CUERPO Return EXPRESION P_coma Llave_c FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // FUNCION ::= FUNCION_HEADER Llave_a VARIABLES Return EXPRESION P_coma Llave_c FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // FUNCION_HEADER ::= Function Identificador Parentesis_a PARAMETROS Parentesis_c MODIFICADORES RETURNS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_HEADER",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // FUNCION_HEADER ::= Function Identificador Parentesis_a PARAMETROS Parentesis_c RETURNS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_HEADER",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // FUNCION_HEADER ::= Function Identificador Parentesis_a PARAMETROS Parentesis_c MODIFICADORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_HEADER",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // FUNCION_HEADER ::= Function Identificador Parentesis_a PARAMETROS Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_HEADER",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ESTRUCTURA ::= Struct Identificador error VARIABLES Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ESTRUCTURA ::= Struct error Llave_a VARIABLES Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ESTRUCTURA ::= Struct Identificador error VARIABLES Llave_c ESTRUCTURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ESTRUCTURA ::= Struct error Llave_a VARIABLES Llave_c ESTRUCTURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ESTRUCTURA ::= Struct Identificador Llave_a VARIABLES Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ESTRUCTURA ::= Struct Identificador Llave_a VARIABLES Llave_c ESTRUCTURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ASIGNACION ::= Igual EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // VARIABLES ::= T_dato Corchete_a error Identificador ASIGNACION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // VARIABLES ::= T_dato Corchete_a error Visibilidad Identificador ASIGNACION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // VARIABLES ::= T_dato Corchete_a error Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // VARIABLES ::= T_dato Corchete_a error Visibilidad Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // VARIABLES ::= T_dato Corchete_a error Identificador ASIGNACION P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // VARIABLES ::= T_dato Corchete_a error Visibilidad Identificador ASIGNACION P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // VARIABLES ::= T_dato Corchete_a error Identificador P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // VARIABLES ::= T_dato Corchete_a error Visibilidad Identificador P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // VARIABLES ::= T_dato error Corchete_c Identificador ASIGNACION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // VARIABLES ::= T_dato error Corchete_c Visibilidad Identificador ASIGNACION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // VARIABLES ::= T_dato error Corchete_c Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // VARIABLES ::= T_dato error Corchete_c Visibilidad Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // VARIABLES ::= T_dato error Corchete_c Identificador ASIGNACION P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // VARIABLES ::= T_dato error Corchete_c Visibilidad Identificador ASIGNACION P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // VARIABLES ::= T_dato error Corchete_c Identificador P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // VARIABLES ::= T_dato Corchete_a Corchete_c error ASIGNACION P_coma T_dato error Corchete_c Visibilidad Identificador P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // VARIABLES ::= T_dato Corchete_a Corchete_c Visibilidad error ASIGNACION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // VARIABLES ::= T_dato error ASIGNACION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // VARIABLES ::= T_dato Visibilidad error ASIGNACION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // VARIABLES ::= T_dato Corchete_a Corchete_c error P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // VARIABLES ::= T_dato Corchete_a Corchete_c Visibilidad error P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // VARIABLES ::= T_dato error P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // VARIABLES ::= T_dato Visibilidad error P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // VARIABLES ::= T_dato Corchete_a Corchete_c error ASIGNACION P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // VARIABLES ::= T_dato Corchete_a Corchete_c Visibilidad error ASIGNACION P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // VARIABLES ::= T_dato error ASIGNACION P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // VARIABLES ::= T_dato Visibilidad error ASIGNACION P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // VARIABLES ::= T_dato Corchete_a Corchete_c error P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // VARIABLES ::= T_dato Corchete_a Corchete_c Visibilidad error P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VARIABLES ::= T_dato error P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VARIABLES ::= T_dato Visibilidad error P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VARIABLES ::= T_dato Corchete_a Corchete_c Identificador ASIGNACION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // VARIABLES ::= T_dato Corchete_a Corchete_c Visibilidad Identificador ASIGNACION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // VARIABLES ::= T_dato Identificador ASIGNACION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // VARIABLES ::= T_dato Visibilidad Identificador ASIGNACION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // VARIABLES ::= T_dato Corchete_a Corchete_c Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // VARIABLES ::= T_dato Corchete_a Corchete_c Visibilidad Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // VARIABLES ::= T_dato Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // VARIABLES ::= T_dato Visibilidad Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // VARIABLES ::= T_dato Corchete_a Corchete_c Identificador ASIGNACION P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // VARIABLES ::= T_dato Corchete_a Corchete_c Visibilidad Identificador ASIGNACION P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // VARIABLES ::= T_dato Identificador ASIGNACION P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // VARIABLES ::= T_dato Visibilidad Identificador ASIGNACION P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VARIABLES ::= T_dato Corchete_a Corchete_c Identificador P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VARIABLES ::= T_dato Corchete_a Corchete_c Visibilidad Identificador P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // VARIABLES ::= T_dato Identificador P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VARIABLES ::= T_dato Visibilidad Identificador P_coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LISTA ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LISTA ::= Identificador Coma LISTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ENUMERADOR ::= Enum Identificador error Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ENUMERADOR ::= Enum Identificador error LISTA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ENUMERADOR ::= Enum error Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ENUMERADOR ::= Enum error Llave_a LISTA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ENUMERADOR ::= Enum Identificador error Llave_c ENUMERADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ENUMERADOR ::= Enum Identificador error LISTA Llave_c ENUMERADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ENUMERADOR ::= Enum error Llave_a Llave_c ENUMERADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ENUMERADOR ::= Enum error Llave_a LISTA Llave_c ENUMERADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ENUMERADOR ::= Enum Identificador Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ENUMERADOR ::= Enum Identificador Llave_a LISTA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ENUMERADOR ::= Enum Identificador Llave_a Llave_c ENUMERADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ENUMERADOR ::= Enum Identificador Llave_a LISTA Llave_c ENUMERADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONTRATO ::= Contract Identificador Llave_a FUNCION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONTRATO ::= Contract Identificador Llave_a ESTRUCTURA FUNCION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONTRATO ::= Contract Identificador Llave_a ESTRUCTURA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONTRATO ::= Contract Identificador Llave_a VARIABLES ESTRUCTURA FUNCION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONTRATO ::= Contract Identificador Llave_a VARIABLES FUNCION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CONTRATO ::= Contract Identificador Llave_a VARIABLES ESTRUCTURA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CONTRATO ::= Contract Identificador Llave_a VARIABLES Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR VARIABLES ESTRUCTURA FUNCION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR ESTRUCTURA FUNCION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR VARIABLES FUNCION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR VARIABLES ESTRUCTURA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR FUNCION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR ESTRUCTURA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR VARIABLES Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CONTRATO ::= Contract Identificador Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CONTRATO ::= Contract Identificador Llave_a FUNCION Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CONTRATO ::= Contract Identificador Llave_a ESTRUCTURA FUNCION Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CONTRATO ::= Contract Identificador Llave_a ESTRUCTURA Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONTRATO ::= Contract Identificador Llave_a VARIABLES ESTRUCTURA FUNCION Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CONTRATO ::= Contract Identificador Llave_a VARIABLES FUNCION Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CONTRATO ::= Contract Identificador Llave_a VARIABLES ESTRUCTURA Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CONTRATO ::= Contract Identificador Llave_a VARIABLES Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR VARIABLES ESTRUCTURA FUNCION Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR ESTRUCTURA FUNCION Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR VARIABLES FUNCION Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR VARIABLES ESTRUCTURA Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR FUNCION Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR ESTRUCTURA Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR VARIABLES Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CONTRATO ::= Contract Identificador Llave_a ENUMERADOR Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CONTRATO ::= Contract Identificador Llave_a Llave_c CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTRATO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Pragma Solidity Caret Numero Numero P_coma CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Pragma Solidity Numero Numero P_coma CONTRATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

