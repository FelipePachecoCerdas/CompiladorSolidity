
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Jul 17 18:48:34 CST 2020
//----------------------------------------------------

package lexico;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Jul 17 18:48:34 CST 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\107\000\002\002\004\000\002\002\013\000\002\002" +
    "\014\000\002\002\015\000\002\002\015\000\002\002\015" +
    "\000\002\002\016\000\002\002\016\000\002\002\016\000" +
    "\002\002\017\000\002\002\014\000\002\002\015\000\002" +
    "\002\015\000\002\002\016\000\002\002\014\000\002\002" +
    "\015\000\002\002\014\000\002\017\010\000\002\017\007" +
    "\000\002\010\005\000\002\010\003\000\002\020\007\000" +
    "\002\020\010\000\002\020\011\000\002\020\011\000\002" +
    "\020\011\000\002\020\011\000\002\020\006\000\002\020" +
    "\007\000\002\020\010\000\002\020\010\000\002\020\010" +
    "\000\002\020\010\000\002\021\010\000\002\021\007\000" +
    "\002\022\016\000\002\022\017\000\002\022\023\000\002" +
    "\022\024\000\002\022\015\000\002\022\016\000\002\022" +
    "\022\000\002\022\023\000\002\011\006\000\002\011\004" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\004\000\002\003\003\000\002\003\005\000\002\003" +
    "\004\000\002\003\003\000\002\004\014\000\002\006\011" +
    "\000\002\015\003\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\006\000\002\015\007\000\002" +
    "\007\015\000\002\012\011\000\002\013\013\000\002\014" +
    "\011\000\002\016\012\000\002\016\011\000\002\005\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010c\000\004\037\004\001\002\000\004\040\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\034\010\001\002\000\004\034\011\001\002\000" +
    "\004\032\012\001\002\000\004\035\013\001\002\000\004" +
    "\033\014\001\002\000\004\025\015\001\002\000\014\006" +
    "\021\026\025\036\022\041\024\042\016\001\002\000\004" +
    "\033\350\001\002\000\010\026\345\041\264\042\016\001" +
    "\002\000\014\006\021\026\321\036\324\041\024\042\016" +
    "\001\002\000\006\027\302\050\301\001\002\000\004\033" +
    "\272\001\002\000\012\006\060\026\256\041\024\042\016" +
    "\001\002\000\004\033\252\001\002\000\004\002\000\001" +
    "\002\000\006\026\027\042\030\001\002\000\004\002\ufff1" +
    "\001\002\000\004\033\031\001\002\000\004\023\032\001" +
    "\002\000\004\006\034\001\002\000\006\024\037\044\036" +
    "\001\002\000\004\033\035\001\002\000\006\024\uffd5\044" +
    "\uffd5\001\002\000\004\006\250\001\002\000\010\025\040" +
    "\043\042\046\041\001\002\000\004\006\021\001\002\000" +
    "\004\023\231\001\002\000\006\025\043\046\044\001\002" +
    "\000\004\006\021\001\002\000\004\023\045\001\002\000" +
    "\004\006\046\001\002\000\004\033\047\001\002\000\004" +
    "\024\050\001\002\000\004\025\051\001\002\000\004\006" +
    "\021\001\002\000\014\006\060\010\054\013\056\014\064" +
    "\033\065\001\002\000\020\010\uffcd\012\uffcd\013\uffcd\014" +
    "\uffcd\026\uffcd\033\uffcd\046\uffcd\001\002\000\004\023\212" +
    "\001\002\000\020\010\uffca\012\uffca\013\uffca\014\uffca\026" +
    "\uffca\033\uffca\046\uffca\001\002\000\004\023\204\001\002" +
    "\000\020\010\uffd3\012\uffd3\013\uffd3\014\uffd3\026\uffd3\033" +
    "\uffd3\046\uffd3\001\002\000\006\027\165\050\164\001\002" +
    "\000\020\010\uffcf\012\uffcf\013\uffcf\014\uffcf\026\uffcf\033" +
    "\uffcf\046\uffcf\001\002\000\020\010\uffd1\012\uffd1\013\uffd1" +
    "\014\uffd1\026\uffd1\033\uffd1\046\uffd1\001\002\000\016\010" +
    "\054\012\144\013\056\014\064\033\065\046\161\001\002" +
    "\000\004\023\111\001\002\000\004\016\066\001\002\000" +
    "\004\023\067\001\002\000\006\022\071\033\072\001\002" +
    "\000\004\024\103\001\002\000\006\024\uffc7\032\uffc7\001" +
    "\002\000\004\020\073\001\002\000\012\005\075\022\076" +
    "\033\077\034\074\001\002\000\006\024\uffc5\032\uffc5\001" +
    "\002\000\006\005\100\033\101\001\002\000\006\024\uffc6" +
    "\032\uffc6\001\002\000\006\024\uffc4\032\uffc4\001\002\000" +
    "\006\024\uffc3\032\uffc3\001\002\000\004\005\102\001\002" +
    "\000\006\024\uffc2\032\uffc2\001\002\000\004\051\104\001" +
    "\002\000\004\033\105\001\002\000\004\015\106\001\002" +
    "\000\004\033\107\001\002\000\004\032\110\001\002\000" +
    "\020\010\uffc9\012\uffc9\013\uffc9\014\uffc9\026\uffc9\033\uffc9" +
    "\046\uffc9\001\002\000\006\006\114\033\113\001\002\000" +
    "\004\024\135\001\002\000\004\016\127\001\002\000\004" +
    "\033\115\001\002\000\004\016\116\001\002\000\004\034" +
    "\117\001\002\000\004\032\120\001\002\000\006\022\071" +
    "\033\072\001\002\000\004\032\122\001\002\000\004\033" +
    "\124\001\002\000\004\024\uffbd\001\002\000\004\021\125" +
    "\001\002\000\004\034\126\001\002\000\004\024\uffbb\001" +
    "\002\000\004\034\130\001\002\000\004\032\131\001\002" +
    "\000\006\022\071\033\072\001\002\000\004\032\133\001" +
    "\002\000\004\033\124\001\002\000\004\024\uffbc\001\002" +
    "\000\004\025\136\001\002\000\012\010\054\013\056\014" +
    "\064\033\065\001\002\000\016\010\054\012\144\013\056" +
    "\014\064\026\146\033\065\001\002\000\020\010\uffce\012" +
    "\uffce\013\uffce\014\uffce\026\uffce\033\uffce\046\uffce\001\002" +
    "\000\020\010\uffcb\012\uffcb\013\uffcb\014\uffcb\026\uffcb\033" +
    "\uffcb\046\uffcb\001\002\000\020\010\uffd4\012\uffd4\013\uffd4" +
    "\014\uffd4\026\uffd4\033\uffd4\046\uffd4\001\002\000\020\010" +
    "\uffd0\012\uffd0\013\uffd0\014\uffd0\026\uffd0\033\uffd0\046\uffd0" +
    "\001\002\000\004\025\151\001\002\000\020\010\uffd2\012" +
    "\uffd2\013\uffd2\014\uffd2\026\uffd2\033\uffd2\046\uffd2\001\002" +
    "\000\020\010\uffbe\012\uffbe\013\uffbe\014\uffbe\026\uffbe\033" +
    "\uffbe\046\uffbe\001\002\000\004\012\144\001\002\000\020" +
    "\010\uffcc\012\uffcc\013\uffcc\014\uffcc\026\uffcc\033\uffcc\046" +
    "\uffcc\001\002\000\012\010\054\013\056\014\064\033\065" +
    "\001\002\000\016\010\054\012\144\013\056\014\064\026" +
    "\153\033\065\001\002\000\004\013\154\001\002\000\004" +
    "\023\155\001\002\000\006\022\071\033\072\001\002\000" +
    "\004\024\157\001\002\000\004\032\160\001\002\000\020" +
    "\010\uffbf\012\uffbf\013\uffbf\014\uffbf\026\uffbf\033\uffbf\046" +
    "\uffbf\001\002\000\004\033\162\001\002\000\004\026\163" +
    "\001\002\000\006\026\uffdb\042\uffdb\001\002\000\004\033" +
    "\171\001\002\000\004\030\166\001\002\000\004\033\167" +
    "\001\002\000\004\032\170\001\002\000\022\006\uffeb\010" +
    "\uffeb\013\uffeb\014\uffeb\026\uffeb\033\uffeb\041\uffeb\042\uffeb" +
    "\001\002\000\006\016\173\032\172\001\002\000\022\006" +
    "\uffec\010\uffec\013\uffec\014\uffec\026\uffec\033\uffec\041\uffec" +
    "\042\uffec\001\002\000\012\022\176\033\177\034\174\045" +
    "\175\001\002\000\004\032\203\001\002\000\004\032\202" +
    "\001\002\000\004\032\201\001\002\000\004\032\200\001" +
    "\002\000\022\006\uffe7\010\uffe7\013\uffe7\014\uffe7\026\uffe7" +
    "\033\uffe7\041\uffe7\042\uffe7\001\002\000\022\006\uffe8\010" +
    "\uffe8\013\uffe8\014\uffe8\026\uffe8\033\uffe8\041\uffe8\042\uffe8" +
    "\001\002\000\022\006\uffe9\010\uffe9\013\uffe9\014\uffe9\026" +
    "\uffe9\033\uffe9\041\uffe9\042\uffe9\001\002\000\022\006\uffea" +
    "\010\uffea\013\uffea\014\uffea\026\uffea\033\uffea\041\uffea\042" +
    "\uffea\001\002\000\006\022\071\033\072\001\002\000\004" +
    "\024\206\001\002\000\004\025\207\001\002\000\012\010" +
    "\054\013\056\014\064\033\065\001\002\000\016\010\054" +
    "\012\144\013\056\014\064\026\211\033\065\001\002\000" +
    "\020\010\uffc0\012\uffc0\013\uffc0\014\uffc0\026\uffc0\033\uffc0" +
    "\046\uffc0\001\002\000\006\022\071\033\072\001\002\000" +
    "\004\024\214\001\002\000\004\025\215\001\002\000\012" +
    "\010\054\013\056\014\064\033\065\001\002\000\016\010" +
    "\054\012\144\013\056\014\064\026\217\033\065\001\002" +
    "\000\022\010\uffc8\011\220\012\uffc8\013\uffc8\014\uffc8\026" +
    "\uffc8\033\uffc8\046\uffc8\001\002\000\004\025\221\001\002" +
    "\000\012\010\054\013\056\014\064\033\065\001\002\000" +
    "\016\010\054\012\144\013\056\014\064\026\223\033\065" +
    "\001\002\000\020\010\uffc1\012\uffc1\013\uffc1\014\uffc1\026" +
    "\uffc1\033\uffc1\046\uffc1\001\002\000\014\006\060\010\054" +
    "\013\056\014\064\033\065\001\002\000\016\010\054\012" +
    "\144\013\056\014\064\033\065\046\226\001\002\000\004" +
    "\033\227\001\002\000\004\026\230\001\002\000\006\026" +
    "\uffdd\042\uffdd\001\002\000\004\006\232\001\002\000\004" +
    "\033\233\001\002\000\004\024\234\001\002\000\004\025" +
    "\235\001\002\000\004\006\021\001\002\000\014\006\060" +
    "\010\054\013\056\014\064\033\065\001\002\000\016\010" +
    "\054\012\144\013\056\014\064\033\065\046\240\001\002" +
    "\000\004\033\241\001\002\000\004\026\242\001\002\000" +
    "\006\026\uffdc\042\uffdc\001\002\000\014\006\060\010\054" +
    "\013\056\014\064\033\065\001\002\000\016\010\054\012" +
    "\144\013\056\014\064\033\065\046\245\001\002\000\004" +
    "\033\246\001\002\000\004\026\247\001\002\000\006\026" +
    "\uffde\042\uffde\001\002\000\004\033\251\001\002\000\006" +
    "\024\uffd6\044\uffd6\001\002\000\004\025\253\001\002\000" +
    "\004\006\021\001\002\000\006\006\060\026\255\001\002" +
    "\000\010\026\uffdf\041\uffdf\042\uffdf\001\002\000\004\002" +
    "\ufff7\001\002\000\010\026\262\041\264\042\016\001\002" +
    "\000\006\026\261\042\030\001\002\000\004\002\ufff5\001" +
    "\002\000\004\002\ufff6\001\002\000\006\026\271\042\030" +
    "\001\002\000\004\033\265\001\002\000\004\025\266\001" +
    "\002\000\004\006\021\001\002\000\006\006\060\026\270" +
    "\001\002\000\010\026\uffe0\041\uffe0\042\uffe0\001\002\000" +
    "\004\002\ufff4\001\002\000\004\025\273\001\002\000\004" +
    "\033\275\001\002\000\006\026\276\044\277\001\002\000" +
    "\006\026\uffed\044\uffed\001\002\000\014\006\uffef\026\uffef" +
    "\036\uffef\041\uffef\042\uffef\001\002\000\004\033\300\001" +
    "\002\000\006\026\uffee\044\uffee\001\002\000\004\033\306" +
    "\001\002\000\004\030\303\001\002\000\004\033\304\001" +
    "\002\000\004\032\305\001\002\000\022\006\uffe5\010\uffe5" +
    "\013\uffe5\014\uffe5\026\uffe5\033\uffe5\041\uffe5\042\uffe5\001" +
    "\002\000\006\016\310\032\307\001\002\000\022\006\uffe6" +
    "\010\uffe6\013\uffe6\014\uffe6\026\uffe6\033\uffe6\041\uffe6\042" +
    "\uffe6\001\002\000\012\022\313\033\314\034\311\045\312" +
    "\001\002\000\004\032\320\001\002\000\004\032\317\001" +
    "\002\000\004\032\316\001\002\000\004\032\315\001\002" +
    "\000\022\006\uffe1\010\uffe1\013\uffe1\014\uffe1\026\uffe1\033" +
    "\uffe1\041\uffe1\042\uffe1\001\002\000\022\006\uffe2\010\uffe2" +
    "\013\uffe2\014\uffe2\026\uffe2\033\uffe2\041\uffe2\042\uffe2\001" +
    "\002\000\022\006\uffe3\010\uffe3\013\uffe3\014\uffe3\026\uffe3" +
    "\033\uffe3\041\uffe3\042\uffe3\001\002\000\022\006\uffe4\010" +
    "\uffe4\013\uffe4\014\uffe4\026\uffe4\033\uffe4\041\uffe4\042\uffe4" +
    "\001\002\000\004\002\uffff\001\002\000\010\026\342\041" +
    "\264\042\016\001\002\000\006\026\341\042\030\001\002" +
    "\000\004\033\335\001\002\000\012\006\060\026\326\041" +
    "\024\042\016\001\002\000\004\002\ufffe\001\002\000\010" +
    "\026\332\041\264\042\016\001\002\000\006\026\331\042" +
    "\030\001\002\000\004\002\ufffa\001\002\000\004\002\ufffb" +
    "\001\002\000\006\026\334\042\030\001\002\000\004\002" +
    "\ufff8\001\002\000\004\025\336\001\002\000\004\033\275" +
    "\001\002\000\006\026\340\044\277\001\002\000\014\006" +
    "\ufff0\026\ufff0\036\ufff0\041\ufff0\042\ufff0\001\002\000\004" +
    "\002\ufffc\001\002\000\004\002\ufffd\001\002\000\006\026" +
    "\344\042\030\001\002\000\004\002\ufff9\001\002\000\004" +
    "\002\ufff3\001\002\000\006\026\347\042\030\001\002\000" +
    "\004\002\ufff2\001\002\000\004\023\351\001\002\000\004" +
    "\006\034\001\002\000\006\024\353\044\036\001\002\000" +
    "\010\025\354\043\356\046\355\001\002\000\004\006\021" +
    "\001\002\000\004\023\u0100\001\002\000\006\025\357\046" +
    "\360\001\002\000\004\006\021\001\002\000\004\023\361" +
    "\001\002\000\004\006\362\001\002\000\004\033\363\001" +
    "\002\000\004\024\364\001\002\000\004\025\365\001\002" +
    "\000\004\006\021\001\002\000\014\006\060\010\054\013" +
    "\056\014\064\033\065\001\002\000\016\010\054\012\144" +
    "\013\056\014\064\033\065\046\370\001\002\000\004\033" +
    "\371\001\002\000\004\026\372\001\002\000\006\026\uffd7" +
    "\042\uffd7\001\002\000\014\006\060\010\054\013\056\014" +
    "\064\033\065\001\002\000\016\010\054\012\144\013\056" +
    "\014\064\033\065\046\375\001\002\000\004\033\376\001" +
    "\002\000\004\026\377\001\002\000\006\026\uffd9\042\uffd9" +
    "\001\002\000\004\006\u0101\001\002\000\004\033\u0102\001" +
    "\002\000\004\024\u0103\001\002\000\004\025\u0104\001\002" +
    "\000\004\006\021\001\002\000\014\006\060\010\054\013" +
    "\056\014\064\033\065\001\002\000\016\010\054\012\144" +
    "\013\056\014\064\033\065\046\u0107\001\002\000\004\033" +
    "\u0108\001\002\000\004\026\u0109\001\002\000\006\026\uffd8" +
    "\042\uffd8\001\002\000\014\006\060\010\054\013\056\014" +
    "\064\033\065\001\002\000\016\010\054\012\144\013\056" +
    "\014\064\033\065\046\u010c\001\002\000\004\033\u010d\001" +
    "\002\000\004\026\u010e\001\002\000\006\026\uffda\042\uffda" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010c\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\017\017\020\022\021\016" +
    "\022\025\001\001\000\002\001\001\000\004\022\345\001" +
    "\001\000\010\020\324\021\321\022\322\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\021\256\022\257\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\242\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\223\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\051\001\001\000\016\003\062\004\056\006" +
    "\061\007\060\012\052\014\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\004\141\006\144\007\142\012\137\013" +
    "\146\014\140\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\120\001\001\000\002\001" +
    "\001\000\004\005\122\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\131\001\001\000\002" +
    "\001\001\000\004\005\133\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\003\136\004\056\006\061\007\060" +
    "\012\052\014\054\001\001\000\016\004\141\006\144\007" +
    "\142\012\137\013\146\014\140\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\147\001\001\000\002\001\001\000\016\003\151\004" +
    "\056\006\061\007\060\012\052\014\054\001\001\000\016" +
    "\004\141\006\144\007\142\012\137\013\146\014\140\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\155" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\204\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\207\004\056\006\061\007\060\012\052\014" +
    "\054\001\001\000\016\004\141\006\144\007\142\012\137" +
    "\013\146\014\140\001\001\000\002\001\001\000\004\015" +
    "\212\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\215\004\056\006\061\007\060\012\052\014\054\001" +
    "\001\000\016\004\141\006\144\007\142\012\137\013\146" +
    "\014\140\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\003\221\004\056\006\061\007\060\012\052\014\054" +
    "\001\001\000\016\004\141\006\144\007\142\012\137\013" +
    "\146\014\140\001\001\000\002\001\001\000\016\003\224" +
    "\004\056\006\061\007\060\012\052\014\054\001\001\000" +
    "\016\004\141\006\144\007\142\012\137\013\146\014\140" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\235\001\001\000\016\003" +
    "\236\004\056\006\061\007\060\012\052\014\054\001\001" +
    "\000\016\004\141\006\144\007\142\012\137\013\146\014" +
    "\140\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\243\004\056\006\061\007\060\012" +
    "\052\014\054\001\001\000\016\004\141\006\144\007\142" +
    "\012\137\013\146\014\140\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\253\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\262\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\266\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\273\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\342\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\021\326\022\327\001\001\000\002\001" +
    "\001\000\004\022\332\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\336\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\351\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\u0109\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\372\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\365\001\001\000\016\003\366\004\056" +
    "\006\061\007\060\012\052\014\054\001\001\000\016\004" +
    "\141\006\144\007\142\012\137\013\146\014\140\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\003\373\004\056\006\061\007\060\012\052\014\054" +
    "\001\001\000\016\004\141\006\144\007\142\012\137\013" +
    "\146\014\140\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\u0104\001\001" +
    "\000\016\003\u0105\004\056\006\061\007\060\012\052\014" +
    "\054\001\001\000\016\004\141\006\144\007\142\012\137" +
    "\013\146\014\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\003\u010a\004\056\006\061" +
    "\007\060\012\052\014\054\001\001\000\016\004\141\006" +
    "\144\007\142\012\137\013\146\014\140\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SENTENCIA_FOR ::= T_dato Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION ::= Identificador Igual Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Pregunta Identificador Dos_Puntos Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIA ::= SENTENCIA DO_WHILE DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PARAMETROS ::= T_dato Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PARAMETROS ::= PARAMETROS Coma T_dato Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FUNCION ::= Function Identificador Parentesis_a PARAMETROS Parentesis_c Modificador Return Parentesis_a T_dato Identificador Parentesis_c Llave_a VARIABLES SENTENCIA Return Identificador Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FUNCION ::= Function Identificador Parentesis_a PARAMETROS Parentesis_c Return Parentesis_a T_dato Identificador Parentesis_c Llave_a VARIABLES SENTENCIA Return Identificador Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-15)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FUNCION ::= Function Identificador Parentesis_a PARAMETROS Parentesis_c Modificador Llave_a VARIABLES SENTENCIA Return Identificador Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FUNCION ::= Function Identificador Parentesis_a PARAMETROS Parentesis_c Llave_a VARIABLES SENTENCIA Return Identificador Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FUNCION ::= FUNCION Function Identificador Parentesis_a PARAMETROS Parentesis_c Modificador Return Parentesis_a T_dato Identificador Parentesis_c Llave_a VARIABLES SENTENCIA Return Identificador Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-17)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FUNCION ::= FUNCION Function Identificador Parentesis_a PARAMETROS Parentesis_c Return Parentesis_a T_dato Identificador Parentesis_c Llave_a VARIABLES SENTENCIA Return Identificador Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FUNCION ::= FUNCION Function Identificador Parentesis_a PARAMETROS Parentesis_c Modificador Llave_a VARIABLES SENTENCIA Return Identificador Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FUNCION ::= FUNCION Function Identificador Parentesis_a PARAMETROS Parentesis_c Llave_a VARIABLES SENTENCIA Return Identificador Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ESTRUCTURA ::= Struct Identificador Llave_a VARIABLES Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ESTRUCTURA ::= ESTRUCTURA Struct Identificador Llave_a VARIABLES Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VARIABLES ::= T_dato Visibilidad Identificador Igual Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // VARIABLES ::= T_dato Visibilidad Identificador Igual Op_booleano P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VARIABLES ::= T_dato Visibilidad Identificador Igual String P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VARIABLES ::= T_dato Visibilidad Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VARIABLES ::= T_dato Corchete_a Corchete_c Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VARIABLES ::= T_dato Visibilidad Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VARIABLES ::= VARIABLES T_dato Visibilidad Identificador Igual Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VARIABLES ::= VARIABLES T_dato Visibilidad Identificador Igual Op_booleano P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VARIABLES ::= VARIABLES T_dato Visibilidad Identificador Igual String P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VARIABLES ::= VARIABLES T_dato Visibilidad Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VARIABLES ::= VARIABLES T_dato Corchete_a Corchete_c Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VARIABLES ::= VARIABLES T_dato Visibilidad Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LISTA ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LISTA ::= LISTA Coma Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ENUMERADOR ::= Enum Identificador Llave_a LISTA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ENUMERADOR ::= ENUMERADOR Enum Identificador Llave_a LISTA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUMERADOR",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INICIO ::= Pragma Solidity Numero Numero P_coma Contract Identificador Llave_a FUNCION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INICIO ::= Pragma Solidity Numero Numero P_coma Contract Identificador Llave_a ESTRUCTURA FUNCION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INICIO ::= Pragma Solidity Numero Numero P_coma Contract Identificador Llave_a ESTRUCTURA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INICIO ::= Pragma Solidity Numero Numero P_coma Contract Identificador Llave_a VARIABLES ESTRUCTURA FUNCION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INICIO ::= Pragma Solidity Numero Numero P_coma Contract Identificador Llave_a VARIABLES FUNCION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INICIO ::= Pragma Solidity Numero Numero P_coma Contract Identificador Llave_a VARIABLES ESTRUCTURA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INICIO ::= Pragma Solidity Numero Numero P_coma Contract Identificador Llave_a VARIABLES Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INICIO ::= Pragma Solidity Numero Numero P_coma Contract Identificador Llave_a ENUMERADOR VARIABLES ESTRUCTURA FUNCION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INICIO ::= Pragma Solidity Numero Numero P_coma Contract Identificador Llave_a ENUMERADOR ESTRUCTURA FUNCION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= Pragma Solidity Numero Numero P_coma Contract Identificador Llave_a ENUMERADOR VARIABLES FUNCION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= Pragma Solidity Numero Numero P_coma Contract Identificador Llave_a ENUMERADOR VARIABLES ESTRUCTURA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= Pragma Solidity Numero Numero P_coma Contract Identificador Llave_a ENUMERADOR FUNCION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= Pragma Solidity Numero Numero P_coma Contract Identificador Llave_a ENUMERADOR ESTRUCTURA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= Pragma Solidity Numero Numero P_coma Contract Identificador Llave_a ENUMERADOR VARIABLES Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Pragma Solidity Numero Numero P_coma Contract Identificador Llave_a ENUMERADOR Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Pragma Solidity Numero Numero P_coma Contract Identificador Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

