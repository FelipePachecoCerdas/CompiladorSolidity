/* The following code was generated by JFlex 1.6.1 */

package lexico;
import static lexico.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/lexico/lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\20\1\12\1\23\1\23\1\22\22\0\1\20\1\25\1\10"+
    "\2\17\1\26\1\31\1\11\1\26\1\26\1\33\1\25\1\26\1\16"+
    "\1\3\1\21\1\2\1\62\1\65\1\64\1\66\1\67\1\63\1\2"+
    "\1\61\1\2\1\26\1\35\1\27\1\34\1\30\1\26\1\17\6\4"+
    "\11\1\1\56\12\1\1\26\1\13\1\26\1\26\2\17\1\36\1\42"+
    "\1\47\1\37\1\6\1\53\1\55\1\5\1\51\1\1\1\45\1\44"+
    "\1\52\1\14\1\43\1\54\1\1\1\40\1\41\1\15\1\50\1\57"+
    "\1\60\1\7\1\46\1\70\1\26\1\32\1\26\1\26\6\17\1\24"+
    "\153\17\1\17\u1e02\17\u0134\0\1\23\1\23\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\2\2\1\1\1\5"+
    "\1\2\11\4\17\2\2\1\1\3\1\1\5\2\1\0"+
    "\1\3\1\0\2\2\1\3\1\0\1\5\1\0\1\2"+
    "\1\6\41\2\1\0\1\3\1\0\1\6\6\2\1\0"+
    "\21\2\1\6\15\2\1\7\2\1\2\2\1\0\3\2"+
    "\1\10\7\2\1\6\1\10\2\2\1\6\14\2\2\1"+
    "\1\2\1\3\31\2\1\3\2\2\1\6\25\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[217];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\71\0\u01c8\0\u0201\0\u023a\0\u0273\0\71\0\u02ac\0\u02e5"+
    "\0\u031e\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad"+
    "\0\u04e6\0\u051f\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c\0\u0675"+
    "\0\u06ae\0\u06e7\0\u0720\0\u0759\0\u0792\0\u07cb\0\u0804\0\u083d"+
    "\0\u0876\0\u08af\0\u08e8\0\u018f\0\71\0\u0921\0\u095a\0\u0993"+
    "\0\u09cc\0\344\0\u0a05\0\u0a3e\0\u0a77\0\162\0\u0ab0\0\u0ae9"+
    "\0\u0b22\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1"+
    "\0\u0cea\0\u0d23\0\u0d5c\0\u0d95\0\u0dce\0\u0e07\0\u0e40\0\u0e79"+
    "\0\u0eb2\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u1041"+
    "\0\u107a\0\u10b3\0\u10ec\0\u1125\0\u115e\0\u1197\0\u11d0\0\u1209"+
    "\0\u1242\0\u1242\0\u127b\0\u12b4\0\u12ed\0\u1326\0\u135f\0\u1398"+
    "\0\u13d1\0\u140a\0\u1443\0\u147c\0\u14b5\0\u14ee\0\u1527\0\u1560"+
    "\0\u1599\0\u15d2\0\u160b\0\u1644\0\u167d\0\u16b6\0\u16ef\0\u1728"+
    "\0\u1761\0\u179a\0\u17d3\0\u180c\0\u1845\0\u187e\0\u18b7\0\u18f0"+
    "\0\u1929\0\u1962\0\u199b\0\u19d4\0\u1a0d\0\u1a46\0\u1a7f\0\u1ab8"+
    "\0\u1af1\0\162\0\u1b2a\0\u1b63\0\u1b9c\0\u1bd5\0\u1c0e\0\u1c47"+
    "\0\u1c80\0\u1cb9\0\162\0\u1cf2\0\u1d2b\0\u1d64\0\u1d9d\0\u1dd6"+
    "\0\u1e0f\0\u1e48\0\u1e81\0\u1eba\0\u1ef3\0\u1f2c\0\u1f65\0\u1f9e"+
    "\0\u1fd7\0\u2010\0\u2049\0\u2082\0\u20bb\0\u20f4\0\u212d\0\u2166"+
    "\0\u219f\0\u21d8\0\u2211\0\u224a\0\u2283\0\u22bc\0\u140a\0\u22f5"+
    "\0\u232e\0\u2367\0\u23a0\0\u23d9\0\u2412\0\u244b\0\u2484\0\u24bd"+
    "\0\u24f6\0\u252f\0\u2568\0\u25a1\0\u25da\0\u2613\0\u264c\0\u2685"+
    "\0\u26be\0\u26f7\0\u2730\0\u2769\0\u27a2\0\u27db\0\u2814\0\u284d"+
    "\0\u0720\0\u2886\0\u28bf\0\u1398\0\u28f8\0\u2931\0\u296a\0\u29a3"+
    "\0\u29dc\0\u2a15\0\u2a4e\0\u2a87\0\u2ac0\0\u2af9\0\u2b32\0\u2b6b"+
    "\0\u2ba4\0\u2bdd\0\u2c16\0\u2c4f\0\u2c88\0\u2cc1\0\u2cfa\0\u2d33"+
    "\0\u2d6c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[217];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\3\1\6\1\7\1\3"+
    "\1\10\1\2\1\11\1\2\1\3\1\12\1\13\1\2"+
    "\1\11\1\14\1\11\2\0\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\15\1\16\1\24\1\25\1\26"+
    "\1\27\1\30\3\3\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\3\1\40\1\41\1\42\7\4\1\3"+
    "\72\0\2\3\1\43\4\3\2\43\1\0\1\43\2\3"+
    "\2\43\1\0\1\43\2\0\11\43\1\0\33\3\1\0"+
    "\1\44\1\4\1\45\2\44\1\46\1\44\4\0\2\44"+
    "\20\0\23\44\7\4\1\44\2\0\1\45\56\0\7\45"+
    "\2\0\2\3\1\43\2\3\1\47\1\3\2\43\1\0"+
    "\1\43\2\3\2\43\1\0\1\43\2\0\11\43\1\0"+
    "\5\3\1\50\25\3\1\0\2\3\1\43\4\3\2\43"+
    "\1\0\1\43\1\51\1\52\2\43\1\0\1\43\2\0"+
    "\11\43\1\0\6\3\1\53\24\3\10\54\1\55\1\54"+
    "\1\0\1\56\55\54\1\0\2\3\1\43\1\3\1\57"+
    "\2\3\2\43\1\0\1\43\2\3\2\43\1\0\1\43"+
    "\2\0\11\43\1\0\2\3\1\60\30\3\2\0\1\61"+
    "\1\62\30\0\1\16\24\0\7\61\22\0\1\63\11\0"+
    "\1\64\1\16\70\0\1\16\63\0\1\16\4\0\1\16"+
    "\64\0\1\16\3\0\1\16\65\0\1\16\71\0\1\16"+
    "\71\0\2\16\35\0\2\3\1\43\4\3\2\43\1\0"+
    "\1\43\2\3\2\43\1\0\1\43\2\0\11\43\1\0"+
    "\1\3\1\65\1\3\1\66\27\3\1\0\2\3\1\43"+
    "\2\3\1\67\1\3\2\43\1\0\1\43\2\3\2\43"+
    "\1\0\1\43\2\0\11\43\1\0\1\70\4\3\1\66"+
    "\25\3\1\0\2\3\1\43\2\3\1\71\1\3\2\43"+
    "\1\0\1\43\2\3\2\43\1\0\1\43\2\0\11\43"+
    "\1\0\33\3\1\0\2\3\1\43\2\3\1\72\1\3"+
    "\2\43\1\0\1\43\1\3\1\73\2\43\1\0\1\43"+
    "\2\0\11\43\1\0\5\3\1\74\24\3\1\75\1\0"+
    "\2\3\1\43\4\3\2\43\1\0\1\43\2\3\2\43"+
    "\1\0\1\43\2\0\11\43\1\0\1\76\1\3\1\77"+
    "\2\3\1\100\2\3\1\101\22\3\1\0\2\3\1\43"+
    "\2\3\1\102\1\3\2\43\1\0\1\43\2\3\2\43"+
    "\1\0\1\43\2\0\11\43\1\0\33\3\1\0\2\3"+
    "\1\43\4\3\2\43\1\0\1\43\2\3\2\43\1\0"+
    "\1\43\2\0\11\43\1\0\1\103\4\3\1\104\25\3"+
    "\1\0\2\3\1\43\4\3\2\43\1\0\1\43\2\3"+
    "\2\43\1\0\1\43\2\0\11\43\1\0\13\3\1\105"+
    "\1\3\1\106\15\3\1\0\2\3\1\43\4\3\2\43"+
    "\1\0\1\43\1\107\1\3\2\43\1\0\1\43\2\0"+
    "\11\43\1\0\14\3\1\110\1\66\15\3\1\0\2\3"+
    "\1\43\4\3\2\43\1\0\1\43\2\3\2\43\1\0"+
    "\1\43\2\0\11\43\1\0\1\111\4\3\1\112\5\3"+
    "\1\113\17\3\1\0\2\3\1\43\4\3\2\43\1\0"+
    "\1\43\2\3\2\43\1\0\1\43\2\0\11\43\1\0"+
    "\1\114\1\3\1\115\2\3\1\116\4\3\1\117\1\120"+
    "\17\3\1\0\2\3\1\43\4\3\2\43\1\0\1\43"+
    "\2\3\2\43\1\0\1\43\2\0\11\43\1\0\1\121"+
    "\1\3\1\122\7\3\1\123\20\3\1\0\2\3\1\43"+
    "\4\3\2\43\1\0\1\43\2\3\2\43\1\0\1\43"+
    "\2\0\11\43\1\0\2\3\1\124\30\3\1\0\2\3"+
    "\1\43\4\3\2\43\1\0\1\43\2\3\2\43\1\0"+
    "\1\43\2\0\11\43\1\0\1\116\12\3\1\125\17\3"+
    "\1\0\2\3\1\43\1\3\1\126\1\127\1\3\2\43"+
    "\1\0\1\43\2\3\2\43\1\0\1\43\2\0\11\43"+
    "\1\0\33\3\1\0\11\43\1\0\5\43\1\0\1\43"+
    "\2\0\11\43\1\0\33\43\1\0\1\44\2\0\4\44"+
    "\4\0\2\44\20\0\23\44\7\0\1\44\2\0\1\45"+
    "\3\0\1\130\52\0\7\45\2\0\1\44\1\131\1\0"+
    "\4\44\4\0\2\44\1\132\17\0\23\44\7\131\1\44"+
    "\1\0\2\3\1\43\3\3\1\133\2\43\1\0\1\43"+
    "\2\3\2\43\1\0\1\43\2\0\11\43\1\0\33\3"+
    "\1\0\2\3\1\43\4\3\2\43\1\0\1\43\2\3"+
    "\2\43\1\0\1\43\2\0\11\43\1\0\12\3\1\134"+
    "\20\3\1\0\2\3\1\43\4\3\2\43\1\0\1\43"+
    "\2\3\2\43\1\0\1\43\2\0\11\43\1\0\12\3"+
    "\1\135\20\3\1\0\2\3\1\43\1\3\1\136\2\3"+
    "\2\43\1\0\1\43\2\3\2\43\1\0\1\43\2\0"+
    "\11\43\1\0\33\3\1\0\2\3\1\43\4\3\2\43"+
    "\1\0\1\43\2\3\2\43\1\0\1\43\2\0\11\43"+
    "\1\0\3\3\1\137\27\3\10\0\1\54\2\0\3\54"+
    "\54\0\2\3\1\43\4\3\2\43\1\0\1\43\2\3"+
    "\2\43\1\0\1\43\2\0\11\43\1\0\13\3\1\140"+
    "\17\3\1\0\2\3\1\43\4\3\2\43\1\0\1\43"+
    "\2\3\2\43\1\0\1\43\2\0\11\43\1\0\1\141"+
    "\11\3\1\137\20\3\2\0\1\61\1\45\2\0\1\130"+
    "\52\0\7\61\1\0\12\63\1\0\7\63\3\0\44\63"+
    "\33\0\1\142\36\0\2\3\1\43\4\3\2\43\1\0"+
    "\1\43\2\3\2\43\1\0\1\43\2\0\11\43\1\0"+
    "\1\3\1\143\31\3\1\0\2\3\1\43\4\3\2\43"+
    "\1\0\1\43\2\3\2\43\1\0\1\43\2\0\11\43"+
    "\1\0\6\3\1\144\24\3\1\0\2\3\1\43\4\3"+
    "\2\43\1\0\1\43\2\3\2\43\1\0\1\43\2\0"+
    "\11\43\1\0\10\3\1\145\22\3\1\0\2\3\1\43"+
    "\4\3\2\43\1\0\1\43\1\3\1\146\2\43\1\0"+
    "\1\43\2\0\11\43\1\0\33\3\1\0\2\3\1\43"+
    "\4\3\2\43\1\0\1\43\1\147\1\3\2\43\1\0"+
    "\1\43\2\0\11\43\1\0\11\3\1\150\21\3\1\0"+
    "\2\3\1\43\4\3\2\43\1\0\1\43\2\3\2\43"+
    "\1\0\1\43\2\0\11\43\1\0\2\3\1\151\30\3"+
    "\1\0\2\3\1\43\4\3\2\43\1\0\1\43\2\3"+
    "\2\43\1\0\1\43\2\0\11\43\1\0\6\3\1\152"+
    "\24\3\1\0\2\3\1\43\4\3\2\43\1\0\1\43"+
    "\2\3\2\43\1\0\1\43\2\0\11\43\1\0\1\153"+
    "\32\3\1\0\2\3\1\43\4\3\2\43\1\0\1\43"+
    "\2\3\2\43\1\0\1\43\2\0\11\43\1\0\6\3"+
    "\1\154\24\3\1\0\2\3\1\43\2\3\1\155\1\3"+
    "\2\43\1\0\1\43\2\3\2\43\1\0\1\43\2\0"+
    "\11\43\1\0\33\3\1\0\2\3\1\43\4\3\2\43"+
    "\1\0\1\43\2\3\2\43\1\0\1\43\2\0\11\43"+
    "\1\0\5\3\1\156\25\3\1\0\2\3\1\43\4\3"+
    "\2\43\1\0\1\43\1\3\1\157\2\43\1\0\1\43"+
    "\2\0\11\43\1\0\33\3\1\0\2\3\1\43\4\3"+
    "\2\43\1\0\1\43\2\3\2\43\1\0\1\43\2\0"+
    "\11\43\1\0\1\134\32\3\1\0\2\3\1\43\4\3"+
    "\2\43\1\0\1\43\2\3\2\43\1\0\1\43\2\0"+
    "\11\43\1\0\6\3\1\160\24\3\1\0\2\3\1\43"+
    "\4\3\2\43\1\0\1\43\1\161\1\3\2\43\1\0"+
    "\1\43\2\0\11\43\1\0\33\3\1\0\2\3\1\43"+
    "\4\3\2\43\1\0\1\43\1\162\1\3\2\43\1\0"+
    "\1\43\2\0\11\43\1\0\33\3\1\0\2\3\1\43"+
    "\4\3\2\43\1\0\1\43\2\3\2\43\1\0\1\43"+
    "\2\0\11\43\1\0\13\3\1\163\17\3\1\0\2\3"+
    "\1\43\4\3\2\43\1\0\1\43\1\3\1\164\2\43"+
    "\1\0\1\43\2\0\11\43\1\0\33\3\1\0\2\3"+
    "\1\43\4\3\2\43\1\0\1\43\2\3\2\43\1\0"+
    "\1\43\2\0\11\43\1\0\16\3\1\165\14\3\1\0"+
    "\2\3\1\43\4\3\2\43\1\0\1\43\2\3\2\43"+
    "\1\0\1\43\2\0\11\43\1\0\16\3\1\166\14\3"+
    "\1\0\2\3\1\43\4\3\2\43\1\0\1\43\2\3"+
    "\2\43\1\0\1\43\2\0\11\43\1\0\1\3\1\167"+
    "\31\3\1\0\2\3\1\43\4\3\2\43\1\0\1\43"+
    "\1\170\1\3\2\43\1\0\1\43\2\0\11\43\1\0"+
    "\33\3\1\0\2\3\1\43\4\3\2\43\1\0\1\43"+
    "\2\3\2\43\1\0\1\43\2\0\11\43\1\0\6\3"+
    "\1\53\24\3\1\0\2\3\1\43\4\3\2\43\1\0"+
    "\1\43\2\3\2\43\1\0\1\43\2\0\11\43\1\0"+
    "\5\3\1\135\25\3\1\0\2\3\1\43\4\3\2\43"+
    "\1\0\1\43\2\3\2\43\1\0\1\43\2\0\11\43"+
    "\1\0\2\3\1\66\30\3\1\0\2\3\1\43\4\3"+
    "\2\43\1\0\1\43\1\171\1\3\2\43\1\0\1\43"+
    "\2\0\11\43\1\0\33\3\1\0\2\3\1\43\4\3"+
    "\2\43\1\0\1\43\1\172\1\3\2\43\1\0\1\43"+
    "\2\0\11\43\1\0\33\3\1\0\2\3\1\43\4\3"+
    "\2\43\1\0\1\43\2\3\2\43\1\0\1\43\2\0"+
    "\11\43\1\0\10\3\1\173\22\3\1\0\2\3\1\43"+
    "\4\3\2\43\1\0\1\43\2\3\2\43\1\0\1\43"+
    "\2\0\11\43\1\0\13\3\1\174\17\3\1\0\2\3"+
    "\1\43\4\3\2\43\1\0\1\43\2\3\2\43\1\0"+
    "\1\43\2\0\11\43\1\0\4\3\1\175\26\3\1\0"+
    "\2\3\1\43\4\3\2\43\1\0\1\43\2\3\2\43"+
    "\1\0\1\43\2\0\11\43\1\0\1\176\32\3\1\0"+
    "\2\3\1\43\2\3\1\177\1\3\2\43\1\0\1\43"+
    "\2\3\2\43\1\0\1\43\2\0\11\43\1\0\33\3"+
    "\1\0\2\3\1\43\4\3\2\43\1\0\1\43\2\3"+
    "\2\43\1\0\1\43\2\0\11\43\1\0\13\3\1\200"+
    "\17\3\1\0\2\3\1\43\2\3\1\201\1\3\2\43"+
    "\1\0\1\43\2\3\2\43\1\0\1\43\2\0\11\43"+
    "\1\0\13\3\1\202\17\3\2\0\1\131\13\0\1\132"+
    "\42\0\7\131\3\0\1\131\56\0\7\131\2\0\2\3"+
    "\1\43\4\3\1\203\1\204\1\0\1\43\2\3\2\43"+
    "\1\0\1\43\2\0\11\43\1\0\33\3\1\0\2\3"+
    "\1\43\4\3\2\43\1\0\1\43\2\3\2\43\1\0"+
    "\1\43\2\0\11\43\1\0\2\3\1\145\30\3\1\0"+
    "\2\3\1\43\4\3\2\43\1\0\1\43\2\3\2\43"+
    "\1\0\1\43\2\0\11\43\1\0\14\3\1\66\16\3"+
    "\1\0\2\3\1\43\2\3\1\205\1\3\2\43\1\0"+
    "\1\43\2\3\2\43\1\0\1\43\2\0\11\43\1\0"+
    "\33\3\1\0\2\3\1\43\2\3\1\66\1\3\2\43"+
    "\1\0\1\43\2\3\2\43\1\0\1\43\2\0\11\43"+
    "\1\0\33\3\1\0\2\3\1\43\4\3\2\43\1\0"+
    "\1\43\2\3\2\43\1\0\1\43\2\0\11\43\1\0"+
    "\3\3\1\66\27\3\1\0\2\3\1\43\4\3\2\43"+
    "\1\0\1\43\1\206\1\3\2\43\1\0\1\43\2\0"+
    "\11\43\1\0\33\3\12\142\1\64\20\142\1\207\35\142"+
    "\1\0\2\3\1\43\4\3\2\43\1\0\1\43\2\3"+
    "\2\43\1\0\1\43\2\0\11\43\1\0\2\3\1\210"+
    "\30\3\1\0\2\3\1\43\2\3\1\211\1\3\2\43"+
    "\1\0\1\43\2\3\2\43\1\0\1\43\2\0\11\43"+
    "\1\0\33\3\1\0\2\3\1\43\4\3\2\43\1\0"+
    "\1\43\2\3\2\43\1\0\1\43\2\0\11\43\1\0"+
    "\3\3\1\202\27\3\1\0\2\3\1\43\4\3\2\43"+
    "\1\0\1\43\2\3\2\43\1\0\1\43\2\0\11\43"+
    "\1\0\12\3\1\212\20\3\1\0\2\3\1\43\4\3"+
    "\2\43\1\0\1\43\2\3\2\43\1\0\1\43\2\0"+
    "\11\43\1\0\1\3\1\213\31\3\1\0\2\3\1\43"+
    "\4\3\2\43\1\0\1\43\2\3\2\43\1\0\1\43"+
    "\2\0\11\43\1\0\5\3\1\214\25\3\1\0\2\3"+
    "\1\43\4\3\2\43\1\0\1\43\2\3\2\43\1\0"+
    "\1\43\2\0\11\43\1\0\12\3\1\215\1\216\17\3"+
    "\1\0\2\3\1\43\4\3\2\43\1\0\1\43\2\3"+
    "\2\43\1\0\1\43\2\0\11\43\1\0\13\3\1\217"+
    "\17\3\1\0\2\3\1\43\4\3\2\43\1\0\1\43"+
    "\2\3\2\43\1\0\1\43\2\0\11\43\1\0\4\3"+
    "\1\220\26\3\1\0\2\3\1\43\4\3\2\43\1\0"+
    "\1\43\2\3\2\43\1\0\1\43\2\0\11\43\1\0"+
    "\1\221\32\3\1\0\2\3\1\43\4\3\2\43\1\0"+
    "\1\43\2\3\2\43\1\0\1\43\2\0\11\43\1\0"+
    "\1\222\32\3\1\0\2\3\1\43\4\3\2\43\1\0"+
    "\1\43\2\3\2\43\1\0\1\43\2\0\11\43\1\0"+
    "\6\3\1\66\24\3\1\0\2\3\1\43\2\3\1\223"+
    "\1\3\2\43\1\0\1\43\2\3\2\43\1\0\1\43"+
    "\2\0\11\43\1\0\33\3\1\0\2\3\1\43\4\3"+
    "\2\43\1\0\1\43\2\3\2\43\1\0\1\43\2\0"+
    "\11\43\1\0\6\3\1\224\24\3\1\0\2\3\1\43"+
    "\4\3\2\43\1\0\1\43\1\3\1\225\2\43\1\0"+
    "\1\43\2\0\11\43\1\0\3\3\1\226\27\3\1\0"+
    "\2\3\1\43\4\3\2\43\1\0\1\43\1\3\1\227"+
    "\2\43\1\0\1\43\2\0\11\43\1\0\33\3\1\0"+
    "\2\3\1\43\3\3\1\230\2\43\1\0\1\43\2\3"+
    "\2\43\1\0\1\43\2\0\11\43\1\0\33\3\1\0"+
    "\2\3\1\43\2\3\1\231\1\3\2\43\1\0\1\43"+
    "\2\3\2\43\1\0\1\43\2\0\11\43\1\0\33\3"+
    "\1\0\2\3\1\43\4\3\2\43\1\0\1\43\2\3"+
    "\2\43\1\0\1\43\2\0\11\43\1\0\5\3\1\232"+
    "\25\3\1\0\2\3\1\43\4\3\2\43\1\0\1\43"+
    "\2\3\2\43\1\0\1\43\2\0\11\43\1\0\16\3"+
    "\1\233\14\3\1\0\2\3\1\43\4\3\2\43\1\0"+
    "\1\43\2\3\2\43\1\0\1\43\2\0\11\43\1\0"+
    "\13\3\1\234\17\3\1\0\2\3\1\43\4\3\2\43"+
    "\1\0\1\43\2\3\2\43\1\0\1\43\2\0\11\43"+
    "\1\0\12\3\1\235\20\3\1\0\2\3\1\43\4\3"+
    "\2\43\1\0\1\43\2\3\2\43\1\0\1\43\2\0"+
    "\11\43\1\0\11\3\1\236\21\3\1\0\2\3\1\43"+
    "\4\3\2\43\1\0\1\43\1\237\1\3\2\43\1\0"+
    "\1\43\2\0\11\43\1\0\33\3\1\0\2\3\1\43"+
    "\4\3\2\43\1\0\1\43\2\3\2\43\1\0\1\43"+
    "\2\0\11\43\1\0\1\240\32\3\1\0\2\3\1\43"+
    "\4\3\2\43\1\0\1\43\2\3\2\43\1\0\1\43"+
    "\2\0\11\43\1\0\21\3\1\241\11\3\1\0\2\3"+
    "\1\43\4\3\2\43\1\0\1\43\2\3\2\43\1\0"+
    "\1\43\2\0\11\43\1\0\6\3\1\242\24\3\1\0"+
    "\2\3\1\43\4\3\2\43\1\0\1\43\2\3\2\43"+
    "\1\0\1\43\2\0\11\43\1\0\17\3\1\243\13\3"+
    "\1\0\2\3\1\43\4\3\2\43\1\0\1\43\2\3"+
    "\2\43\1\0\1\43\2\0\11\43\1\0\22\3\1\66"+
    "\10\3\1\0\2\3\1\43\4\3\2\43\1\0\1\43"+
    "\2\3\2\43\1\0\1\43\2\0\11\43\1\0\6\3"+
    "\1\137\24\3\1\0\2\3\1\43\4\3\2\43\1\0"+
    "\1\43\2\3\2\43\1\0\1\43\2\0\11\43\1\0"+
    "\7\3\1\145\23\3\1\0\1\43\1\244\1\43\1\244"+
    "\1\43\1\244\3\43\1\0\5\43\1\0\1\43\2\0"+
    "\11\43\1\0\2\244\2\43\1\244\4\43\1\244\3\43"+
    "\1\244\5\43\7\244\1\43\1\0\1\43\1\245\1\43"+
    "\1\245\1\43\1\245\3\43\1\0\5\43\1\0\1\43"+
    "\2\0\11\43\1\0\2\245\2\43\1\245\4\43\1\245"+
    "\3\43\1\245\5\43\7\245\1\43\1\0\2\3\1\43"+
    "\4\3\2\43\1\0\1\43\2\3\2\43\1\0\1\43"+
    "\2\0\11\43\1\0\2\3\1\202\30\3\1\0\2\3"+
    "\1\43\4\3\2\43\1\0\1\43\2\3\2\43\1\0"+
    "\1\43\2\0\11\43\1\0\3\3\1\246\27\3\12\142"+
    "\1\64\6\142\1\247\11\142\1\207\35\142\1\0\2\3"+
    "\1\43\2\3\1\250\1\3\2\43\1\0\1\43\2\3"+
    "\2\43\1\0\1\43\2\0\11\43\1\0\33\3\1\0"+
    "\2\3\1\43\4\3\2\43\1\0\1\43\1\3\1\137"+
    "\2\43\1\0\1\43\2\0\11\43\1\0\17\3\1\251"+
    "\13\3\1\0\2\3\1\43\4\3\2\43\1\0\1\43"+
    "\2\3\2\43\1\0\1\43\2\0\11\43\1\0\2\3"+
    "\1\252\30\3\1\0\2\3\1\43\4\3\2\43\1\0"+
    "\1\43\1\253\1\3\2\43\1\0\1\43\2\0\11\43"+
    "\1\0\33\3\1\0\2\3\1\43\4\3\2\43\1\0"+
    "\1\43\2\3\2\43\1\0\1\43\2\0\11\43\1\0"+
    "\11\3\1\254\21\3\1\0\2\3\1\43\4\3\2\43"+
    "\1\0\1\43\1\255\1\3\2\43\1\0\1\43\2\0"+
    "\11\43\1\0\33\3\1\0\2\3\1\43\4\3\2\43"+
    "\1\0\1\43\2\3\2\43\1\0\1\43\2\0\11\43"+
    "\1\0\1\3\1\256\31\3\1\0\2\3\1\43\4\3"+
    "\2\43\1\0\1\43\2\3\2\43\1\0\1\43\2\0"+
    "\11\43\1\0\5\3\1\202\25\3\1\0\2\3\1\43"+
    "\4\3\2\43\1\0\1\43\1\257\1\3\2\43\1\0"+
    "\1\43\2\0\11\43\1\0\33\3\1\0\2\3\1\43"+
    "\4\3\2\43\1\0\1\43\2\3\2\43\1\0\1\43"+
    "\2\0\11\43\1\0\7\3\1\66\23\3\1\0\2\3"+
    "\1\43\4\3\2\43\1\0\1\43\2\3\2\43\1\0"+
    "\1\43\2\0\11\43\1\0\3\3\1\227\27\3\1\0"+
    "\2\3\1\43\4\3\2\43\1\0\1\43\2\3\2\43"+
    "\1\0\1\43\2\0\11\43\1\0\11\3\1\260\21\3"+
    "\1\0\2\3\1\43\4\3\2\43\1\0\1\43\2\3"+
    "\2\43\1\0\1\43\2\0\11\43\1\0\2\3\1\261"+
    "\10\3\1\262\17\3\1\0\2\3\1\43\4\3\2\43"+
    "\1\0\1\43\1\3\1\263\2\43\1\0\1\43\2\0"+
    "\11\43\1\0\33\3\1\0\2\3\1\43\4\3\2\43"+
    "\1\0\1\43\2\3\2\43\1\0\1\43\2\0\11\43"+
    "\1\0\23\3\1\66\1\264\1\265\1\266\1\267\3\3"+
    "\1\0\2\3\1\43\2\3\1\270\1\3\2\43\1\0"+
    "\1\43\2\3\2\43\1\0\1\43\2\0\11\43\1\0"+
    "\33\3\1\0\2\3\1\43\4\3\2\43\1\0\1\43"+
    "\2\3\2\43\1\0\1\43\2\0\11\43\1\0\2\3"+
    "\1\271\30\3\1\0\2\3\1\43\4\3\2\43\1\0"+
    "\1\43\2\3\2\43\1\0\1\43\2\0\11\43\1\0"+
    "\2\3\1\254\30\3\1\0\2\3\1\43\4\3\2\43"+
    "\1\0\1\43\2\3\2\43\1\0\1\43\2\0\11\43"+
    "\1\0\13\3\1\216\17\3\1\0\2\3\1\43\4\3"+
    "\2\43\1\0\1\43\2\3\2\43\1\0\1\43\2\0"+
    "\11\43\1\0\15\3\1\272\15\3\1\0\2\3\1\43"+
    "\4\3\2\43\1\0\1\43\1\3\1\273\2\43\1\0"+
    "\1\43\2\0\11\43\1\0\33\3\1\0\2\3\1\43"+
    "\4\3\2\43\1\0\1\43\1\3\1\274\2\43\1\0"+
    "\1\43\2\0\11\43\1\0\33\3\1\0\2\3\1\43"+
    "\2\3\1\275\1\3\2\43\1\0\1\43\2\3\2\43"+
    "\1\0\1\43\2\0\11\43\1\0\33\3\1\0\2\3"+
    "\1\43\4\3\2\43\1\0\1\43\2\3\2\43\1\0"+
    "\1\43\2\0\11\43\1\0\4\3\1\200\26\3\1\0"+
    "\2\3\1\43\4\3\2\43\1\0\1\43\2\3\2\43"+
    "\1\0\1\43\2\0\11\43\1\0\1\276\32\3\1\0"+
    "\2\3\1\43\4\3\2\43\1\0\1\43\2\3\2\43"+
    "\1\0\1\43\2\0\11\43\1\0\13\3\1\277\17\3"+
    "\1\0\2\3\1\43\4\3\2\43\1\0\1\43\2\3"+
    "\2\43\1\0\1\43\2\0\11\43\1\0\14\3\1\300"+
    "\16\3\1\0\1\43\1\244\1\43\1\244\1\43\1\244"+
    "\1\43\1\301\1\43\1\0\5\43\1\0\1\43\2\0"+
    "\11\43\1\0\2\244\2\43\1\244\4\43\1\244\3\43"+
    "\1\244\5\43\7\244\1\43\1\0\1\43\1\245\1\43"+
    "\1\245\1\43\1\245\2\43\1\301\1\0\5\43\1\0"+
    "\1\43\2\0\11\43\1\0\2\245\2\43\1\245\4\43"+
    "\1\245\3\43\1\245\5\43\7\245\1\43\1\0\2\3"+
    "\1\43\4\3\2\43\1\0\1\43\2\3\2\43\1\0"+
    "\1\43\2\0\11\43\1\0\15\3\1\302\15\3\1\0"+
    "\2\3\1\43\4\3\2\43\1\0\1\43\2\3\2\43"+
    "\1\0\1\43\2\0\11\43\1\0\3\3\1\140\27\3"+
    "\1\0\2\3\1\43\4\3\2\43\1\0\1\43\2\3"+
    "\2\43\1\0\1\43\2\0\11\43\1\0\1\303\32\3"+
    "\1\0\2\3\1\43\4\3\2\43\1\0\1\43\1\304"+
    "\1\3\2\43\1\0\1\43\2\0\11\43\1\0\33\3"+
    "\1\0\2\3\1\43\4\3\2\43\1\0\1\43\2\3"+
    "\2\43\1\0\1\43\2\0\11\43\1\0\1\3\1\145"+
    "\31\3\1\0\2\3\1\43\4\3\2\43\1\0\1\43"+
    "\1\3\1\66\2\43\1\0\1\43\2\0\11\43\1\0"+
    "\33\3\1\0\2\3\1\43\4\3\2\43\1\0\1\43"+
    "\2\3\2\43\1\0\1\43\2\0\11\43\1\0\17\3"+
    "\1\66\13\3\1\0\2\3\1\43\4\3\2\43\1\0"+
    "\1\43\2\3\2\43\1\0\1\43\2\0\11\43\1\0"+
    "\13\3\1\305\17\3\1\0\2\3\1\43\4\3\2\43"+
    "\1\0\1\43\2\3\2\43\1\0\1\43\2\0\11\43"+
    "\1\0\11\3\1\306\21\3\1\0\2\3\1\43\4\3"+
    "\2\43\1\0\1\43\2\3\2\43\1\0\1\43\2\0"+
    "\11\43\1\0\5\3\1\307\25\3\1\0\2\3\1\43"+
    "\4\3\2\43\1\0\1\43\2\3\2\43\1\0\1\43"+
    "\2\0\11\43\1\0\1\215\32\3\1\0\2\3\1\43"+
    "\4\3\2\43\1\0\1\43\1\310\1\3\2\43\1\0"+
    "\1\43\2\0\11\43\1\0\33\3\1\0\2\3\1\43"+
    "\4\3\2\43\1\0\1\43\2\3\2\43\1\0\1\43"+
    "\2\0\11\43\1\0\2\3\1\311\30\3\1\0\2\3"+
    "\1\43\4\3\2\43\1\0\1\43\2\3\2\43\1\0"+
    "\1\43\2\0\11\43\1\0\25\3\1\66\1\3\1\312"+
    "\3\3\1\0\2\3\1\43\4\3\2\43\1\0\1\43"+
    "\2\3\2\43\1\0\1\43\2\0\11\43\1\0\30\3"+
    "\1\66\2\3\1\0\2\3\1\43\4\3\2\43\1\0"+
    "\1\43\2\3\2\43\1\0\1\43\2\0\11\43\1\0"+
    "\27\3\1\66\3\3\1\0\2\3\1\43\4\3\2\43"+
    "\1\0\1\43\2\3\2\43\1\0\1\43\2\0\11\43"+
    "\1\0\31\3\1\313\1\3\1\0\2\3\1\43\4\3"+
    "\2\43\1\0\1\43\2\3\2\43\1\0\1\43\2\0"+
    "\11\43\1\0\1\3\1\66\31\3\1\0\2\3\1\43"+
    "\4\3\2\43\1\0\1\43\1\314\1\3\2\43\1\0"+
    "\1\43\2\0\11\43\1\0\33\3\1\0\2\3\1\43"+
    "\4\3\2\43\1\0\1\43\2\3\2\43\1\0\1\43"+
    "\2\0\11\43\1\0\13\3\1\315\17\3\1\0\2\3"+
    "\1\43\2\3\1\145\1\3\2\43\1\0\1\43\2\3"+
    "\2\43\1\0\1\43\2\0\11\43\1\0\33\3\1\0"+
    "\2\3\1\43\4\3\2\43\1\0\1\43\2\3\2\43"+
    "\1\0\1\43\2\0\11\43\1\0\13\3\1\316\17\3"+
    "\1\0\2\3\1\43\4\3\2\43\1\0\1\43\2\3"+
    "\2\43\1\0\1\43\2\0\11\43\1\0\10\3\1\202"+
    "\22\3\1\0\2\3\1\43\4\3\2\43\1\0\1\43"+
    "\1\3\1\137\2\43\1\0\1\43\2\0\11\43\1\0"+
    "\33\3\1\0\2\3\1\43\4\3\2\43\1\0\1\43"+
    "\2\3\2\43\1\0\1\43\2\0\11\43\1\0\11\3"+
    "\1\66\21\3\1\0\2\3\1\43\4\3\2\43\1\0"+
    "\1\43\2\3\2\43\1\0\1\43\2\0\11\43\1\0"+
    "\1\66\32\3\1\0\2\3\1\43\2\3\1\317\1\3"+
    "\2\43\1\0\1\43\2\3\2\43\1\0\1\43\2\0"+
    "\11\43\1\0\33\3\1\0\2\3\1\43\4\3\2\43"+
    "\1\0\1\43\1\3\1\320\2\43\1\0\1\43\2\0"+
    "\11\43\1\0\33\3\1\0\2\3\1\43\4\3\2\43"+
    "\1\0\1\43\1\3\1\321\2\43\1\0\1\43\2\0"+
    "\11\43\1\0\33\3\1\0\2\3\1\43\2\3\1\213"+
    "\1\3\2\43\1\0\1\43\2\3\2\43\1\0\1\43"+
    "\2\0\11\43\1\0\33\3\1\0\2\3\1\43\4\3"+
    "\2\43\1\0\1\43\2\3\2\43\1\0\1\43\2\0"+
    "\11\43\1\0\1\3\1\306\31\3\1\0\2\3\1\43"+
    "\4\3\2\43\1\0\1\43\2\3\2\43\1\0\1\43"+
    "\2\0\11\43\1\0\12\3\1\137\20\3\1\0\2\3"+
    "\1\43\4\3\2\43\1\0\1\43\2\3\2\43\1\0"+
    "\1\43\2\0\11\43\1\0\12\3\1\322\20\3\1\0"+
    "\2\3\1\43\4\3\2\43\1\0\1\43\2\3\2\43"+
    "\1\0\1\43\2\0\11\43\1\0\23\3\1\66\7\3"+
    "\1\0\2\3\1\43\4\3\2\43\1\0\1\43\2\3"+
    "\2\43\1\0\1\43\2\0\11\43\1\0\25\3\1\66"+
    "\5\3\1\0\2\3\1\43\4\3\2\43\1\0\1\43"+
    "\2\3\2\43\1\0\1\43\2\0\11\43\1\0\1\156"+
    "\32\3\1\0\2\3\1\43\2\3\1\116\1\3\2\43"+
    "\1\0\1\43\2\3\2\43\1\0\1\43\2\0\11\43"+
    "\1\0\33\3\1\0\2\3\1\43\4\3\2\43\1\0"+
    "\1\43\2\3\2\43\1\0\1\43\2\0\11\43\1\0"+
    "\5\3\1\323\25\3\1\0\2\3\1\43\4\3\2\43"+
    "\1\0\1\43\2\3\2\43\1\0\1\43\2\0\11\43"+
    "\1\0\2\3\1\213\30\3\1\0\2\3\1\43\2\3"+
    "\1\324\1\3\2\43\1\0\1\43\2\3\2\43\1\0"+
    "\1\43\2\0\11\43\1\0\33\3\1\0\2\3\1\43"+
    "\4\3\2\43\1\0\1\43\2\3\2\43\1\0\1\43"+
    "\2\0\11\43\1\0\10\3\1\66\22\3\1\0\2\3"+
    "\1\43\4\3\2\43\1\0\1\43\2\3\2\43\1\0"+
    "\1\43\2\0\11\43\1\0\11\3\1\325\21\3\1\0"+
    "\2\3\1\43\4\3\2\43\1\0\1\43\1\66\1\3"+
    "\2\43\1\0\1\43\2\0\11\43\1\0\33\3\1\0"+
    "\2\3\1\43\4\3\2\43\1\0\1\43\2\3\2\43"+
    "\1\0\1\43\2\0\11\43\1\0\11\3\1\326\21\3"+
    "\1\0\2\3\1\43\4\3\2\43\1\0\1\43\1\3"+
    "\1\327\2\43\1\0\1\43\2\0\11\43\1\0\33\3"+
    "\1\0\2\3\1\43\4\3\2\43\1\0\1\43\2\3"+
    "\2\43\1\0\1\43\2\0\11\43\1\0\1\330\32\3"+
    "\1\0\2\3\1\43\4\3\2\43\1\0\1\43\2\3"+
    "\2\43\1\0\1\43\2\0\11\43\1\0\5\3\1\116"+
    "\25\3\1\0\2\3\1\43\4\3\2\43\1\0\1\43"+
    "\2\3\2\43\1\0\1\43\2\0\11\43\1\0\6\3"+
    "\1\331\24\3\1\0\2\3\1\43\4\3\2\43\1\0"+
    "\1\43\2\3\2\43\1\0\1\43\2\0\11\43\1\0"+
    "\6\3\1\213\24\3";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11685];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\1\11\4\1\1\11\35\1\1\0"+
    "\1\11\1\0\3\1\1\0\1\1\1\0\43\1\1\0"+
    "\1\1\1\0\7\1\1\0\44\1\1\0\122\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[217];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 206) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { lexeme=yytext()+" "+(yyline+1);return ERROR;
            }
          case 9: break;
          case 2: 
            { lexeme=yytext()+" "+(yyline+1); return IDENTIFICADOR;
            }
          case 10: break;
          case 3: 
            { lexeme=yytext()+" "+(yyline+1); return LITERAL;
            }
          case 11: break;
          case 4: 
            { lexeme=yytext()+" "+(yyline+1); return OPERADOR;
            }
          case 12: break;
          case 5: 
            { /* ignore */
            }
          case 13: break;
          case 6: 
            { lexeme=yytext()+" "+(yyline+1); return PALABRA_RESERVADA;
            }
          case 14: break;
          case 7: 
            { lexeme=yytext()+" "+(yyline+1); return UNIDAD;
            }
          case 15: break;
          case 8: 
            { lexeme=yytext()+" "+(yyline+1); return TRANSAC;
            }
          case 16: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
