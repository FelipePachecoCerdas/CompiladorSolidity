/* The following code was generated by JFlex 1.6.1 */

package lexico;
import static lexico.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/user/Desktop/TEC/Repositorios/CompiladorSolidity/Lexico/src/lexico/lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\14\1\3\1\4\1\4\1\3\22\0\1\14\1\16\1\11"+
    "\2\0\1\17\1\22\1\12\1\17\1\17\1\24\1\16\1\17\1\13"+
    "\1\17\1\15\12\2\1\17\1\17\1\20\1\25\1\21\1\17\1\0"+
    "\6\5\11\1\1\50\12\1\1\17\1\0\1\17\1\17\1\5\1\0"+
    "\1\26\1\32\1\40\1\27\1\7\1\45\1\47\1\6\1\43\1\1"+
    "\1\35\1\34\1\44\1\41\1\33\1\46\1\1\1\30\1\31\1\37"+
    "\1\42\1\51\1\52\1\10\1\36\1\53\1\17\1\23\1\17\1\17"+
    "\6\0\1\4\u1fa2\0\1\4\1\4\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\2\2\1\5\1\4"+
    "\10\5\20\2\1\3\2\2\1\3\5\2\1\0\1\3"+
    "\1\5\1\4\1\5\1\2\1\6\43\2\1\0\1\2"+
    "\1\3\1\6\4\2\2\3\23\2\1\6\15\2\1\7"+
    "\2\0\5\2\1\10\6\2\1\6\1\2\1\10\16\2"+
    "\2\0\25\2\1\3\25\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[204];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\260\0\334\0\u0108\0\u0134"+
    "\0\54\0\u0160\0\u018c\0\54\0\u01b8\0\u01e4\0\u0210\0\u023c"+
    "\0\u0268\0\u0294\0\u02c0\0\u02ec\0\u0318\0\u0344\0\u0370\0\u039c"+
    "\0\u03c8\0\u03f4\0\u0420\0\u044c\0\u0478\0\u04a4\0\u04d0\0\u04fc"+
    "\0\u0528\0\u0554\0\u0580\0\u05ac\0\u05d8\0\u0604\0\u0630\0\u065c"+
    "\0\u0688\0\u06b4\0\u06e0\0\u070c\0\u06e0\0\u0738\0\260\0\u0764"+
    "\0\u0580\0\u0790\0\u07bc\0\u07e8\0\u0814\0\u0840\0\u086c\0\u0898"+
    "\0\u08c4\0\u08f0\0\u091c\0\u0948\0\u0974\0\u09a0\0\u09cc\0\u09f8"+
    "\0\u0a24\0\u0a50\0\u0a7c\0\u0aa8\0\u0ad4\0\u0b00\0\u0b2c\0\u0b58"+
    "\0\u0b84\0\u0bb0\0\u0bdc\0\u0c08\0\u0c34\0\u0c60\0\u0c8c\0\u0cb8"+
    "\0\u0ce4\0\u0d10\0\u0d3c\0\u0d68\0\u0d94\0\u0dc0\0\u0dec\0\u0e18"+
    "\0\u0e44\0\u0e70\0\u0e9c\0\u0ec8\0\u06e0\0\u0d94\0\u0ef4\0\u0f20"+
    "\0\u0f4c\0\u0f78\0\u0fa4\0\u0fd0\0\u0ffc\0\u1028\0\u1054\0\u1080"+
    "\0\u10ac\0\u10d8\0\u1104\0\u1130\0\u115c\0\u1188\0\u11b4\0\u11e0"+
    "\0\u120c\0\u1238\0\u1264\0\u1290\0\u12bc\0\u12e8\0\u1314\0\u1340"+
    "\0\u136c\0\u1398\0\u13c4\0\u13f0\0\u141c\0\u1448\0\u1474\0\u0580"+
    "\0\u14a0\0\u14cc\0\u14f8\0\u1524\0\u1550\0\u157c\0\u15a8\0\u0580"+
    "\0\u15d4\0\u1600\0\u162c\0\u1658\0\u1684\0\u16b0\0\u1130\0\u16dc"+
    "\0\u1708\0\u1734\0\u1760\0\u178c\0\u17b8\0\u17e4\0\u1810\0\u183c"+
    "\0\u1868\0\u1894\0\u18c0\0\u18ec\0\u1918\0\u1944\0\u1970\0\u199c"+
    "\0\u19c8\0\u19f4\0\u1a20\0\u1a4c\0\u1a78\0\u1aa4\0\u1ad0\0\u1afc"+
    "\0\u1b28\0\u1b54\0\u1b80\0\u1bac\0\u1bd8\0\u1c04\0\u1c30\0\u1c5c"+
    "\0\u1c88\0\u1cb4\0\u1ce0\0\u1d0c\0\u1d38\0\u1d64\0\260\0\u1d90"+
    "\0\u1dbc\0\u1de8\0\u1e14\0\u1e40\0\u1e6c\0\u1e98\0\u1ec4\0\u1ef0"+
    "\0\u1f1c\0\u1f48\0\u1f74\0\u1fa0\0\u1fcc\0\u1ff8\0\u2024\0\u2050"+
    "\0\u207c\0\u20a8\0\u20d4\0\u2100";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[204];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\0\1\3\1\6\1\7"+
    "\1\3\2\2\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\13\1\22\1\23\1\24"+
    "\1\25\1\26\3\3\1\27\1\30\1\31\1\3\1\32"+
    "\1\33\1\34\1\35\1\36\1\3\1\37\1\40\1\41"+
    "\1\3\2\0\1\42\52\0\1\43\1\44\2\0\4\43"+
    "\15\0\26\43\2\42\1\45\2\0\47\42\55\0\1\43"+
    "\1\44\2\0\2\43\1\46\1\43\15\0\5\43\1\47"+
    "\20\43\1\0\1\43\1\44\2\0\4\43\15\0\6\43"+
    "\1\50\2\43\1\51\1\43\1\52\12\43\2\53\1\54"+
    "\2\0\20\53\1\55\26\53\2\0\1\42\12\0\1\56"+
    "\7\0\1\57\30\0\1\42\22\0\1\57\30\0\1\42"+
    "\15\0\1\57\4\0\1\57\30\0\1\42\16\0\1\57"+
    "\3\0\1\57\30\0\1\42\17\0\1\57\33\0\1\42"+
    "\20\0\1\57\32\0\1\42\21\0\2\57\27\0\1\43"+
    "\1\44\2\0\4\43\15\0\1\43\1\60\1\43\1\61"+
    "\22\43\1\0\1\43\1\44\2\0\2\43\1\62\1\43"+
    "\15\0\1\63\4\43\1\61\20\43\1\0\1\43\1\44"+
    "\2\0\2\43\1\64\1\43\15\0\26\43\1\0\1\43"+
    "\1\44\2\0\2\43\1\65\1\43\15\0\5\43\1\66"+
    "\3\43\1\67\13\43\1\70\1\0\1\43\1\44\2\0"+
    "\4\43\15\0\1\71\1\43\1\72\2\43\1\73\2\43"+
    "\1\74\15\43\1\0\1\43\1\44\2\0\2\43\1\75"+
    "\1\43\15\0\26\43\1\0\1\43\1\44\2\0\1\43"+
    "\1\76\2\43\15\0\2\43\1\77\23\43\1\0\1\43"+
    "\1\44\2\0\4\43\15\0\1\100\4\43\1\101\20\43"+
    "\1\0\1\43\1\44\2\0\4\43\15\0\15\43\1\102"+
    "\1\43\1\103\6\43\1\0\1\43\1\44\2\0\4\43"+
    "\15\0\13\43\1\104\2\43\1\105\1\61\6\43\1\0"+
    "\1\43\1\44\2\0\4\43\15\0\1\106\4\43\1\107"+
    "\7\43\1\110\10\43\1\0\1\43\1\44\2\0\4\43"+
    "\15\0\1\111\1\43\1\112\2\43\1\113\6\43\1\114"+
    "\1\115\10\43\1\0\1\43\1\44\2\0\4\43\15\0"+
    "\1\116\1\43\1\117\11\43\1\120\11\43\1\0\1\43"+
    "\1\44\2\0\4\43\15\0\2\43\1\121\23\43\1\0"+
    "\1\43\1\44\2\0\4\43\15\0\1\113\14\43\1\122"+
    "\10\43\1\0\1\43\1\44\2\0\1\43\1\123\1\124"+
    "\1\43\15\0\26\43\2\0\1\42\4\0\1\125\45\0"+
    "\2\43\2\0\4\43\15\0\26\43\1\0\1\43\1\44"+
    "\2\0\2\43\1\126\1\43\15\0\26\43\2\42\1\45"+
    "\2\0\2\42\1\127\44\42\1\0\2\43\2\0\3\43"+
    "\1\130\15\0\26\43\1\0\2\43\2\0\4\43\15\0"+
    "\14\43\1\131\11\43\1\0\2\43\2\0\4\43\15\0"+
    "\3\43\1\132\22\43\1\0\2\43\2\0\1\43\1\133"+
    "\2\43\15\0\26\43\1\0\2\43\2\0\4\43\15\0"+
    "\14\43\1\134\11\43\2\0\1\135\51\0\2\135\1\54"+
    "\2\0\2\135\1\136\44\135\3\56\2\0\47\56\1\0"+
    "\2\43\2\0\4\43\15\0\1\43\1\137\24\43\1\0"+
    "\2\43\2\0\4\43\15\0\6\43\1\140\17\43\1\0"+
    "\2\43\2\0\4\43\15\0\10\43\1\141\15\43\1\0"+
    "\2\43\2\0\4\43\15\0\11\43\1\142\14\43\1\0"+
    "\2\43\2\0\4\43\15\0\12\43\1\143\1\144\12\43"+
    "\1\0\2\43\2\0\4\43\15\0\6\43\1\145\17\43"+
    "\1\0\2\43\2\0\4\43\15\0\2\43\1\146\23\43"+
    "\1\0\2\43\2\0\4\43\15\0\1\147\25\43\1\0"+
    "\2\43\2\0\4\43\15\0\6\43\1\150\17\43\1\0"+
    "\2\43\2\0\2\43\1\151\1\43\15\0\26\43\1\0"+
    "\2\43\2\0\4\43\15\0\5\43\1\152\20\43\1\0"+
    "\2\43\2\0\4\43\15\0\11\43\1\153\14\43\1\0"+
    "\2\43\2\0\4\43\15\0\1\131\25\43\1\0\2\43"+
    "\2\0\4\43\15\0\15\43\1\154\10\43\1\0\2\43"+
    "\2\0\4\43\15\0\1\155\13\43\1\132\11\43\1\0"+
    "\2\43\2\0\4\43\15\0\6\43\1\156\17\43\1\0"+
    "\2\43\2\0\4\43\15\0\13\43\1\157\12\43\1\0"+
    "\2\43\2\0\4\43\15\0\13\43\1\160\12\43\1\0"+
    "\2\43\2\0\4\43\15\0\15\43\1\161\10\43\1\0"+
    "\2\43\2\0\4\43\15\0\11\43\1\162\14\43\1\0"+
    "\2\43\2\0\4\43\15\0\20\43\1\163\5\43\1\0"+
    "\2\43\2\0\4\43\15\0\20\43\1\164\5\43\1\0"+
    "\2\43\2\0\4\43\15\0\1\43\1\165\24\43\1\0"+
    "\2\43\2\0\4\43\15\0\13\43\1\166\12\43\1\0"+
    "\2\43\2\0\4\43\15\0\6\43\1\50\17\43\1\0"+
    "\2\43\2\0\4\43\15\0\5\43\1\134\20\43\1\0"+
    "\2\43\2\0\4\43\15\0\2\43\1\61\23\43\1\0"+
    "\2\43\2\0\4\43\15\0\13\43\1\167\12\43\1\0"+
    "\2\43\2\0\4\43\15\0\13\43\1\170\12\43\1\0"+
    "\2\43\2\0\4\43\15\0\10\43\1\171\15\43\1\0"+
    "\2\43\2\0\4\43\15\0\15\43\1\172\10\43\1\0"+
    "\2\43\2\0\4\43\15\0\4\43\1\173\21\43\1\0"+
    "\2\43\2\0\4\43\15\0\1\174\25\43\1\0\2\43"+
    "\2\0\2\43\1\175\1\43\15\0\26\43\1\0\2\43"+
    "\2\0\4\43\15\0\15\43\1\176\10\43\1\0\2\43"+
    "\2\0\2\43\1\177\1\43\15\0\15\43\1\200\10\43"+
    "\2\0\1\135\10\0\1\53\41\0\2\43\2\0\4\43"+
    "\2\0\1\53\12\0\26\43\2\0\1\42\4\0\1\125"+
    "\3\0\1\53\41\0\2\43\2\0\4\43\1\201\1\202"+
    "\13\0\26\43\1\0\2\43\2\0\4\43\15\0\2\43"+
    "\1\141\23\43\1\0\2\43\2\0\2\43\1\61\1\43"+
    "\15\0\26\43\1\0\2\43\2\0\2\43\1\203\1\43"+
    "\15\0\26\43\1\0\2\43\2\0\4\43\15\0\16\43"+
    "\1\61\7\43\1\0\2\43\2\0\4\43\15\0\2\43"+
    "\1\204\23\43\1\0\2\43\2\0\2\43\1\205\1\43"+
    "\15\0\26\43\1\0\2\43\2\0\4\43\15\0\3\43"+
    "\1\200\22\43\1\0\2\43\2\0\4\43\15\0\14\43"+
    "\1\206\11\43\1\0\2\43\2\0\4\43\15\0\5\43"+
    "\1\207\20\43\1\0\2\43\2\0\4\43\15\0\1\43"+
    "\1\210\24\43\1\0\2\43\2\0\4\43\15\0\15\43"+
    "\1\211\10\43\1\0\2\43\2\0\4\43\15\0\14\43"+
    "\1\212\1\213\10\43\1\0\2\43\2\0\4\43\15\0"+
    "\4\43\1\214\21\43\1\0\2\43\2\0\4\43\15\0"+
    "\1\215\25\43\1\0\2\43\2\0\4\43\15\0\1\216"+
    "\25\43\1\0\2\43\2\0\4\43\15\0\6\43\1\61"+
    "\17\43\1\0\2\43\2\0\2\43\1\217\1\43\15\0"+
    "\26\43\1\0\2\43\2\0\4\43\15\0\3\43\1\61"+
    "\22\43\1\0\2\43\2\0\4\43\15\0\13\43\1\220"+
    "\12\43\1\0\2\43\2\0\4\43\15\0\6\43\1\221"+
    "\17\43\1\0\2\43\2\0\4\43\15\0\3\43\1\222"+
    "\5\43\1\223\14\43\1\0\2\43\2\0\4\43\15\0"+
    "\11\43\1\61\14\43\1\0\2\43\2\0\3\43\1\224"+
    "\15\0\26\43\1\0\2\43\2\0\2\43\1\225\1\43"+
    "\15\0\26\43\1\0\2\43\2\0\4\43\15\0\5\43"+
    "\1\226\20\43\1\0\2\43\2\0\4\43\15\0\20\43"+
    "\1\227\5\43\1\0\2\43\2\0\4\43\15\0\15\43"+
    "\1\230\10\43\1\0\2\43\2\0\4\43\15\0\14\43"+
    "\1\231\11\43\1\0\2\43\2\0\4\43\15\0\12\43"+
    "\1\232\13\43\1\0\2\43\2\0\4\43\15\0\13\43"+
    "\1\233\12\43\1\0\2\43\2\0\4\43\15\0\1\234"+
    "\25\43\1\0\2\43\2\0\4\43\15\0\23\43\1\235"+
    "\2\43\1\0\2\43\2\0\4\43\15\0\6\43\1\236"+
    "\17\43\1\0\2\43\2\0\4\43\15\0\21\43\1\237"+
    "\4\43\1\0\2\43\2\0\4\43\15\0\24\43\1\61"+
    "\1\43\1\0\2\43\2\0\4\43\15\0\6\43\1\132"+
    "\17\43\1\0\2\43\2\0\4\43\15\0\7\43\1\141"+
    "\16\43\2\0\1\240\2\0\1\240\50\0\1\241\2\0"+
    "\1\241\47\0\2\43\2\0\4\43\15\0\2\43\1\200"+
    "\23\43\1\0\2\43\2\0\2\43\1\242\1\43\15\0"+
    "\26\43\1\0\2\43\2\0\4\43\15\0\11\43\1\132"+
    "\7\43\1\243\4\43\1\0\2\43\2\0\4\43\15\0"+
    "\2\43\1\244\23\43\1\0\2\43\2\0\4\43\15\0"+
    "\13\43\1\245\12\43\1\0\2\43\2\0\4\43\15\0"+
    "\1\43\1\246\24\43\1\0\2\43\2\0\4\43\15\0"+
    "\12\43\1\160\13\43\1\0\2\43\2\0\4\43\15\0"+
    "\13\43\1\247\12\43\1\0\2\43\2\0\4\43\15\0"+
    "\5\43\1\200\20\43\1\0\2\43\2\0\4\43\15\0"+
    "\13\43\1\250\12\43\1\0\2\43\2\0\4\43\15\0"+
    "\7\43\1\61\16\43\1\0\2\43\2\0\4\43\15\0"+
    "\3\43\1\251\22\43\1\0\2\43\2\0\4\43\15\0"+
    "\12\43\1\252\13\43\1\0\2\43\2\0\4\43\15\0"+
    "\11\43\1\253\14\43\1\0\2\43\2\0\4\43\15\0"+
    "\2\43\1\254\12\43\1\255\10\43\1\0\2\43\2\0"+
    "\2\43\1\256\1\43\15\0\26\43\1\0\2\43\2\0"+
    "\4\43\15\0\2\43\1\257\23\43\1\0\2\43\2\0"+
    "\4\43\15\0\2\43\1\160\23\43\1\0\2\43\2\0"+
    "\4\43\15\0\15\43\1\213\10\43\1\0\2\43\2\0"+
    "\4\43\15\0\17\43\1\260\6\43\1\0\2\43\2\0"+
    "\4\43\15\0\11\43\1\261\14\43\1\0\2\43\2\0"+
    "\4\43\15\0\11\43\1\262\14\43\1\0\2\43\2\0"+
    "\2\43\1\263\1\43\15\0\26\43\1\0\2\43\2\0"+
    "\4\43\15\0\4\43\1\176\21\43\1\0\2\43\2\0"+
    "\4\43\15\0\1\264\25\43\1\0\2\43\2\0\4\43"+
    "\15\0\15\43\1\265\10\43\1\0\2\43\2\0\4\43"+
    "\15\0\16\43\1\266\7\43\2\0\1\240\2\0\1\240"+
    "\3\0\1\267\44\0\1\241\2\0\1\241\4\0\1\267"+
    "\42\0\2\43\2\0\4\43\15\0\3\43\1\154\22\43"+
    "\1\0\2\43\2\0\4\43\15\0\1\270\25\43\1\0"+
    "\2\43\2\0\4\43\15\0\13\43\1\217\12\43\1\0"+
    "\2\43\2\0\4\43\15\0\1\43\1\141\24\43\1\0"+
    "\2\43\2\0\4\43\15\0\15\43\1\271\10\43\1\0"+
    "\2\43\2\0\4\43\15\0\21\43\1\61\4\43\1\0"+
    "\2\43\2\0\4\43\15\0\12\43\1\272\13\43\1\0"+
    "\2\43\2\0\4\43\15\0\17\43\1\273\6\43\1\0"+
    "\2\43\2\0\4\43\15\0\5\43\1\274\20\43\1\0"+
    "\2\43\2\0\4\43\15\0\2\43\1\275\23\43\1\0"+
    "\2\43\2\0\4\43\15\0\1\212\25\43\1\0\2\43"+
    "\2\0\4\43\15\0\13\43\1\276\12\43\1\0\2\43"+
    "\2\0\4\43\15\0\1\43\1\61\24\43\1\0\2\43"+
    "\2\0\4\43\15\0\13\43\1\277\12\43\1\0\2\43"+
    "\2\0\4\43\15\0\15\43\1\300\10\43\1\0\2\43"+
    "\2\0\2\43\1\141\1\43\15\0\26\43\1\0\2\43"+
    "\2\0\4\43\15\0\15\43\1\301\10\43\1\0\2\43"+
    "\2\0\4\43\15\0\10\43\1\200\15\43\1\0\2\43"+
    "\2\0\4\43\15\0\11\43\1\132\14\43\1\0\2\43"+
    "\2\0\4\43\15\0\12\43\1\61\13\43\1\0\2\43"+
    "\2\0\4\43\15\0\1\61\25\43\1\0\2\43\2\0"+
    "\4\43\15\0\11\43\1\302\14\43\1\0\2\43\2\0"+
    "\4\43\15\0\11\43\1\303\14\43\1\0\2\43\2\0"+
    "\2\43\1\210\1\43\15\0\26\43\1\0\2\43\2\0"+
    "\2\43\1\304\1\43\15\0\26\43\1\0\2\43\2\0"+
    "\4\43\15\0\1\43\1\272\24\43\1\0\2\43\2\0"+
    "\4\43\15\0\14\43\1\305\11\43\1\0\2\43\2\0"+
    "\4\43\15\0\14\43\1\132\11\43\1\0\2\43\2\0"+
    "\4\43\15\0\1\152\25\43\1\0\2\43\2\0\2\43"+
    "\1\113\1\43\15\0\26\43\1\0\2\43\2\0\4\43"+
    "\15\0\5\43\1\306\20\43\1\0\2\43\2\0\2\43"+
    "\1\307\1\43\15\0\26\43\1\0\2\43\2\0\4\43"+
    "\15\0\10\43\1\61\15\43\1\0\2\43\2\0\4\43"+
    "\15\0\2\43\1\210\23\43\1\0\2\43\2\0\4\43"+
    "\15\0\12\43\1\310\13\43\1\0\2\43\2\0\4\43"+
    "\15\0\13\43\1\61\12\43\1\0\2\43\2\0\4\43"+
    "\15\0\12\43\1\311\13\43\1\0\2\43\2\0\4\43"+
    "\15\0\11\43\1\312\14\43\1\0\2\43\2\0\4\43"+
    "\15\0\1\313\25\43\1\0\2\43\2\0\4\43\15\0"+
    "\5\43\1\113\20\43\1\0\2\43\2\0\4\43\15\0"+
    "\6\43\1\314\17\43\1\0\2\43\2\0\4\43\15\0"+
    "\6\43\1\210\17\43";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8492];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\1\1\11\45\1\1\0\3\1\1\11\45\1"+
    "\1\0\53\1\2\0\35\1\2\0\25\1\1\11\25\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[204];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 184) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return ERROR;
            }
          case 9: break;
          case 2: 
            { lexeme=yytext(); return IDENTIFICADOR;
            }
          case 10: break;
          case 3: 
            { lexeme=yytext();return LITERAL;
            }
          case 11: break;
          case 4: 
            { /* ignore */
            }
          case 12: break;
          case 5: 
            { lexeme=yytext(); return OPERADOR;
            }
          case 13: break;
          case 6: 
            { lexeme=yytext(); return PALABRA_RESERVADA;
            }
          case 14: break;
          case 7: 
            { lexeme=yytext(); return UNIDAD;
            }
          case 15: break;
          case 8: 
            { lexeme=yytext(); return TRANSAC;
            }
          case 16: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
