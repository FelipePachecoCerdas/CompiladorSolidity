/* The following code was generated by JFlex 1.6.1 */

package lexico;
import static lexico.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/lexico/lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\27\1\24\1\34\1\34\1\33\22\0\1\27\1\36\1\11"+
    "\2\26\1\30\1\41\1\12\1\30\1\30\1\32\1\36\1\30\1\25"+
    "\1\4\1\31\1\2\1\62\1\65\1\64\1\66\1\67\1\63\1\3"+
    "\1\61\1\3\1\30\1\30\1\37\1\43\1\40\1\30\1\26\6\5"+
    "\7\1\1\22\14\1\1\30\1\13\1\30\1\30\2\26\1\44\1\14"+
    "\1\53\1\45\1\7\1\15\1\57\1\6\1\54\1\1\1\51\1\50"+
    "\1\55\1\16\1\47\1\56\1\1\1\17\1\46\1\20\1\23\1\21"+
    "\1\60\1\10\1\52\1\70\1\30\1\42\1\30\1\30\6\26\1\35"+
    "\u1e6e\26\u0134\0\1\34\1\34\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\2\4\1\5\2\3\3\2\6\3"+
    "\1\6\11\5\11\3\1\7\1\1\1\4\1\10\1\1"+
    "\5\3\1\0\1\4\1\2\1\11\1\0\1\2\17\3"+
    "\2\4\1\0\1\6\1\0\1\3\1\12\23\3\1\1"+
    "\1\10\2\4\1\0\1\10\2\1\1\0\1\1\1\12"+
    "\4\3\1\4\2\11\5\2\2\11\5\2\14\3\1\0"+
    "\1\13\12\3\1\12\12\3\1\14\2\4\1\1\1\10"+
    "\1\1\2\2\1\3\6\11\3\2\1\4\1\2\6\11"+
    "\3\2\1\4\1\2\2\3\1\12\5\3\1\12\1\0"+
    "\2\13\2\3\1\15\5\3\1\15\17\3\1\0\2\2"+
    "\1\0\2\2\2\11\1\4\3\11\1\4\1\11\7\3"+
    "\3\13\22\3\1\0\1\16\1\2\1\16\1\4\1\0"+
    "\1\16\1\2\1\16\1\4\2\3\1\12\1\3\1\0"+
    "\1\13\7\3\2\16\2\3\2\13\3\3\1\13\6\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[306];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e\0\u0357"+
    "\0\u0390\0\71\0\u03c9\0\71\0\u0402\0\u043b\0\u0474\0\u04ad"+
    "\0\u04e6\0\u051f\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c\0\u0675"+
    "\0\u06ae\0\u06e7\0\u0720\0\u0759\0\u0792\0\u07cb\0\u0804\0\u083d"+
    "\0\u0876\0\u08af\0\u08e8\0\u0921\0\u095a\0\u0993\0\u09cc\0\u023a"+
    "\0\u0a05\0\71\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b"+
    "\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea\0\u0d23"+
    "\0\u0d5c\0\u0d95\0\u0dce\0\u0e07\0\u0e40\0\u011d\0\u0e79\0\u0eb2"+
    "\0\u0eeb\0\162\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u1041"+
    "\0\u107a\0\u10b3\0\u10ec\0\u1125\0\u115e\0\u1197\0\u11d0\0\u1209"+
    "\0\u1242\0\u127b\0\u12b4\0\u12ed\0\u1326\0\u135f\0\u1398\0\u13d1"+
    "\0\u140a\0\u1443\0\u147c\0\u14b5\0\u14ee\0\u1527\0\u1560\0\u1599"+
    "\0\u15d2\0\u160b\0\u1644\0\u167d\0\71\0\u16b6\0\u16ef\0\u1728"+
    "\0\u1761\0\u179a\0\u17d3\0\u180c\0\u1845\0\u187e\0\u18b7\0\u18f0"+
    "\0\u1929\0\u1962\0\u199b\0\u19d4\0\u1a0d\0\u1a46\0\u1a7f\0\u1ab8"+
    "\0\u1af1\0\u1b2a\0\u1b63\0\u1b9c\0\u1bd5\0\u1c0e\0\u1c47\0\u1c80"+
    "\0\u1cb9\0\u1cf2\0\u1d2b\0\u1d64\0\u1d9d\0\u1dd6\0\u1e0f\0\u1e48"+
    "\0\u1e81\0\u1eba\0\u1ef3\0\u1f2c\0\u1f65\0\u1f9e\0\u1fd7\0\u2010"+
    "\0\u2049\0\u2082\0\u20bb\0\u20f4\0\u212d\0\u2166\0\162\0\u219f"+
    "\0\u21d8\0\u2211\0\u1443\0\u1527\0\u224a\0\u2283\0\u22bc\0\u22f5"+
    "\0\u09cc\0\u232e\0\u2367\0\u23a0\0\u23d9\0\u2412\0\u244b\0\u2484"+
    "\0\u1728\0\u24bd\0\u24f6\0\u252f\0\u0a3e\0\u2568\0\u25a1\0\u25da"+
    "\0\u2613\0\u264c\0\u2685\0\u18b7\0\u26be\0\u26f7\0\u2730\0\u2769"+
    "\0\u27a2\0\u27db\0\u2814\0\u284d\0\u2886\0\u28bf\0\u28f8\0\u2931"+
    "\0\u296a\0\u29a3\0\u29dc\0\162\0\u2a15\0\u2a4e\0\u2a87\0\u2ac0"+
    "\0\u2af9\0\u2b32\0\u2b6b\0\u2ba4\0\u2bdd\0\u2c16\0\u2c4f\0\u2c88"+
    "\0\u2cc1\0\u2cfa\0\u2d33\0\u2d6c\0\u2da5\0\u2dde\0\u2e17\0\u2e50"+
    "\0\u2e89\0\u2ec2\0\u2efb\0\u2f34\0\u2f6d\0\u2fa6\0\u2fdf\0\u3018"+
    "\0\u3051\0\u16ef\0\u308a\0\u30c3\0\u30fc\0\u187e\0\u3135\0\u316e"+
    "\0\u28bf\0\u31a7\0\u31e0\0\u3219\0\u3252\0\u328b\0\u32c4\0\u32fd"+
    "\0\u3336\0\u336f\0\u33a8\0\u33e1\0\u341a\0\u3453\0\u348c\0\u34c5"+
    "\0\u34fe\0\u3537\0\u3570\0\u35a9\0\u35e2\0\u361b\0\u3654\0\u368d"+
    "\0\u36c6\0\u36ff\0\u3738\0\u3771\0\u2ec2\0\u37aa\0\u2efb\0\u2efb"+
    "\0\u37e3\0\u2f6d\0\u381c\0\u2fa6\0\u2fa6\0\u3855\0\u388e\0\u1b63"+
    "\0\u38c7\0\u3900\0\u3939\0\u3972\0\u39ab\0\u39e4\0\u3a1d\0\u3a56"+
    "\0\u3a8f\0\u3ac8\0\71\0\u023a\0\u3b01\0\u3b3a\0\u3b73\0\u3bac"+
    "\0\u3be5\0\u3c1e\0\u3c57\0\u3c90\0\u3cc9\0\u3d02\0\u3d3b\0\u3d74"+
    "\0\u3dad\0\u3de6";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[306];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\3\1\7\1\10"+
    "\1\3\1\11\1\12\1\13\1\14\1\15\1\3\1\16"+
    "\1\17\1\20\1\3\1\21\1\22\1\23\1\13\1\22"+
    "\1\24\1\25\1\26\1\22\1\0\1\13\1\27\1\30"+
    "\1\31\1\32\1\33\1\27\1\34\1\35\1\36\3\3"+
    "\1\37\1\40\1\41\1\42\1\43\1\3\1\44\7\5"+
    "\1\3\72\0\3\3\1\0\4\3\3\13\10\3\2\0"+
    "\1\13\6\0\1\13\6\0\25\3\1\0\1\45\2\46"+
    "\1\47\2\45\1\50\1\45\3\13\10\45\2\0\1\13"+
    "\6\0\1\13\6\0\15\45\7\46\1\45\1\0\1\45"+
    "\2\5\1\47\2\45\1\50\1\45\3\13\10\45\2\0"+
    "\1\13\6\0\1\13\6\0\15\45\7\5\1\45\2\0"+
    "\2\47\3\0\1\51\51\0\7\47\2\0\3\3\1\0"+
    "\2\3\1\52\1\3\3\13\10\3\2\0\1\13\6\0"+
    "\1\13\6\0\3\3\1\53\21\3\1\0\3\3\1\0"+
    "\4\3\3\13\2\3\1\54\1\3\1\55\3\3\2\0"+
    "\1\13\6\0\1\13\6\0\4\3\1\56\20\3\1\57"+
    "\3\11\1\57\4\11\1\60\1\11\1\61\10\11\1\62"+
    "\1\57\1\11\6\57\1\11\6\57\25\11\1\63\3\12"+
    "\1\63\5\12\1\60\1\64\10\12\1\62\1\63\1\12"+
    "\6\63\1\12\6\63\25\12\1\0\3\13\1\0\17\13"+
    "\2\0\1\13\6\0\1\13\6\0\25\13\1\0\3\3"+
    "\1\0\4\3\3\13\3\3\1\65\4\3\2\0\1\13"+
    "\6\0\1\13\6\0\1\66\2\3\1\67\2\3\1\70"+
    "\16\3\1\0\3\3\1\0\4\3\3\13\3\3\1\71"+
    "\3\3\1\72\2\0\1\13\6\0\1\13\6\0\1\73"+
    "\2\3\1\74\4\3\1\75\14\3\1\0\3\3\1\0"+
    "\2\3\1\76\1\3\3\13\10\3\2\0\1\13\6\0"+
    "\1\13\6\0\25\3\1\0\3\3\1\0\1\3\1\77"+
    "\2\3\3\13\3\3\1\100\4\3\2\0\1\13\6\0"+
    "\1\13\6\0\25\3\1\0\3\3\1\0\4\3\3\13"+
    "\10\3\2\0\1\13\6\0\1\13\6\0\1\74\7\3"+
    "\1\101\14\3\1\0\3\3\1\0\4\3\3\13\1\3"+
    "\1\102\6\3\2\0\1\13\6\0\1\13\6\0\10\3"+
    "\1\103\14\3\2\0\1\104\1\105\1\106\36\0\1\24"+
    "\15\0\7\105\32\0\1\107\1\110\10\0\1\24\57\0"+
    "\1\24\10\0\1\24\70\0\1\24\64\0\1\24\3\0"+
    "\1\24\65\0\1\24\2\0\1\24\66\0\1\24\71\0"+
    "\1\24\27\0\3\3\1\0\4\3\3\13\10\3\2\0"+
    "\1\13\6\0\1\13\6\0\1\3\1\111\1\112\22\3"+
    "\1\0\3\3\1\0\2\3\1\113\1\3\3\13\10\3"+
    "\2\0\1\13\6\0\1\13\6\0\1\114\2\3\1\112"+
    "\21\3\1\0\3\3\1\0\2\3\1\115\1\3\3\13"+
    "\4\3\1\116\3\3\2\0\1\13\6\0\1\13\6\0"+
    "\3\3\1\117\20\3\1\120\1\0\3\3\1\0\2\3"+
    "\1\121\1\3\3\13\10\3\2\0\1\13\6\0\1\13"+
    "\6\0\25\3\1\0\3\3\1\0\4\3\3\13\10\3"+
    "\2\0\1\13\6\0\1\13\6\0\1\122\2\3\1\123"+
    "\21\3\1\0\3\3\1\0\4\3\3\13\1\3\1\112"+
    "\1\124\5\3\2\0\1\13\6\0\1\13\6\0\11\3"+
    "\1\125\13\3\1\0\3\3\1\0\4\3\3\13\10\3"+
    "\2\0\1\13\6\0\1\13\6\0\1\126\2\3\1\127"+
    "\4\3\1\130\14\3\1\0\3\3\1\0\4\3\3\13"+
    "\3\3\1\131\3\3\1\132\2\0\1\13\6\0\1\13"+
    "\6\0\1\133\24\3\1\0\3\3\1\0\1\3\1\134"+
    "\1\135\1\3\3\13\10\3\2\0\1\13\6\0\1\13"+
    "\6\0\25\3\1\0\1\45\2\13\1\0\4\45\3\13"+
    "\10\45\2\0\1\13\6\0\1\13\6\0\15\45\7\13"+
    "\1\45\1\0\1\45\2\46\1\136\4\45\3\13\10\45"+
    "\2\0\1\13\6\0\1\13\6\0\15\45\7\46\1\45"+
    "\2\0\2\47\3\0\1\137\51\0\7\47\2\0\1\45"+
    "\1\140\1\141\1\142\4\45\3\13\10\45\1\0\1\143"+
    "\1\13\6\0\1\13\6\0\15\45\7\141\1\45\2\0"+
    "\1\144\1\145\1\146\20\0\1\147\33\0\7\145\2\0"+
    "\3\3\1\0\3\3\1\150\3\13\10\3\2\0\1\13"+
    "\6\0\1\13\6\0\25\3\1\0\3\3\1\0\4\3"+
    "\3\13\7\3\1\151\2\0\1\13\6\0\1\13\6\0"+
    "\25\3\1\0\3\3\1\0\4\3\3\13\7\3\1\152"+
    "\2\0\1\13\6\0\1\13\6\0\25\3\1\0\3\3"+
    "\1\0\1\3\1\153\2\3\3\13\10\3\2\0\1\13"+
    "\6\0\1\13\6\0\25\3\1\0\3\3\1\0\4\3"+
    "\3\13\10\3\2\0\1\13\6\0\1\13\6\0\2\3"+
    "\1\154\22\3\11\57\1\155\1\57\1\156\10\57\1\62"+
    "\44\57\1\157\3\160\1\157\3\160\1\161\1\11\1\162"+
    "\1\163\6\162\1\160\1\164\2\157\1\160\6\157\1\160"+
    "\6\157\25\160\12\63\1\155\1\165\10\63\1\62\44\63"+
    "\1\166\3\167\1\166\3\167\1\170\1\171\1\12\1\172"+
    "\6\171\1\167\1\173\2\166\1\167\6\166\1\167\6\166"+
    "\25\167\1\0\3\3\1\0\2\3\1\174\1\3\3\13"+
    "\10\3\2\0\1\13\6\0\1\13\6\0\25\3\1\0"+
    "\3\3\1\0\4\3\3\13\10\3\2\0\1\13\6\0"+
    "\1\13\6\0\4\3\1\175\20\3\1\0\3\3\1\0"+
    "\4\3\3\13\10\3\2\0\1\13\6\0\1\13\6\0"+
    "\3\3\1\176\21\3\1\0\3\3\1\0\4\3\3\13"+
    "\4\3\1\177\3\3\2\0\1\13\6\0\1\13\6\0"+
    "\25\3\1\0\3\3\1\0\4\3\3\13\10\3\2\0"+
    "\1\13\6\0\1\13\6\0\3\3\1\152\21\3\1\0"+
    "\3\3\1\0\4\3\3\13\2\3\1\200\5\3\2\0"+
    "\1\13\6\0\1\13\6\0\25\3\1\0\3\3\1\0"+
    "\4\3\3\13\10\3\2\0\1\13\6\0\1\13\6\0"+
    "\4\3\1\56\20\3\1\0\3\3\1\0\4\3\3\13"+
    "\3\3\1\112\4\3\2\0\1\13\6\0\1\13\6\0"+
    "\25\3\1\0\3\3\1\0\4\3\3\13\2\3\1\201"+
    "\5\3\2\0\1\13\6\0\1\13\6\0\25\3\1\0"+
    "\3\3\1\0\4\3\3\13\4\3\1\202\3\3\2\0"+
    "\1\13\6\0\1\13\6\0\25\3\1\0\3\3\1\0"+
    "\4\3\3\13\10\3\2\0\1\13\6\0\1\13\6\0"+
    "\10\3\1\203\14\3\1\0\3\3\1\0\4\3\3\13"+
    "\7\3\1\154\2\0\1\13\6\0\1\13\6\0\1\204"+
    "\24\3\1\0\3\3\1\0\2\3\1\205\1\3\3\13"+
    "\10\3\2\0\1\13\6\0\1\13\6\0\25\3\1\0"+
    "\3\3\1\0\4\3\3\13\10\3\2\0\1\13\6\0"+
    "\1\13\6\0\10\3\1\206\14\3\1\0\3\3\1\0"+
    "\4\3\3\13\2\3\1\207\5\3\2\0\1\13\6\0"+
    "\1\13\6\0\25\3\2\0\2\210\1\47\2\0\1\137"+
    "\51\0\7\210\3\0\2\105\1\47\2\0\1\137\51\0"+
    "\7\105\1\0\24\107\1\0\6\107\3\0\33\107\32\0"+
    "\1\211\37\0\3\3\1\0\4\3\3\13\10\3\2\0"+
    "\1\13\6\0\1\13\6\0\1\3\1\212\23\3\1\0"+
    "\3\3\1\0\4\3\3\13\10\3\2\0\1\13\6\0"+
    "\1\13\6\0\4\3\1\213\20\3\1\0\3\3\1\0"+
    "\4\3\3\13\10\3\2\0\1\13\6\0\1\13\6\0"+
    "\6\3\1\214\16\3\1\0\3\3\1\0\4\3\3\13"+
    "\2\3\1\215\5\3\2\0\1\13\6\0\1\13\6\0"+
    "\7\3\1\216\15\3\1\0\3\3\1\0\4\3\3\13"+
    "\3\3\1\217\4\3\2\0\1\13\6\0\1\13\6\0"+
    "\25\3\1\0\3\3\1\0\4\3\3\13\10\3\2\0"+
    "\1\13\6\0\1\13\6\0\4\3\1\220\20\3\1\0"+
    "\3\3\1\0\4\3\3\13\10\3\2\0\1\13\6\0"+
    "\1\13\6\0\1\221\24\3\1\0\3\3\1\0\4\3"+
    "\3\13\10\3\2\0\1\13\6\0\1\13\6\0\1\151"+
    "\24\3\1\0\3\3\1\0\4\3\3\13\10\3\2\0"+
    "\1\13\6\0\1\13\6\0\4\3\1\222\20\3\1\0"+
    "\3\3\1\0\4\3\3\13\2\3\1\223\5\3\2\0"+
    "\1\13\6\0\1\13\6\0\25\3\1\0\3\3\1\0"+
    "\4\3\3\13\4\3\1\224\3\3\2\0\1\13\6\0"+
    "\1\13\6\0\25\3\1\0\3\3\1\0\4\3\3\13"+
    "\10\3\2\0\1\13\6\0\1\13\6\0\12\3\1\225"+
    "\12\3\1\0\3\3\1\0\4\3\3\13\10\3\2\0"+
    "\1\13\6\0\1\13\6\0\12\3\1\226\12\3\1\0"+
    "\3\3\1\0\4\3\3\13\10\3\2\0\1\13\6\0"+
    "\1\13\6\0\1\3\1\227\23\3\1\0\3\3\1\0"+
    "\4\3\3\13\2\3\1\230\5\3\2\0\1\13\6\0"+
    "\1\13\6\0\25\3\1\0\3\3\1\0\4\3\3\13"+
    "\10\3\2\0\1\13\6\0\1\13\6\0\1\231\7\3"+
    "\1\232\14\3\1\0\3\3\1\0\4\3\3\13\1\233"+
    "\7\3\2\0\1\13\6\0\1\13\6\0\25\3\1\0"+
    "\3\3\1\0\4\3\3\13\10\3\2\0\1\13\6\0"+
    "\1\13\6\0\6\3\1\234\16\3\1\0\3\3\1\0"+
    "\4\3\3\13\10\3\2\0\1\13\6\0\1\13\6\0"+
    "\10\3\1\235\14\3\1\0\3\3\1\0\2\3\1\236"+
    "\1\3\3\13\10\3\2\0\1\13\6\0\1\13\6\0"+
    "\10\3\1\237\14\3\2\0\2\136\3\0\1\51\51\0"+
    "\7\136\3\0\1\240\1\241\1\142\20\0\1\143\33\0"+
    "\7\241\2\0\1\13\2\242\1\243\17\13\2\0\1\13"+
    "\6\0\1\13\6\0\15\13\7\242\1\13\1\0\1\13"+
    "\2\141\1\243\17\13\2\0\1\13\6\0\1\13\6\0"+
    "\15\13\7\141\1\13\2\0\2\243\55\0\7\243\3\0"+
    "\1\240\1\241\1\142\54\0\7\241\3\0\3\244\54\0"+
    "\7\244\3\0\2\145\1\244\54\0\7\145\3\0\2\244"+
    "\55\0\7\244\3\0\1\144\1\145\1\146\54\0\7\145"+
    "\2\0\3\3\1\0\4\3\1\245\1\246\1\13\10\3"+
    "\2\0\1\13\6\0\1\13\6\0\25\3\1\0\3\3"+
    "\1\0\4\3\3\13\3\3\1\214\4\3\2\0\1\13"+
    "\6\0\1\13\6\0\25\3\1\0\3\3\1\0\4\3"+
    "\3\13\10\3\2\0\1\13\6\0\1\13\6\0\11\3"+
    "\1\112\13\3\1\0\3\3\1\0\2\3\1\247\1\3"+
    "\3\13\10\3\2\0\1\13\6\0\1\13\6\0\25\3"+
    "\1\0\3\3\1\0\2\3\1\112\1\3\3\13\10\3"+
    "\2\0\1\13\6\0\1\13\6\0\25\3\10\157\1\250"+
    "\1\251\1\252\1\253\6\252\1\157\1\254\56\157\1\62"+
    "\1\157\1\255\10\157\1\62\45\157\3\160\1\157\4\160"+
    "\1\13\1\160\1\256\10\160\1\62\1\157\1\160\6\157"+
    "\1\160\6\157\25\160\1\157\3\160\1\157\4\160\1\13"+
    "\1\160\1\256\6\160\1\257\1\160\1\62\1\157\1\160"+
    "\6\157\1\160\6\157\25\160\1\252\3\162\1\252\4\162"+
    "\1\60\1\162\1\260\10\162\1\62\1\252\1\162\6\252"+
    "\1\162\6\252\25\162\1\252\3\162\1\252\4\162\1\261"+
    "\1\162\1\260\10\162\1\62\1\252\1\162\6\252\1\162"+
    "\6\252\25\162\1\157\3\160\1\157\4\160\1\13\1\160"+
    "\1\256\6\160\1\262\1\160\1\62\1\157\1\160\6\157"+
    "\1\160\6\157\25\160\10\166\1\263\1\264\1\265\1\266"+
    "\6\264\1\166\1\267\57\166\1\62\1\270\10\166\1\62"+
    "\45\166\3\167\1\166\5\167\1\13\1\271\10\167\1\62"+
    "\1\166\1\167\6\166\1\167\6\166\25\167\1\166\3\167"+
    "\1\166\5\167\1\13\1\271\6\167\1\272\1\167\1\62"+
    "\1\166\1\167\6\166\1\167\6\166\25\167\1\264\3\171"+
    "\1\264\5\171\1\60\1\273\10\171\1\62\1\264\1\171"+
    "\6\264\1\171\6\264\25\171\1\264\3\171\1\264\5\171"+
    "\1\274\1\273\10\171\1\62\1\264\1\171\6\264\1\171"+
    "\6\264\25\171\1\166\3\167\1\166\5\167\1\13\1\271"+
    "\6\167\1\275\1\167\1\62\1\166\1\167\6\166\1\167"+
    "\6\166\25\167\1\0\3\3\1\0\4\3\3\13\10\3"+
    "\2\0\1\13\6\0\1\13\6\0\1\276\24\3\1\0"+
    "\3\3\1\0\4\3\3\13\10\3\2\0\1\13\6\0"+
    "\1\13\6\0\1\277\24\3\1\0\3\3\1\0\4\3"+
    "\3\13\10\3\2\0\1\13\6\0\1\13\6\0\4\3"+
    "\1\112\20\3\1\0\3\3\1\0\2\3\1\300\1\3"+
    "\3\13\10\3\2\0\1\13\6\0\1\13\6\0\25\3"+
    "\1\0\3\3\1\0\4\3\3\13\10\3\2\0\1\13"+
    "\6\0\1\13\6\0\7\3\1\301\15\3\1\0\3\3"+
    "\1\0\4\3\3\13\2\3\1\302\5\3\2\0\1\13"+
    "\6\0\1\13\6\0\25\3\1\0\3\3\1\0\4\3"+
    "\3\13\7\3\1\303\2\0\1\13\6\0\1\13\6\0"+
    "\25\3\1\0\3\3\1\0\4\3\3\13\10\3\2\0"+
    "\1\13\6\0\1\13\6\0\2\3\1\112\22\3\1\0"+
    "\3\3\1\0\4\3\3\13\2\3\1\304\5\3\2\0"+
    "\1\13\6\0\1\13\6\0\25\3\1\0\3\3\1\0"+
    "\4\3\3\13\10\3\2\0\1\13\6\0\1\13\6\0"+
    "\14\3\1\112\10\3\1\0\3\3\1\0\3\3\1\305"+
    "\3\13\10\3\2\0\1\13\6\0\1\13\6\0\25\3"+
    "\1\0\3\3\1\0\4\3\3\13\4\3\1\306\3\3"+
    "\2\0\1\13\6\0\1\13\6\0\25\3\2\0\2\210"+
    "\1\307\54\0\7\210\1\0\24\211\1\310\5\211\1\311"+
    "\36\211\1\0\3\3\1\0\4\3\3\13\3\3\1\312"+
    "\4\3\2\0\1\13\6\0\1\13\6\0\25\3\1\0"+
    "\3\3\1\0\2\3\1\313\1\3\3\13\10\3\2\0"+
    "\1\13\6\0\1\13\6\0\25\3\1\0\3\3\1\0"+
    "\4\3\3\13\10\3\2\0\1\13\6\0\1\13\6\0"+
    "\2\3\1\237\22\3\1\0\3\3\1\0\4\3\3\13"+
    "\10\3\2\0\1\13\6\0\1\13\6\0\1\3\1\314"+
    "\23\3\1\0\3\3\1\0\4\3\3\13\10\3\2\0"+
    "\1\13\6\0\1\13\6\0\3\3\1\315\21\3\1\0"+
    "\3\3\1\0\4\3\3\13\7\3\1\316\2\0\1\13"+
    "\6\0\1\13\6\0\10\3\1\317\14\3\1\0\3\3"+
    "\1\0\4\3\3\13\10\3\2\0\1\13\6\0\1\13"+
    "\6\0\10\3\1\320\14\3\1\0\3\3\1\0\4\3"+
    "\3\13\1\321\7\3\2\0\1\13\6\0\1\13\6\0"+
    "\25\3\1\0\3\3\1\0\4\3\3\13\10\3\2\0"+
    "\1\13\6\0\1\13\6\0\4\3\1\322\20\3\1\0"+
    "\3\3\1\0\4\3\3\13\4\3\1\323\3\3\2\0"+
    "\1\13\6\0\1\13\6\0\2\3\1\324\22\3\1\0"+
    "\3\3\1\0\2\3\1\325\1\3\3\13\10\3\2\0"+
    "\1\13\6\0\1\13\6\0\15\3\1\112\1\326\1\327"+
    "\1\330\1\331\3\3\1\0\3\3\1\0\4\3\3\13"+
    "\10\3\2\0\1\13\6\0\1\13\6\0\3\3\1\332"+
    "\21\3\1\0\3\3\1\0\4\3\3\13\10\3\2\0"+
    "\1\13\6\0\1\13\6\0\12\3\1\333\12\3\1\0"+
    "\3\3\1\0\4\3\3\13\10\3\2\0\1\13\6\0"+
    "\1\13\6\0\10\3\1\334\14\3\1\0\3\3\1\0"+
    "\4\3\3\13\7\3\1\335\2\0\1\13\6\0\1\13"+
    "\6\0\25\3\1\0\3\3\1\0\4\3\3\13\10\3"+
    "\2\0\1\13\6\0\1\13\6\0\13\3\1\336\11\3"+
    "\1\0\3\3\1\0\4\3\3\13\5\3\1\337\2\3"+
    "\2\0\1\13\6\0\1\13\6\0\25\3\1\0\3\3"+
    "\1\0\4\3\3\13\10\3\2\0\1\13\6\0\1\13"+
    "\6\0\4\3\1\340\20\3\1\0\3\3\1\0\4\3"+
    "\3\13\10\3\2\0\1\13\6\0\1\13\6\0\1\341"+
    "\24\3\1\0\3\3\1\0\4\3\3\13\10\3\2\0"+
    "\1\13\6\0\1\13\6\0\4\3\1\154\20\3\1\0"+
    "\3\3\1\0\4\3\3\13\10\3\2\0\1\13\6\0"+
    "\1\13\6\0\5\3\1\214\17\3\2\0\2\244\1\243"+
    "\54\0\7\244\3\0\2\241\1\243\54\0\7\241\2\0"+
    "\1\13\2\242\1\0\17\13\2\0\1\13\6\0\1\13"+
    "\6\0\15\13\7\242\1\13\1\342\1\343\2\344\1\342"+
    "\1\344\1\343\1\344\4\343\2\344\6\343\2\342\1\343"+
    "\6\342\1\343\6\342\2\344\5\343\1\344\5\343\7\344"+
    "\1\343\1\345\1\346\2\347\1\345\1\347\1\346\1\347"+
    "\4\346\2\347\6\346\2\345\1\346\6\345\1\346\6\345"+
    "\2\347\5\346\1\347\5\346\7\347\1\346\1\0\3\3"+
    "\1\0\4\3\3\13\3\3\1\237\4\3\2\0\1\13"+
    "\6\0\1\13\6\0\25\3\11\157\1\62\1\157\1\255"+
    "\6\157\1\350\1\157\1\62\44\157\11\252\1\155\1\252"+
    "\1\351\10\252\1\62\55\252\1\352\1\252\1\351\10\252"+
    "\1\62\44\252\11\157\1\62\1\157\1\255\6\157\1\353"+
    "\1\157\1\62\57\157\1\255\10\157\1\62\45\157\3\160"+
    "\1\157\6\160\1\256\10\160\1\62\1\157\1\160\6\157"+
    "\1\160\6\157\25\160\1\157\3\160\1\157\4\160\1\13"+
    "\1\160\1\256\6\160\1\162\1\160\1\62\1\157\1\160"+
    "\6\157\1\160\6\157\25\160\1\157\3\160\1\157\3\160"+
    "\1\161\2\162\1\163\6\162\1\160\1\164\2\157\1\160"+
    "\6\157\1\160\6\157\25\160\1\157\3\160\1\157\4\160"+
    "\1\13\1\160\1\256\6\160\1\161\1\160\1\62\1\157"+
    "\1\160\6\157\1\160\6\157\25\160\12\166\1\62\1\270"+
    "\6\166\1\354\1\166\1\62\44\166\12\264\1\155\1\355"+
    "\10\264\1\62\56\264\1\356\1\355\10\264\1\62\44\264"+
    "\12\166\1\62\1\270\6\166\1\357\1\166\1\62\57\166"+
    "\1\270\10\166\1\62\45\166\3\167\1\166\6\167\1\271"+
    "\10\167\1\62\1\166\1\167\6\166\1\167\6\166\25\167"+
    "\1\166\3\167\1\166\5\167\1\13\1\271\6\167\1\171"+
    "\1\167\1\62\1\166\1\167\6\166\1\167\6\166\25\167"+
    "\1\166\3\167\1\166\3\167\1\170\2\171\1\172\6\171"+
    "\1\167\1\173\2\166\1\167\6\166\1\167\6\166\25\167"+
    "\1\166\3\167\1\166\5\167\1\13\1\271\6\167\1\170"+
    "\1\167\1\62\1\166\1\167\6\166\1\167\6\166\25\167"+
    "\1\0\3\3\1\0\4\3\3\13\10\3\2\0\1\13"+
    "\6\0\1\13\6\0\5\3\1\112\17\3\1\0\3\3"+
    "\1\0\4\3\3\13\2\3\1\360\5\3\2\0\1\13"+
    "\6\0\1\13\6\0\25\3\1\0\3\3\1\0\4\3"+
    "\3\13\10\3\2\0\1\13\6\0\1\13\6\0\2\3"+
    "\1\361\22\3\1\0\3\3\1\0\4\3\3\13\4\3"+
    "\1\362\3\3\2\0\1\13\6\0\1\13\6\0\25\3"+
    "\1\0\3\3\1\0\2\3\1\363\1\3\3\13\10\3"+
    "\2\0\1\13\6\0\1\13\6\0\25\3\1\0\3\3"+
    "\1\0\4\3\3\13\3\3\1\364\4\3\2\0\1\13"+
    "\6\0\1\13\6\0\25\3\1\0\3\3\1\0\4\3"+
    "\3\13\10\3\2\0\1\13\6\0\1\13\6\0\2\3"+
    "\1\365\22\3\1\0\3\3\1\0\2\3\1\366\1\3"+
    "\3\13\10\3\2\0\1\13\6\0\1\13\6\0\25\3"+
    "\1\0\3\3\1\0\4\3\3\13\10\3\2\0\1\13"+
    "\6\0\1\13\6\0\15\3\1\112\1\326\1\327\1\330"+
    "\1\331\3\3\2\0\2\307\3\0\1\51\51\0\7\307"+
    "\1\0\24\367\1\370\2\367\1\371\1\367\1\0\1\311"+
    "\36\367\24\211\1\310\4\211\1\22\1\311\36\211\1\0"+
    "\3\3\1\0\2\3\1\372\1\3\3\13\10\3\2\0"+
    "\1\13\6\0\1\13\6\0\25\3\1\0\3\3\1\0"+
    "\4\3\3\13\4\3\1\154\3\3\2\0\1\13\6\0"+
    "\1\13\6\0\13\3\1\373\11\3\1\0\3\3\1\0"+
    "\4\3\3\13\2\3\1\374\5\3\2\0\1\13\6\0"+
    "\1\13\6\0\25\3\1\0\3\3\1\0\4\3\3\13"+
    "\10\3\2\0\1\13\6\0\1\13\6\0\7\3\1\375"+
    "\15\3\1\0\3\3\1\0\4\3\3\13\2\3\1\376"+
    "\5\3\2\0\1\13\6\0\1\13\6\0\25\3\1\0"+
    "\3\3\1\0\4\3\3\13\10\3\2\0\1\13\6\0"+
    "\1\13\6\0\1\3\1\377\23\3\1\0\3\3\1\0"+
    "\4\3\3\13\10\3\2\0\1\13\6\0\1\13\6\0"+
    "\3\3\1\237\21\3\1\0\3\3\1\0\4\3\3\13"+
    "\10\3\2\0\1\13\6\0\1\13\6\0\7\3\1\u0100"+
    "\15\3\1\0\3\3\1\0\4\3\3\13\3\3\1\u0101"+
    "\4\3\2\0\1\13\6\0\1\13\6\0\10\3\1\u0102"+
    "\14\3\1\0\3\3\1\0\4\3\3\13\4\3\1\u0103"+
    "\3\3\2\0\1\13\6\0\1\13\6\0\25\3\1\0"+
    "\3\3\1\0\4\3\3\13\3\3\1\u0104\4\3\2\0"+
    "\1\13\6\0\1\13\6\0\25\3\1\0\3\3\1\0"+
    "\4\3\3\13\10\3\2\0\1\13\6\0\1\13\6\0"+
    "\17\3\1\112\1\3\1\u0105\3\3\1\0\3\3\1\0"+
    "\4\3\3\13\10\3\2\0\1\13\6\0\1\13\6\0"+
    "\22\3\1\112\2\3\1\0\3\3\1\0\4\3\3\13"+
    "\10\3\2\0\1\13\6\0\1\13\6\0\21\3\1\112"+
    "\3\3\1\0\3\3\1\0\4\3\3\13\10\3\2\0"+
    "\1\13\6\0\1\13\6\0\23\3\1\u0106\1\3\1\0"+
    "\3\3\1\0\4\3\3\13\3\3\1\375\4\3\2\0"+
    "\1\13\6\0\1\13\6\0\25\3\1\0\3\3\1\0"+
    "\4\3\3\13\10\3\2\0\1\13\6\0\1\13\6\0"+
    "\10\3\1\317\14\3\1\0\3\3\1\0\4\3\3\13"+
    "\1\3\1\u0107\6\3\2\0\1\13\6\0\1\13\6\0"+
    "\25\3\1\0\3\3\1\0\4\3\3\13\4\3\1\u0108"+
    "\3\3\2\0\1\13\6\0\1\13\6\0\25\3\1\0"+
    "\3\3\1\0\4\3\3\13\10\3\2\0\1\13\6\0"+
    "\1\13\6\0\11\3\1\u0109\13\3\1\0\3\3\1\0"+
    "\4\3\3\13\10\3\2\0\1\13\6\0\1\13\6\0"+
    "\1\u010a\24\3\1\0\3\3\1\0\4\3\3\13\10\3"+
    "\2\0\1\13\6\0\1\13\6\0\10\3\1\u010b\14\3"+
    "\1\0\3\3\1\0\4\3\3\13\1\235\7\3\2\0"+
    "\1\13\6\0\1\13\6\0\25\3\2\342\2\u010c\1\342"+
    "\1\u010c\1\342\1\u010c\1\342\1\u010d\2\342\2\u010c\26\342"+
    "\2\u010c\5\342\1\u010c\5\342\7\u010c\2\342\1\343\2\u010e"+
    "\1\342\1\u010e\1\343\1\u010e\1\343\1\u010f\2\343\2\u010e"+
    "\6\343\2\342\1\343\6\342\1\343\6\342\2\u010e\5\343"+
    "\1\u010e\5\343\7\u010e\1\343\1\342\1\343\2\344\1\342"+
    "\1\344\1\343\1\344\1\343\1\u0110\2\343\2\344\6\343"+
    "\2\342\1\343\6\342\1\343\6\342\2\344\5\343\1\344"+
    "\5\343\7\344\1\343\2\345\2\u0111\1\345\1\u0111\1\345"+
    "\1\u0111\2\345\1\u0112\1\345\2\u0111\26\345\2\u0111\5\345"+
    "\1\u0111\5\345\7\u0111\2\345\1\346\2\u0113\1\345\1\u0113"+
    "\1\346\1\u0113\2\346\1\u0114\1\346\2\u0113\6\346\2\345"+
    "\1\346\6\345\1\346\6\345\2\u0113\5\346\1\u0113\5\346"+
    "\7\u0113\1\346\1\345\1\346\2\347\1\345\1\347\1\346"+
    "\1\347\2\346\1\u0115\1\346\2\347\6\346\2\345\1\346"+
    "\6\345\1\346\6\345\2\347\5\346\1\347\5\346\7\347"+
    "\1\346\11\157\1\62\1\157\1\255\6\157\1\252\1\157"+
    "\1\62\54\157\1\250\2\252\1\253\6\252\1\157\1\254"+
    "\56\157\1\62\1\157\1\255\6\157\1\250\1\157\1\62"+
    "\44\157\12\166\1\62\1\270\6\166\1\264\1\166\1\62"+
    "\54\166\1\263\2\264\1\266\6\264\1\166\1\267\57\166"+
    "\1\62\1\270\6\166\1\263\1\166\1\62\44\166\1\0"+
    "\3\3\1\0\4\3\3\13\10\3\2\0\1\13\6\0"+
    "\1\13\6\0\7\3\1\u0116\15\3\1\0\3\3\1\0"+
    "\4\3\3\13\10\3\2\0\1\13\6\0\1\13\6\0"+
    "\10\3\1\u0117\14\3\1\0\3\3\1\0\4\3\3\13"+
    "\10\3\2\0\1\13\6\0\1\13\6\0\6\3\1\237"+
    "\16\3\1\0\3\3\1\0\4\3\3\13\2\3\1\u0118"+
    "\5\3\2\0\1\13\6\0\1\13\6\0\25\3\1\0"+
    "\3\3\1\0\4\3\3\13\1\3\1\u0119\6\3\2\0"+
    "\1\13\6\0\1\13\6\0\25\3\1\0\3\3\1\0"+
    "\4\3\3\13\10\3\2\0\1\13\6\0\1\13\6\0"+
    "\1\3\1\112\23\3\24\367\1\370\5\367\1\370\3\u011a"+
    "\57\367\1\370\4\367\1\u011b\1\370\3\u011a\57\367\1\370"+
    "\2\367\1\371\1\367\1\u011a\1\311\36\367\1\0\3\3"+
    "\1\0\4\3\3\13\10\3\2\0\1\13\6\0\1\13"+
    "\6\0\2\3\1\203\22\3\1\0\3\3\1\0\4\3"+
    "\3\13\10\3\2\0\1\13\6\0\1\13\6\0\1\u011c"+
    "\24\3\1\0\3\3\1\0\4\3\3\13\10\3\2\0"+
    "\1\13\6\0\1\13\6\0\1\3\1\214\23\3\1\0"+
    "\3\3\1\0\4\3\3\13\4\3\1\112\3\3\2\0"+
    "\1\13\6\0\1\13\6\0\25\3\1\0\3\3\1\0"+
    "\4\3\3\13\10\3\2\0\1\13\6\0\1\13\6\0"+
    "\13\3\1\112\11\3\1\0\3\3\1\0\4\3\3\13"+
    "\10\3\2\0\1\13\6\0\1\13\6\0\10\3\1\u011d"+
    "\14\3\1\0\3\3\1\0\4\3\3\13\10\3\2\0"+
    "\1\13\6\0\1\13\6\0\3\3\1\u011e\21\3\1\0"+
    "\3\3\1\0\4\3\3\13\10\3\2\0\1\13\6\0"+
    "\1\13\6\0\1\316\24\3\1\0\3\3\1\0\4\3"+
    "\3\13\2\3\1\u011f\5\3\2\0\1\13\6\0\1\13"+
    "\6\0\25\3\1\0\3\3\1\0\4\3\3\13\3\3"+
    "\1\u0120\4\3\2\0\1\13\6\0\1\13\6\0\25\3"+
    "\1\0\3\3\1\0\4\3\3\13\2\3\1\u0121\5\3"+
    "\2\0\1\13\6\0\1\13\6\0\25\3\1\0\3\3"+
    "\1\0\4\3\3\13\10\3\2\0\1\13\6\0\1\13"+
    "\6\0\15\3\1\112\7\3\1\0\3\3\1\0\4\3"+
    "\3\13\10\3\2\0\1\13\6\0\1\13\6\0\17\3"+
    "\1\112\5\3\1\0\3\3\1\0\4\3\3\13\10\3"+
    "\2\0\1\13\6\0\1\13\6\0\10\3\1\u0122\14\3"+
    "\1\0\3\3\1\0\2\3\1\214\1\3\3\13\10\3"+
    "\2\0\1\13\6\0\1\13\6\0\25\3\1\0\3\3"+
    "\1\0\4\3\3\13\10\3\2\0\1\13\6\0\1\13"+
    "\6\0\1\112\24\3\1\0\3\3\1\0\4\3\3\13"+
    "\4\3\1\154\3\3\2\0\1\13\6\0\1\13\6\0"+
    "\25\3\1\0\3\3\1\0\4\3\3\13\10\3\2\0"+
    "\1\13\6\0\1\13\6\0\7\3\1\112\15\3\2\0"+
    "\2\u010c\1\0\1\u010c\1\0\1\u010c\1\0\1\u0123\2\0"+
    "\2\u010c\26\0\2\u010c\5\0\1\u010c\5\0\7\u010c\2\0"+
    "\1\13\2\u010e\1\0\1\u010e\1\13\1\u010e\1\13\1\u0124"+
    "\2\13\2\u010e\6\13\2\0\1\13\6\0\1\13\6\0"+
    "\2\u010e\5\13\1\u010e\5\13\7\u010e\1\13\2\0\2\u0111"+
    "\1\0\1\u0111\1\0\1\u0111\2\0\1\u0123\1\0\2\u0111"+
    "\26\0\2\u0111\5\0\1\u0111\5\0\7\u0111\2\0\1\13"+
    "\2\u0113\1\0\1\u0113\1\13\1\u0113\2\13\1\u0124\1\13"+
    "\2\u0113\6\13\2\0\1\13\6\0\1\13\6\0\2\u0113"+
    "\5\13\1\u0113\5\13\7\u0113\1\13\1\0\3\3\1\0"+
    "\2\3\1\314\1\3\3\13\10\3\2\0\1\13\6\0"+
    "\1\13\6\0\25\3\1\0\3\3\1\0\4\3\3\13"+
    "\10\3\2\0\1\13\6\0\1\13\6\0\3\3\1\u0125"+
    "\21\3\1\0\3\3\1\0\2\3\1\u0126\1\3\3\13"+
    "\10\3\2\0\1\13\6\0\1\13\6\0\25\3\24\u011a"+
    "\1\u0127\5\u011a\1\u0128\36\u011a\33\u011b\3\0\33\u011b\1\0"+
    "\3\3\1\0\4\3\3\13\4\3\1\u0129\3\3\2\0"+
    "\1\13\6\0\1\13\6\0\25\3\1\0\3\3\1\0"+
    "\4\3\3\13\4\3\1\u012a\3\3\2\0\1\13\6\0"+
    "\1\13\6\0\25\3\1\0\3\3\1\0\4\3\3\13"+
    "\10\3\2\0\1\13\6\0\1\13\6\0\1\3\1\u0116"+
    "\23\3\1\0\3\3\1\0\4\3\3\13\7\3\1\154"+
    "\2\0\1\13\6\0\1\13\6\0\25\3\1\0\3\3"+
    "\1\0\4\3\3\13\7\3\1\u012b\2\0\1\13\6\0"+
    "\1\13\6\0\25\3\1\0\3\3\1\0\4\3\3\13"+
    "\10\3\2\0\1\13\6\0\1\13\6\0\1\176\24\3"+
    "\1\0\3\3\1\0\2\3\1\74\1\3\3\13\10\3"+
    "\2\0\1\13\6\0\1\13\6\0\25\3\1\0\3\3"+
    "\1\0\4\3\3\13\2\3\1\112\5\3\2\0\1\13"+
    "\6\0\1\13\6\0\25\3\1\0\3\3\1\0\4\3"+
    "\3\13\3\3\1\314\4\3\2\0\1\13\6\0\1\13"+
    "\6\0\25\3\24\u011a\1\u0127\2\u011a\1\u012c\1\u011a\1\0"+
    "\1\u0128\62\u011a\1\u0127\4\u011a\1\0\1\u0128\36\u011a\1\0"+
    "\3\3\1\0\2\3\1\u012d\1\3\3\13\10\3\2\0"+
    "\1\13\6\0\1\13\6\0\25\3\1\0\3\3\1\0"+
    "\4\3\3\13\10\3\2\0\1\13\6\0\1\13\6\0"+
    "\6\3\1\112\16\3\1\0\3\3\1\0\4\3\3\13"+
    "\10\3\2\0\1\13\6\0\1\13\6\0\7\3\1\u012e"+
    "\15\3\24\u011a\1\u0127\2\u011a\1\u012c\2\u011a\1\u0128\36\u011a"+
    "\1\0\3\3\1\0\4\3\3\13\10\3\2\0\1\13"+
    "\6\0\1\13\6\0\7\3\1\u012f\15\3\1\0\3\3"+
    "\1\0\4\3\3\13\4\3\1\u0130\3\3\2\0\1\13"+
    "\6\0\1\13\6\0\25\3\1\0\3\3\1\0\4\3"+
    "\3\13\10\3\2\0\1\13\6\0\1\13\6\0\1\u0131"+
    "\24\3\1\0\3\3\1\0\4\3\3\13\10\3\2\0"+
    "\1\13\6\0\1\13\6\0\3\3\1\74\21\3\1\0"+
    "\3\3\1\0\4\3\3\13\10\3\2\0\1\13\6\0"+
    "\1\13\6\0\4\3\1\u0132\20\3\1\0\3\3\1\0"+
    "\4\3\3\13\10\3\2\0\1\13\6\0\1\13\6\0"+
    "\4\3\1\314\20\3";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15903];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\17\1\1\11\1\1\1\11\32\1\1\0"+
    "\2\1\1\11\1\0\22\1\1\0\1\1\1\0\31\1"+
    "\1\0\3\1\1\0\6\1\1\11\32\1\1\0\76\1"+
    "\1\0\32\1\1\0\2\1\1\0\46\1\1\0\4\1"+
    "\1\0\10\1\1\0\10\1\1\11\17\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[306];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 202) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { lexeme=yytext()+" "+(yyline+1);return ERROR_CEROS_A_LA_IZQUIERDA;
            }
          case 15: break;
          case 2: 
            { lexeme=yytext()+" "+(yyline+1);return ERROR_CARACTERES_NO_VALIDOS;
            }
          case 16: break;
          case 3: 
            { lexeme=yytext()+" "+(yyline+1); return IDENTIFICADOR;
            }
          case 17: break;
          case 4: 
            { lexeme=yytext()+" "+(yyline+1); return LITERAL;
            }
          case 18: break;
          case 5: 
            { lexeme=yytext()+" "+(yyline+1); return OPERADOR;
            }
          case 19: break;
          case 6: 
            { /* ignore */
            }
          case 20: break;
          case 7: 
            { lexeme=yytext()+" "+(yyline+1);return ERROR_IDENTIFICADOR;
            }
          case 21: break;
          case 8: 
            { lexeme=yytext()+" "+(yyline+1);return ERROR_NOTACION_CIENTIFICA;
            }
          case 22: break;
          case 9: 
            { lexeme=yytext()+" "+(yyline+1);return ERROR_STRING;
            }
          case 23: break;
          case 10: 
            { lexeme=yytext()+" "+(yyline+1); return PALABRA_RESERVADA;
            }
          case 24: break;
          case 11: 
            { lexeme=yytext()+" "+(yyline+1);return ERROR_COMENTARIO;
            }
          case 25: break;
          case 12: 
            { lexeme=yytext()+" "+(yyline+1); return UNIDAD;
            }
          case 26: break;
          case 13: 
            { lexeme=yytext()+" "+(yyline+1); return TRANSAC;
            }
          case 27: break;
          case 14: 
            { lexeme=yytext()+" "+(yyline+1);return ERROR_HEXADECIMAL;
            }
          case 28: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
