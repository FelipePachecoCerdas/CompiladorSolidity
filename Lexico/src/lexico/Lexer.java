/* The following code was generated by JFlex 1.6.1 */

package lexico;
import static lexico.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/lexico/lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\26\1\23\1\33\1\33\1\32\22\0\1\26\1\35\1\11"+
    "\2\25\1\27\1\40\1\12\1\27\1\27\1\31\1\35\1\27\1\24"+
    "\1\4\1\30\1\2\1\61\1\64\1\63\1\65\1\66\1\62\1\3"+
    "\1\60\1\3\1\27\1\27\1\36\1\42\1\37\1\27\1\25\6\5"+
    "\24\1\1\27\1\13\1\27\1\27\2\25\1\43\1\14\1\52\1\44"+
    "\1\7\1\15\1\56\1\6\1\53\1\1\1\50\1\47\1\54\1\16"+
    "\1\46\1\55\1\1\1\17\1\45\1\20\1\22\1\21\1\57\1\10"+
    "\1\51\1\67\1\27\1\41\1\27\1\27\6\25\1\34\u1e6e\25\u0134\0"+
    "\1\33\1\33\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\2\4\1\5\2\3\3\2\6\3"+
    "\1\6\10\5\11\3\1\7\1\1\1\4\1\10\1\1"+
    "\5\3\1\0\1\4\2\11\1\0\1\4\1\2\17\3"+
    "\1\6\1\0\1\3\1\12\23\3\1\1\1\10\2\4"+
    "\1\0\1\10\2\1\1\0\1\1\1\12\4\3\4\11"+
    "\1\0\3\11\2\2\1\11\3\2\14\3\1\13\12\3"+
    "\1\12\12\3\1\14\2\4\1\1\1\10\1\1\1\0"+
    "\1\2\1\3\1\0\2\11\1\0\1\4\1\0\3\11"+
    "\1\0\1\11\1\0\2\2\1\11\1\2\1\4\3\2"+
    "\2\3\1\12\5\3\1\12\2\13\2\3\1\15\5\3"+
    "\1\15\17\3\3\0\2\2\2\0\1\11\2\0\1\11"+
    "\1\0\1\4\1\0\1\11\2\0\2\2\1\11\3\2"+
    "\7\3\3\13\22\3\1\0\1\16\1\4\1\0\1\16"+
    "\1\2\1\16\1\4\6\0\2\2\2\3\1\12\1\3"+
    "\1\0\1\13\7\3\2\16\2\3\2\13\3\3\1\13"+
    "\6\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[313];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310\0\u0348"+
    "\0\u0380\0\70\0\u03b8\0\70\0\u03f0\0\u0428\0\u0460\0\u0498"+
    "\0\u04d0\0\u0508\0\u0540\0\u0578\0\u05b0\0\u05e8\0\u0620\0\u0658"+
    "\0\u0690\0\u06c8\0\u0700\0\u0738\0\u0770\0\u07a8\0\u07e0\0\u0818"+
    "\0\u0850\0\u0888\0\u08c0\0\u08f8\0\u0930\0\u01c0\0\70\0\u0968"+
    "\0\70\0\u09a0\0\u0230\0\u09d8\0\u0a10\0\u0a48\0\u0a80\0\u0ab8"+
    "\0\u0af0\0\u0b28\0\u0b60\0\u0b98\0\u0bd0\0\u0c08\0\u0c40\0\u0c78"+
    "\0\u0cb0\0\u0ce8\0\u0d20\0\u0d58\0\u0d90\0\u0dc8\0\160\0\u0e00"+
    "\0\u0e38\0\u0e70\0\u0ea8\0\u0ee0\0\u0f18\0\u0f50\0\u0f88\0\u0fc0"+
    "\0\u0ff8\0\u1030\0\u1068\0\u10a0\0\u10d8\0\u1110\0\u1148\0\u1180"+
    "\0\u11b8\0\u11f0\0\u1228\0\u1260\0\u1298\0\u12d0\0\u1308\0\u1340"+
    "\0\u1378\0\u13b0\0\u13e8\0\u1420\0\u1458\0\u1490\0\u14c8\0\u1500"+
    "\0\u1538\0\u1570\0\u15a8\0\u01c0\0\u15e0\0\u1618\0\u1650\0\u1688"+
    "\0\u16c0\0\u16f8\0\u1730\0\u1768\0\u17a0\0\u17d8\0\u1810\0\u1848"+
    "\0\u1880\0\u18b8\0\u18f0\0\u1928\0\u1960\0\u1998\0\u19d0\0\u1a08"+
    "\0\u1a40\0\u1a78\0\u1ab0\0\u1ae8\0\u1b20\0\u1b58\0\u1b90\0\u1bc8"+
    "\0\u1c00\0\u1c38\0\u1c70\0\u1ca8\0\u1ce0\0\u1d18\0\u1d50\0\u1d88"+
    "\0\u1dc0\0\u1df8\0\u1e30\0\u1e68\0\u1ea0\0\u1ed8\0\u1f10\0\u1f48"+
    "\0\u1f80\0\160\0\u1fb8\0\u1ff0\0\u2028\0\u1308\0\u13e8\0\u2060"+
    "\0\u2098\0\u20d0\0\u2108\0\u2140\0\u2178\0\u21b0\0\u1570\0\u21e8"+
    "\0\u2220\0\u2258\0\u09a0\0\u2290\0\u22c8\0\u2300\0\u2338\0\u2370"+
    "\0\u23a8\0\u23e0\0\u16f8\0\u2418\0\u2450\0\u2488\0\u24c0\0\u24f8"+
    "\0\u2530\0\u2568\0\u25a0\0\u25d8\0\u2610\0\u2648\0\u2680\0\u26b8"+
    "\0\u26f0\0\u2728\0\u2760\0\160\0\u2798\0\u27d0\0\u2808\0\u2840"+
    "\0\u2878\0\u28b0\0\u28e8\0\u2920\0\u2958\0\u2990\0\u29c8\0\u2a00"+
    "\0\u2a38\0\u2a70\0\u2aa8\0\u2ae0\0\u2b18\0\u2b50\0\u2b88\0\u2bc0"+
    "\0\u2bf8\0\u2c30\0\u2c68\0\u2ca0\0\u2cd8\0\u2d10\0\u2d48\0\u2d80"+
    "\0\u2db8\0\u2df0\0\u2e28\0\u2e60\0\u2e98\0\u16c0\0\u2ed0\0\u2f08"+
    "\0\u2f40\0\u2f78\0\u2fb0\0\u2fe8\0\u3020\0\u3058\0\u3090\0\u30c8"+
    "\0\u3100\0\u2680\0\u3138\0\u3170\0\u31a8\0\u31e0\0\u3218\0\u3250"+
    "\0\u3288\0\u32c0\0\u32f8\0\u3330\0\u3368\0\u33a0\0\u33d8\0\u3410"+
    "\0\u3448\0\u3480\0\u34b8\0\u34f0\0\u3528\0\u3560\0\u3598\0\u35d0"+
    "\0\u3608\0\u3640\0\u3678\0\u36b0\0\u36e8\0\u2c30\0\u2c30\0\u3720"+
    "\0\u2ca0\0\u3758\0\u2cd8\0\u2cd8\0\u3790\0\u37c8\0\u3800\0\u3838"+
    "\0\u3870\0\u38a8\0\u38e0\0\u3918\0\u3950\0\u3988\0\u19d0\0\u39c0"+
    "\0\u39f8\0\u3a30\0\u3a68\0\u3aa0\0\u3ad8\0\u3b10\0\u3b48\0\u3b80"+
    "\0\u3bb8\0\70\0\u0230\0\u3bf0\0\u3c28\0\u3c60\0\u3c98\0\u3cd0"+
    "\0\u3d08\0\u3d40\0\u3d78\0\u3db0\0\u3de8\0\u3e20\0\u3e58\0\u3e90"+
    "\0\u3ec8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[313];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\3\1\7\1\10"+
    "\1\3\1\11\1\12\1\13\1\14\1\15\1\3\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\13\1\22\1\24"+
    "\1\25\1\26\1\22\1\0\1\13\1\23\1\27\1\30"+
    "\1\31\1\32\1\23\1\33\1\34\1\35\3\3\1\36"+
    "\1\37\1\40\1\41\1\42\1\3\1\43\7\5\1\3"+
    "\71\0\3\3\1\0\4\3\1\0\2\13\7\3\2\0"+
    "\1\13\6\0\1\13\6\0\25\3\1\0\1\44\2\45"+
    "\1\46\2\44\1\47\1\44\1\0\2\13\7\44\2\0"+
    "\1\13\6\0\1\13\6\0\15\44\7\45\1\44\1\0"+
    "\1\44\2\5\1\46\2\44\1\47\1\44\1\0\2\13"+
    "\7\44\2\0\1\13\6\0\1\13\6\0\15\44\7\5"+
    "\1\44\2\0\2\46\3\0\1\50\50\0\7\46\2\0"+
    "\3\3\1\0\2\3\1\51\1\3\1\0\2\13\7\3"+
    "\2\0\1\13\6\0\1\13\6\0\3\3\1\52\21\3"+
    "\1\0\3\3\1\0\4\3\1\0\2\13\2\3\1\53"+
    "\1\3\1\54\2\3\2\0\1\13\6\0\1\13\6\0"+
    "\4\3\1\55\20\3\11\56\1\57\1\56\1\60\7\56"+
    "\1\61\44\56\1\62\3\12\1\62\4\12\1\62\1\63"+
    "\1\64\7\12\1\61\1\62\1\12\6\62\1\12\6\62"+
    "\25\12\1\0\3\13\1\0\4\13\1\0\11\13\2\0"+
    "\1\13\6\0\1\13\6\0\25\13\1\0\3\3\1\0"+
    "\4\3\1\0\2\13\3\3\1\65\3\3\2\0\1\13"+
    "\6\0\1\13\6\0\1\66\2\3\1\67\2\3\1\70"+
    "\16\3\1\0\3\3\1\0\4\3\1\0\2\13\3\3"+
    "\1\71\2\3\1\72\2\0\1\13\6\0\1\13\6\0"+
    "\1\73\2\3\1\74\4\3\1\75\14\3\1\0\3\3"+
    "\1\0\2\3\1\76\1\3\1\0\2\13\7\3\2\0"+
    "\1\13\6\0\1\13\6\0\25\3\1\0\3\3\1\0"+
    "\1\3\1\77\2\3\1\0\2\13\3\3\1\100\3\3"+
    "\2\0\1\13\6\0\1\13\6\0\25\3\1\0\3\3"+
    "\1\0\4\3\1\0\2\13\7\3\2\0\1\13\6\0"+
    "\1\13\6\0\1\74\7\3\1\101\14\3\1\0\3\3"+
    "\1\0\4\3\1\0\2\13\1\3\1\102\5\3\2\0"+
    "\1\13\6\0\1\13\6\0\10\3\1\103\14\3\42\0"+
    "\1\24\55\0\1\104\1\105\10\0\1\24\56\0\1\24"+
    "\10\0\1\24\63\0\1\24\3\0\1\24\64\0\1\24"+
    "\2\0\1\24\65\0\1\24\70\0\1\24\27\0\3\3"+
    "\1\0\4\3\1\0\2\13\7\3\2\0\1\13\6\0"+
    "\1\13\6\0\1\3\1\106\1\107\22\3\1\0\3\3"+
    "\1\0\2\3\1\110\1\3\1\0\2\13\7\3\2\0"+
    "\1\13\6\0\1\13\6\0\1\111\2\3\1\107\21\3"+
    "\1\0\3\3\1\0\2\3\1\112\1\3\1\0\2\13"+
    "\4\3\1\113\2\3\2\0\1\13\6\0\1\13\6\0"+
    "\3\3\1\114\20\3\1\115\1\0\3\3\1\0\2\3"+
    "\1\116\1\3\1\0\2\13\7\3\2\0\1\13\6\0"+
    "\1\13\6\0\25\3\1\0\3\3\1\0\4\3\1\0"+
    "\2\13\7\3\2\0\1\13\6\0\1\13\6\0\1\117"+
    "\2\3\1\120\21\3\1\0\3\3\1\0\4\3\1\0"+
    "\2\13\1\3\1\107\1\121\4\3\2\0\1\13\6\0"+
    "\1\13\6\0\11\3\1\122\13\3\1\0\3\3\1\0"+
    "\4\3\1\0\2\13\7\3\2\0\1\13\6\0\1\13"+
    "\6\0\1\123\2\3\1\124\4\3\1\125\14\3\1\0"+
    "\3\3\1\0\4\3\1\0\2\13\3\3\1\126\2\3"+
    "\1\127\2\0\1\13\6\0\1\13\6\0\1\130\24\3"+
    "\1\0\3\3\1\0\1\3\1\131\1\132\1\3\1\0"+
    "\2\13\7\3\2\0\1\13\6\0\1\13\6\0\25\3"+
    "\1\0\1\44\2\13\1\0\4\44\1\0\2\13\7\44"+
    "\2\0\1\13\6\0\1\13\6\0\15\44\7\13\1\44"+
    "\1\0\1\44\2\45\1\133\4\44\1\0\2\13\7\44"+
    "\2\0\1\13\6\0\1\13\6\0\15\44\7\45\1\44"+
    "\2\0\2\46\3\0\1\134\50\0\7\46\2\0\1\44"+
    "\1\135\1\136\1\137\4\44\1\0\2\13\7\44\1\0"+
    "\1\140\1\13\6\0\1\13\6\0\15\44\7\136\1\44"+
    "\2\0\1\141\1\142\1\143\17\0\1\144\33\0\7\142"+
    "\2\0\3\3\1\0\3\3\1\145\1\0\2\13\7\3"+
    "\2\0\1\13\6\0\1\13\6\0\25\3\1\0\3\3"+
    "\1\0\4\3\1\0\2\13\6\3\1\146\2\0\1\13"+
    "\6\0\1\13\6\0\25\3\1\0\3\3\1\0\4\3"+
    "\1\0\2\13\6\3\1\147\2\0\1\13\6\0\1\13"+
    "\6\0\25\3\1\0\3\3\1\0\1\3\1\150\2\3"+
    "\1\0\2\13\7\3\2\0\1\13\6\0\1\13\6\0"+
    "\25\3\1\0\3\3\1\0\4\3\1\0\2\13\7\3"+
    "\2\0\1\13\6\0\1\13\6\0\2\3\1\151\22\3"+
    "\10\152\1\153\1\154\1\155\1\156\6\155\1\157\45\152"+
    "\12\62\1\57\1\160\7\62\1\61\44\62\1\161\3\162"+
    "\1\161\3\162\1\163\1\164\1\12\1\165\6\166\1\167"+
    "\2\161\1\162\6\161\1\162\6\161\25\162\1\0\3\3"+
    "\1\0\2\3\1\170\1\3\1\0\2\13\7\3\2\0"+
    "\1\13\6\0\1\13\6\0\25\3\1\0\3\3\1\0"+
    "\4\3\1\0\2\13\7\3\2\0\1\13\6\0\1\13"+
    "\6\0\4\3\1\171\20\3\1\0\3\3\1\0\4\3"+
    "\1\0\2\13\7\3\2\0\1\13\6\0\1\13\6\0"+
    "\3\3\1\172\21\3\1\0\3\3\1\0\4\3\1\0"+
    "\2\13\4\3\1\173\2\3\2\0\1\13\6\0\1\13"+
    "\6\0\25\3\1\0\3\3\1\0\4\3\1\0\2\13"+
    "\7\3\2\0\1\13\6\0\1\13\6\0\3\3\1\147"+
    "\21\3\1\0\3\3\1\0\4\3\1\0\2\13\2\3"+
    "\1\174\4\3\2\0\1\13\6\0\1\13\6\0\25\3"+
    "\1\0\3\3\1\0\4\3\1\0\2\13\7\3\2\0"+
    "\1\13\6\0\1\13\6\0\4\3\1\55\20\3\1\0"+
    "\3\3\1\0\4\3\1\0\2\13\3\3\1\107\3\3"+
    "\2\0\1\13\6\0\1\13\6\0\25\3\1\0\3\3"+
    "\1\0\4\3\1\0\2\13\2\3\1\175\4\3\2\0"+
    "\1\13\6\0\1\13\6\0\25\3\1\0\3\3\1\0"+
    "\4\3\1\0\2\13\4\3\1\176\2\3\2\0\1\13"+
    "\6\0\1\13\6\0\25\3\1\0\3\3\1\0\4\3"+
    "\1\0\2\13\7\3\2\0\1\13\6\0\1\13\6\0"+
    "\10\3\1\177\14\3\1\0\3\3\1\0\4\3\1\0"+
    "\2\13\6\3\1\151\2\0\1\13\6\0\1\13\6\0"+
    "\1\200\24\3\1\0\3\3\1\0\2\3\1\201\1\3"+
    "\1\0\2\13\7\3\2\0\1\13\6\0\1\13\6\0"+
    "\25\3\1\0\3\3\1\0\4\3\1\0\2\13\7\3"+
    "\2\0\1\13\6\0\1\13\6\0\10\3\1\202\14\3"+
    "\1\0\3\3\1\0\4\3\1\0\2\13\2\3\1\203"+
    "\4\3\2\0\1\13\6\0\1\13\6\0\25\3\23\104"+
    "\1\0\6\104\3\0\33\104\31\0\1\204\37\0\3\3"+
    "\1\0\4\3\1\0\2\13\7\3\2\0\1\13\6\0"+
    "\1\13\6\0\1\3\1\205\23\3\1\0\3\3\1\0"+
    "\4\3\1\0\2\13\7\3\2\0\1\13\6\0\1\13"+
    "\6\0\4\3\1\206\20\3\1\0\3\3\1\0\4\3"+
    "\1\0\2\13\7\3\2\0\1\13\6\0\1\13\6\0"+
    "\6\3\1\207\16\3\1\0\3\3\1\0\4\3\1\0"+
    "\2\13\2\3\1\210\4\3\2\0\1\13\6\0\1\13"+
    "\6\0\7\3\1\211\15\3\1\0\3\3\1\0\4\3"+
    "\1\0\2\13\3\3\1\212\3\3\2\0\1\13\6\0"+
    "\1\13\6\0\25\3\1\0\3\3\1\0\4\3\1\0"+
    "\2\13\7\3\2\0\1\13\6\0\1\13\6\0\4\3"+
    "\1\213\20\3\1\0\3\3\1\0\4\3\1\0\2\13"+
    "\7\3\2\0\1\13\6\0\1\13\6\0\1\214\24\3"+
    "\1\0\3\3\1\0\4\3\1\0\2\13\7\3\2\0"+
    "\1\13\6\0\1\13\6\0\1\146\24\3\1\0\3\3"+
    "\1\0\4\3\1\0\2\13\7\3\2\0\1\13\6\0"+
    "\1\13\6\0\4\3\1\215\20\3\1\0\3\3\1\0"+
    "\4\3\1\0\2\13\2\3\1\216\4\3\2\0\1\13"+
    "\6\0\1\13\6\0\25\3\1\0\3\3\1\0\4\3"+
    "\1\0\2\13\4\3\1\217\2\3\2\0\1\13\6\0"+
    "\1\13\6\0\25\3\1\0\3\3\1\0\4\3\1\0"+
    "\2\13\7\3\2\0\1\13\6\0\1\13\6\0\12\3"+
    "\1\220\12\3\1\0\3\3\1\0\4\3\1\0\2\13"+
    "\7\3\2\0\1\13\6\0\1\13\6\0\12\3\1\221"+
    "\12\3\1\0\3\3\1\0\4\3\1\0\2\13\7\3"+
    "\2\0\1\13\6\0\1\13\6\0\1\3\1\222\23\3"+
    "\1\0\3\3\1\0\4\3\1\0\2\13\2\3\1\223"+
    "\4\3\2\0\1\13\6\0\1\13\6\0\25\3\1\0"+
    "\3\3\1\0\4\3\1\0\2\13\7\3\2\0\1\13"+
    "\6\0\1\13\6\0\1\224\7\3\1\225\14\3\1\0"+
    "\3\3\1\0\4\3\1\0\2\13\1\226\6\3\2\0"+
    "\1\13\6\0\1\13\6\0\25\3\1\0\3\3\1\0"+
    "\4\3\1\0\2\13\7\3\2\0\1\13\6\0\1\13"+
    "\6\0\6\3\1\227\16\3\1\0\3\3\1\0\4\3"+
    "\1\0\2\13\7\3\2\0\1\13\6\0\1\13\6\0"+
    "\10\3\1\230\14\3\1\0\3\3\1\0\2\3\1\231"+
    "\1\3\1\0\2\13\7\3\2\0\1\13\6\0\1\13"+
    "\6\0\10\3\1\232\14\3\2\0\2\133\3\0\1\50"+
    "\50\0\7\133\3\0\1\233\1\234\1\137\17\0\1\140"+
    "\33\0\7\234\2\0\1\13\2\235\1\236\4\13\1\0"+
    "\11\13\2\0\1\13\6\0\1\13\6\0\15\13\7\235"+
    "\1\13\1\0\1\13\2\136\1\236\4\13\1\0\11\13"+
    "\2\0\1\13\6\0\1\13\6\0\15\13\7\136\1\13"+
    "\2\0\2\236\54\0\7\236\3\0\1\233\1\234\1\137"+
    "\53\0\7\234\3\0\3\237\53\0\7\237\3\0\2\142"+
    "\1\237\53\0\7\142\3\0\2\237\54\0\7\237\3\0"+
    "\1\141\1\142\1\143\53\0\7\142\2\0\3\3\1\0"+
    "\4\3\1\240\1\241\1\13\7\3\2\0\1\13\6\0"+
    "\1\13\6\0\25\3\1\0\3\3\1\0\4\3\1\0"+
    "\2\13\3\3\1\207\3\3\2\0\1\13\6\0\1\13"+
    "\6\0\25\3\1\0\3\3\1\0\4\3\1\0\2\13"+
    "\7\3\2\0\1\13\6\0\1\13\6\0\11\3\1\107"+
    "\13\3\1\0\3\3\1\0\2\3\1\242\1\3\1\0"+
    "\2\13\7\3\2\0\1\13\6\0\1\13\6\0\25\3"+
    "\1\0\3\3\1\0\2\3\1\107\1\3\1\0\2\13"+
    "\7\3\2\0\1\13\6\0\1\13\6\0\25\3\11\152"+
    "\1\61\1\152\1\243\7\152\1\61\46\152\2\244\1\152"+
    "\1\244\1\152\1\244\1\152\1\61\1\152\1\243\2\244"+
    "\5\152\1\61\17\152\2\244\5\152\1\244\5\152\7\244"+
    "\1\152\11\155\1\57\1\155\1\245\7\155\1\61\44\155"+
    "\10\56\1\246\1\247\1\155\1\60\6\155\1\250\1\61"+
    "\44\56\2\152\2\251\1\152\1\251\1\152\1\251\1\152"+
    "\1\61\1\152\1\243\2\251\5\152\1\61\17\152\2\251"+
    "\5\152\1\251\5\152\7\251\1\152\10\161\1\252\1\164"+
    "\1\253\1\254\6\164\1\255\57\161\1\61\1\256\7\161"+
    "\1\61\45\161\3\162\1\161\4\162\1\161\1\13\1\257"+
    "\7\162\1\61\1\161\1\162\6\161\1\162\6\161\25\162"+
    "\1\161\1\162\2\260\1\161\1\260\1\162\1\260\1\162"+
    "\1\161\1\13\1\257\2\260\5\162\1\61\1\161\1\162"+
    "\6\161\1\162\6\161\2\260\5\162\1\260\5\162\7\260"+
    "\1\162\12\164\1\57\1\261\7\164\1\61\44\164\1\62"+
    "\3\12\1\62\3\12\1\262\1\164\1\263\1\64\6\166"+
    "\1\264\1\61\1\62\1\12\6\62\1\12\6\62\25\12"+
    "\1\164\3\166\1\164\4\166\1\164\1\63\1\265\7\166"+
    "\1\61\1\164\1\166\6\164\1\166\6\164\25\166\1\161"+
    "\1\162\2\266\1\161\1\266\1\162\1\266\1\162\1\161"+
    "\1\13\1\257\2\266\5\162\1\61\1\161\1\162\6\161"+
    "\1\162\6\161\2\266\5\162\1\266\5\162\7\266\1\162"+
    "\1\0\3\3\1\0\4\3\1\0\2\13\7\3\2\0"+
    "\1\13\6\0\1\13\6\0\1\267\24\3\1\0\3\3"+
    "\1\0\4\3\1\0\2\13\7\3\2\0\1\13\6\0"+
    "\1\13\6\0\1\270\24\3\1\0\3\3\1\0\4\3"+
    "\1\0\2\13\7\3\2\0\1\13\6\0\1\13\6\0"+
    "\4\3\1\107\20\3\1\0\3\3\1\0\2\3\1\271"+
    "\1\3\1\0\2\13\7\3\2\0\1\13\6\0\1\13"+
    "\6\0\25\3\1\0\3\3\1\0\4\3\1\0\2\13"+
    "\7\3\2\0\1\13\6\0\1\13\6\0\7\3\1\272"+
    "\15\3\1\0\3\3\1\0\4\3\1\0\2\13\2\3"+
    "\1\273\4\3\2\0\1\13\6\0\1\13\6\0\25\3"+
    "\1\0\3\3\1\0\4\3\1\0\2\13\6\3\1\274"+
    "\2\0\1\13\6\0\1\13\6\0\25\3\1\0\3\3"+
    "\1\0\4\3\1\0\2\13\7\3\2\0\1\13\6\0"+
    "\1\13\6\0\2\3\1\107\22\3\1\0\3\3\1\0"+
    "\4\3\1\0\2\13\2\3\1\275\4\3\2\0\1\13"+
    "\6\0\1\13\6\0\25\3\1\0\3\3\1\0\4\3"+
    "\1\0\2\13\7\3\2\0\1\13\6\0\1\13\6\0"+
    "\14\3\1\107\10\3\1\0\3\3\1\0\3\3\1\276"+
    "\1\0\2\13\7\3\2\0\1\13\6\0\1\13\6\0"+
    "\25\3\1\0\3\3\1\0\4\3\1\0\2\13\4\3"+
    "\1\277\2\3\2\0\1\13\6\0\1\13\6\0\25\3"+
    "\23\204\1\300\5\204\1\301\36\204\1\0\3\3\1\0"+
    "\4\3\1\0\2\13\3\3\1\302\3\3\2\0\1\13"+
    "\6\0\1\13\6\0\25\3\1\0\3\3\1\0\2\3"+
    "\1\303\1\3\1\0\2\13\7\3\2\0\1\13\6\0"+
    "\1\13\6\0\25\3\1\0\3\3\1\0\4\3\1\0"+
    "\2\13\7\3\2\0\1\13\6\0\1\13\6\0\2\3"+
    "\1\232\22\3\1\0\3\3\1\0\4\3\1\0\2\13"+
    "\7\3\2\0\1\13\6\0\1\13\6\0\1\3\1\304"+
    "\23\3\1\0\3\3\1\0\4\3\1\0\2\13\7\3"+
    "\2\0\1\13\6\0\1\13\6\0\3\3\1\305\21\3"+
    "\1\0\3\3\1\0\4\3\1\0\2\13\6\3\1\306"+
    "\2\0\1\13\6\0\1\13\6\0\10\3\1\307\14\3"+
    "\1\0\3\3\1\0\4\3\1\0\2\13\7\3\2\0"+
    "\1\13\6\0\1\13\6\0\10\3\1\310\14\3\1\0"+
    "\3\3\1\0\4\3\1\0\2\13\1\311\6\3\2\0"+
    "\1\13\6\0\1\13\6\0\25\3\1\0\3\3\1\0"+
    "\4\3\1\0\2\13\7\3\2\0\1\13\6\0\1\13"+
    "\6\0\4\3\1\312\20\3\1\0\3\3\1\0\4\3"+
    "\1\0\2\13\4\3\1\313\2\3\2\0\1\13\6\0"+
    "\1\13\6\0\2\3\1\314\22\3\1\0\3\3\1\0"+
    "\2\3\1\315\1\3\1\0\2\13\7\3\2\0\1\13"+
    "\6\0\1\13\6\0\15\3\1\107\1\316\1\317\1\320"+
    "\1\321\3\3\1\0\3\3\1\0\4\3\1\0\2\13"+
    "\7\3\2\0\1\13\6\0\1\13\6\0\3\3\1\322"+
    "\21\3\1\0\3\3\1\0\4\3\1\0\2\13\7\3"+
    "\2\0\1\13\6\0\1\13\6\0\12\3\1\323\12\3"+
    "\1\0\3\3\1\0\4\3\1\0\2\13\7\3\2\0"+
    "\1\13\6\0\1\13\6\0\10\3\1\324\14\3\1\0"+
    "\3\3\1\0\4\3\1\0\2\13\6\3\1\325\2\0"+
    "\1\13\6\0\1\13\6\0\25\3\1\0\3\3\1\0"+
    "\4\3\1\0\2\13\7\3\2\0\1\13\6\0\1\13"+
    "\6\0\13\3\1\326\11\3\1\0\3\3\1\0\4\3"+
    "\1\0\2\13\5\3\1\327\1\3\2\0\1\13\6\0"+
    "\1\13\6\0\25\3\1\0\3\3\1\0\4\3\1\0"+
    "\2\13\7\3\2\0\1\13\6\0\1\13\6\0\4\3"+
    "\1\330\20\3\1\0\3\3\1\0\4\3\1\0\2\13"+
    "\7\3\2\0\1\13\6\0\1\13\6\0\1\331\24\3"+
    "\1\0\3\3\1\0\4\3\1\0\2\13\7\3\2\0"+
    "\1\13\6\0\1\13\6\0\4\3\1\151\20\3\1\0"+
    "\3\3\1\0\4\3\1\0\2\13\7\3\2\0\1\13"+
    "\6\0\1\13\6\0\5\3\1\207\17\3\2\0\2\237"+
    "\1\236\53\0\7\237\3\0\2\234\1\236\53\0\7\234"+
    "\2\0\1\13\2\235\1\0\4\13\1\0\11\13\2\0"+
    "\1\13\6\0\1\13\6\0\15\13\7\235\1\13\2\332"+
    "\2\333\1\332\1\333\1\332\1\333\4\332\2\333\25\332"+
    "\2\333\5\332\1\333\5\332\7\333\1\332\1\334\1\335"+
    "\2\336\1\334\1\336\1\335\1\336\1\335\1\334\2\335"+
    "\2\336\5\335\2\334\1\335\6\334\1\335\6\334\2\336"+
    "\5\335\1\336\5\335\7\336\1\335\1\0\3\3\1\0"+
    "\4\3\1\0\2\13\3\3\1\232\3\3\2\0\1\13"+
    "\6\0\1\13\6\0\25\3\10\0\1\337\11\152\1\340"+
    "\45\0\2\152\2\155\1\152\1\155\1\152\1\155\1\152"+
    "\1\61\1\152\1\243\2\155\5\152\1\61\17\152\2\155"+
    "\5\152\1\155\5\152\7\155\11\152\1\153\2\155\1\341"+
    "\6\155\1\157\45\152\2\56\2\342\1\56\1\342\1\56"+
    "\1\342\1\56\1\57\1\56\1\60\2\342\5\56\1\61"+
    "\17\56\2\342\5\56\1\342\5\56\7\342\3\56\2\343"+
    "\1\56\1\343\1\56\1\343\1\56\1\57\1\56\1\60"+
    "\2\343\5\56\1\61\17\56\2\343\5\56\1\343\5\56"+
    "\7\343\1\56\2\152\2\153\1\152\1\153\1\152\1\153"+
    "\1\152\1\61\1\152\1\243\2\153\5\152\1\61\17\152"+
    "\2\153\5\152\1\153\5\152\7\153\1\152\2\161\2\344"+
    "\1\161\1\344\1\161\1\344\2\161\1\61\1\256\2\344"+
    "\5\161\1\61\17\161\2\344\5\161\1\344\5\161\7\344"+
    "\1\161\10\62\1\345\1\164\1\346\1\160\6\164\1\347"+
    "\1\61\44\62\2\161\2\350\1\161\1\350\1\161\1\350"+
    "\2\161\1\61\1\256\2\350\5\161\1\61\17\161\2\350"+
    "\5\161\1\350\5\161\7\350\1\161\10\0\1\351\11\161"+
    "\1\352\46\0\3\13\1\0\3\13\1\353\1\161\10\162"+
    "\1\354\2\0\1\13\6\0\1\13\6\0\25\13\1\161"+
    "\1\162\2\166\1\161\1\166\1\162\1\166\1\162\1\161"+
    "\1\13\1\257\2\166\5\162\1\61\1\161\1\162\6\161"+
    "\1\162\6\161\2\166\5\162\1\166\5\162\7\166\1\162"+
    "\10\161\1\252\2\164\1\355\6\164\1\255\45\161\1\62"+
    "\1\12\2\356\1\62\1\356\1\12\1\356\1\12\1\62"+
    "\1\63\1\64\2\356\5\12\1\61\1\62\1\12\6\62"+
    "\1\12\6\62\2\356\5\12\1\356\5\12\7\356\1\12"+
    "\1\62\1\12\2\357\1\62\1\357\1\12\1\357\1\12"+
    "\1\62\1\63\1\64\2\357\5\12\1\61\1\62\1\12"+
    "\6\62\1\12\6\62\2\357\5\12\1\357\5\12\7\357"+
    "\1\12\1\161\3\162\1\161\3\162\1\163\1\164\1\166"+
    "\1\360\6\166\1\167\2\161\1\162\6\161\1\162\6\161"+
    "\25\162\1\161\1\162\2\163\1\161\1\163\1\162\1\163"+
    "\1\162\1\161\1\13\1\257\2\163\5\162\1\61\1\161"+
    "\1\162\6\161\1\162\6\161\2\163\5\162\1\163\5\162"+
    "\7\163\1\162\1\0\3\3\1\0\4\3\1\0\2\13"+
    "\7\3\2\0\1\13\6\0\1\13\6\0\5\3\1\107"+
    "\17\3\1\0\3\3\1\0\4\3\1\0\2\13\2\3"+
    "\1\361\4\3\2\0\1\13\6\0\1\13\6\0\25\3"+
    "\1\0\3\3\1\0\4\3\1\0\2\13\7\3\2\0"+
    "\1\13\6\0\1\13\6\0\2\3\1\362\22\3\1\0"+
    "\3\3\1\0\4\3\1\0\2\13\4\3\1\363\2\3"+
    "\2\0\1\13\6\0\1\13\6\0\25\3\1\0\3\3"+
    "\1\0\2\3\1\364\1\3\1\0\2\13\7\3\2\0"+
    "\1\13\6\0\1\13\6\0\25\3\1\0\3\3\1\0"+
    "\4\3\1\0\2\13\3\3\1\365\3\3\2\0\1\13"+
    "\6\0\1\13\6\0\25\3\1\0\3\3\1\0\4\3"+
    "\1\0\2\13\7\3\2\0\1\13\6\0\1\13\6\0"+
    "\2\3\1\366\22\3\1\0\3\3\1\0\2\3\1\367"+
    "\1\3\1\0\2\13\7\3\2\0\1\13\6\0\1\13"+
    "\6\0\25\3\1\0\3\3\1\0\4\3\1\0\2\13"+
    "\7\3\2\0\1\13\6\0\1\13\6\0\15\3\1\107"+
    "\1\316\1\317\1\320\1\321\3\3\23\370\1\371\2\370"+
    "\1\372\1\370\1\0\1\301\36\370\23\204\1\300\4\204"+
    "\1\22\1\301\36\204\1\0\3\3\1\0\2\3\1\373"+
    "\1\3\1\0\2\13\7\3\2\0\1\13\6\0\1\13"+
    "\6\0\25\3\1\0\3\3\1\0\4\3\1\0\2\13"+
    "\4\3\1\151\2\3\2\0\1\13\6\0\1\13\6\0"+
    "\13\3\1\374\11\3\1\0\3\3\1\0\4\3\1\0"+
    "\2\13\2\3\1\375\4\3\2\0\1\13\6\0\1\13"+
    "\6\0\25\3\1\0\3\3\1\0\4\3\1\0\2\13"+
    "\7\3\2\0\1\13\6\0\1\13\6\0\7\3\1\376"+
    "\15\3\1\0\3\3\1\0\4\3\1\0\2\13\2\3"+
    "\1\377\4\3\2\0\1\13\6\0\1\13\6\0\25\3"+
    "\1\0\3\3\1\0\4\3\1\0\2\13\7\3\2\0"+
    "\1\13\6\0\1\13\6\0\1\3\1\u0100\23\3\1\0"+
    "\3\3\1\0\4\3\1\0\2\13\7\3\2\0\1\13"+
    "\6\0\1\13\6\0\3\3\1\232\21\3\1\0\3\3"+
    "\1\0\4\3\1\0\2\13\7\3\2\0\1\13\6\0"+
    "\1\13\6\0\7\3\1\u0101\15\3\1\0\3\3\1\0"+
    "\4\3\1\0\2\13\3\3\1\u0102\3\3\2\0\1\13"+
    "\6\0\1\13\6\0\10\3\1\u0103\14\3\1\0\3\3"+
    "\1\0\4\3\1\0\2\13\4\3\1\u0104\2\3\2\0"+
    "\1\13\6\0\1\13\6\0\25\3\1\0\3\3\1\0"+
    "\4\3\1\0\2\13\3\3\1\u0105\3\3\2\0\1\13"+
    "\6\0\1\13\6\0\25\3\1\0\3\3\1\0\4\3"+
    "\1\0\2\13\7\3\2\0\1\13\6\0\1\13\6\0"+
    "\17\3\1\107\1\3\1\u0106\3\3\1\0\3\3\1\0"+
    "\4\3\1\0\2\13\7\3\2\0\1\13\6\0\1\13"+
    "\6\0\22\3\1\107\2\3\1\0\3\3\1\0\4\3"+
    "\1\0\2\13\7\3\2\0\1\13\6\0\1\13\6\0"+
    "\21\3\1\107\3\3\1\0\3\3\1\0\4\3\1\0"+
    "\2\13\7\3\2\0\1\13\6\0\1\13\6\0\23\3"+
    "\1\u0107\1\3\1\0\3\3\1\0\4\3\1\0\2\13"+
    "\3\3\1\376\3\3\2\0\1\13\6\0\1\13\6\0"+
    "\25\3\1\0\3\3\1\0\4\3\1\0\2\13\7\3"+
    "\2\0\1\13\6\0\1\13\6\0\10\3\1\307\14\3"+
    "\1\0\3\3\1\0\4\3\1\0\2\13\1\3\1\u0108"+
    "\5\3\2\0\1\13\6\0\1\13\6\0\25\3\1\0"+
    "\3\3\1\0\4\3\1\0\2\13\4\3\1\u0109\2\3"+
    "\2\0\1\13\6\0\1\13\6\0\25\3\1\0\3\3"+
    "\1\0\4\3\1\0\2\13\7\3\2\0\1\13\6\0"+
    "\1\13\6\0\11\3\1\u010a\13\3\1\0\3\3\1\0"+
    "\4\3\1\0\2\13\7\3\2\0\1\13\6\0\1\13"+
    "\6\0\1\u010b\24\3\1\0\3\3\1\0\4\3\1\0"+
    "\2\13\7\3\2\0\1\13\6\0\1\13\6\0\10\3"+
    "\1\u010c\14\3\1\0\3\3\1\0\4\3\1\0\2\13"+
    "\1\230\6\3\2\0\1\13\6\0\1\13\6\0\25\3"+
    "\2\332\2\u010d\1\332\1\u010d\1\332\1\u010d\1\332\1\u010e"+
    "\2\332\2\u010d\25\332\2\u010d\5\332\1\u010d\5\332\7\u010d"+
    "\3\332\2\333\1\332\1\333\1\332\1\333\1\332\1\u010f"+
    "\2\332\2\333\25\332\2\333\5\332\1\333\5\332\7\333"+
    "\1\332\2\334\2\u0110\1\334\1\u0110\1\334\1\u0110\2\334"+
    "\1\u0111\1\334\2\u0110\25\334\2\u0110\5\334\1\u0110\5\334"+
    "\7\u0110\2\334\1\335\2\u0112\1\334\1\u0112\1\335\1\u0112"+
    "\1\335\1\334\1\u0113\1\335\2\u0112\5\335\2\334\1\335"+
    "\6\334\1\335\6\334\2\u0112\5\335\1\u0112\5\335\7\u0112"+
    "\1\335\1\334\1\335\2\336\1\334\1\336\1\335\1\336"+
    "\1\335\1\334\1\u0114\1\335\2\336\5\335\2\334\1\335"+
    "\6\334\1\335\6\334\2\336\5\335\1\336\5\335\7\336"+
    "\1\335\2\0\2\u0115\1\0\1\u0115\1\0\1\u0115\4\0"+
    "\2\u0115\25\0\2\u0115\5\0\1\u0115\5\0\7\u0115\3\0"+
    "\2\u0116\1\0\1\u0116\1\0\1\u0116\4\0\2\u0116\25\0"+
    "\2\u0116\5\0\1\u0116\5\0\7\u0116\1\0\11\155\1\247"+
    "\1\155\1\245\7\155\1\61\44\155\2\56\2\155\1\56"+
    "\1\155\1\56\1\155\1\56\1\57\1\56\1\60\2\155"+
    "\5\56\1\61\17\56\2\155\5\56\1\155\5\56\7\155"+
    "\3\56\2\246\1\56\1\246\1\56\1\246\1\56\1\57"+
    "\1\56\1\60\2\246\5\56\1\61\17\56\2\246\5\56"+
    "\1\246\5\56\7\246\1\56\2\161\2\164\1\161\1\164"+
    "\1\161\1\164\2\161\1\61\1\256\2\164\5\161\1\61"+
    "\17\161\2\164\5\161\1\164\5\161\7\164\1\161\2\62"+
    "\2\u0117\1\62\1\u0117\1\62\1\u0117\2\62\1\57\1\160"+
    "\2\u0117\5\62\1\61\17\62\2\u0117\5\62\1\u0117\5\62"+
    "\7\u0117\3\62\2\u0118\1\62\1\u0118\1\62\1\u0118\2\62"+
    "\1\57\1\160\2\u0118\5\62\1\61\17\62\2\u0118\5\62"+
    "\1\u0118\5\62\7\u0118\1\62\2\161\2\252\1\161\1\252"+
    "\1\161\1\252\2\161\1\61\1\256\2\252\5\161\1\61"+
    "\17\161\2\252\5\161\1\252\5\161\7\252\1\161\2\0"+
    "\2\u0119\1\0\1\u0119\1\0\1\u0119\4\0\2\u0119\25\0"+
    "\2\u0119\5\0\1\u0119\5\0\7\u0119\3\0\2\u011a\1\0"+
    "\1\u011a\1\0\1\u011a\4\0\2\u011a\25\0\2\u011a\5\0"+
    "\1\u011a\5\0\7\u011a\2\0\1\13\2\u011b\1\0\1\u011b"+
    "\1\13\1\u011b\1\13\1\0\2\13\2\u011b\5\13\2\0"+
    "\1\13\6\0\1\13\6\0\2\u011b\5\13\1\u011b\5\13"+
    "\7\u011b\1\13\1\0\1\13\2\u011c\1\0\1\u011c\1\13"+
    "\1\u011c\1\13\1\0\2\13\2\u011c\5\13\2\0\1\13"+
    "\6\0\1\13\6\0\2\u011c\5\13\1\u011c\5\13\7\u011c"+
    "\1\13\12\164\1\346\1\261\7\164\1\61\44\164\1\62"+
    "\1\12\2\166\1\62\1\166\1\12\1\166\1\12\1\62"+
    "\1\63\1\64\2\166\5\12\1\61\1\62\1\12\6\62"+
    "\1\12\6\62\2\166\5\12\1\166\5\12\7\166\1\12"+
    "\1\62\1\12\2\262\1\62\1\262\1\12\1\262\1\12"+
    "\1\62\1\63\1\64\2\262\5\12\1\61\1\62\1\12"+
    "\6\62\1\12\6\62\2\262\5\12\1\262\5\12\7\262"+
    "\1\12\1\164\3\166\1\164\4\166\1\164\1\263\1\265"+
    "\7\166\1\61\1\164\1\166\6\164\1\166\6\164\25\166"+
    "\1\0\3\3\1\0\4\3\1\0\2\13\7\3\2\0"+
    "\1\13\6\0\1\13\6\0\7\3\1\u011d\15\3\1\0"+
    "\3\3\1\0\4\3\1\0\2\13\7\3\2\0\1\13"+
    "\6\0\1\13\6\0\10\3\1\u011e\14\3\1\0\3\3"+
    "\1\0\4\3\1\0\2\13\7\3\2\0\1\13\6\0"+
    "\1\13\6\0\6\3\1\232\16\3\1\0\3\3\1\0"+
    "\4\3\1\0\2\13\2\3\1\u011f\4\3\2\0\1\13"+
    "\6\0\1\13\6\0\25\3\1\0\3\3\1\0\4\3"+
    "\1\0\2\13\1\3\1\u0120\5\3\2\0\1\13\6\0"+
    "\1\13\6\0\25\3\1\0\3\3\1\0\4\3\1\0"+
    "\2\13\7\3\2\0\1\13\6\0\1\13\6\0\1\3"+
    "\1\107\23\3\23\370\1\371\5\370\1\371\3\u0121\56\370"+
    "\1\371\4\370\1\u0122\1\371\3\u0121\56\370\1\371\2\370"+
    "\1\372\1\370\1\u0121\1\301\36\370\1\0\3\3\1\0"+
    "\4\3\1\0\2\13\7\3\2\0\1\13\6\0\1\13"+
    "\6\0\2\3\1\177\22\3\1\0\3\3\1\0\4\3"+
    "\1\0\2\13\7\3\2\0\1\13\6\0\1\13\6\0"+
    "\1\u0123\24\3\1\0\3\3\1\0\4\3\1\0\2\13"+
    "\7\3\2\0\1\13\6\0\1\13\6\0\1\3\1\207"+
    "\23\3\1\0\3\3\1\0\4\3\1\0\2\13\4\3"+
    "\1\107\2\3\2\0\1\13\6\0\1\13\6\0\25\3"+
    "\1\0\3\3\1\0\4\3\1\0\2\13\7\3\2\0"+
    "\1\13\6\0\1\13\6\0\13\3\1\107\11\3\1\0"+
    "\3\3\1\0\4\3\1\0\2\13\7\3\2\0\1\13"+
    "\6\0\1\13\6\0\10\3\1\u0124\14\3\1\0\3\3"+
    "\1\0\4\3\1\0\2\13\7\3\2\0\1\13\6\0"+
    "\1\13\6\0\3\3\1\u0125\21\3\1\0\3\3\1\0"+
    "\4\3\1\0\2\13\7\3\2\0\1\13\6\0\1\13"+
    "\6\0\1\306\24\3\1\0\3\3\1\0\4\3\1\0"+
    "\2\13\2\3\1\u0126\4\3\2\0\1\13\6\0\1\13"+
    "\6\0\25\3\1\0\3\3\1\0\4\3\1\0\2\13"+
    "\3\3\1\u0127\3\3\2\0\1\13\6\0\1\13\6\0"+
    "\25\3\1\0\3\3\1\0\4\3\1\0\2\13\2\3"+
    "\1\u0128\4\3\2\0\1\13\6\0\1\13\6\0\25\3"+
    "\1\0\3\3\1\0\4\3\1\0\2\13\7\3\2\0"+
    "\1\13\6\0\1\13\6\0\15\3\1\107\7\3\1\0"+
    "\3\3\1\0\4\3\1\0\2\13\7\3\2\0\1\13"+
    "\6\0\1\13\6\0\17\3\1\107\5\3\1\0\3\3"+
    "\1\0\4\3\1\0\2\13\7\3\2\0\1\13\6\0"+
    "\1\13\6\0\10\3\1\u0129\14\3\1\0\3\3\1\0"+
    "\2\3\1\207\1\3\1\0\2\13\7\3\2\0\1\13"+
    "\6\0\1\13\6\0\25\3\1\0\3\3\1\0\4\3"+
    "\1\0\2\13\7\3\2\0\1\13\6\0\1\13\6\0"+
    "\1\107\24\3\1\0\3\3\1\0\4\3\1\0\2\13"+
    "\4\3\1\151\2\3\2\0\1\13\6\0\1\13\6\0"+
    "\25\3\1\0\3\3\1\0\4\3\1\0\2\13\7\3"+
    "\2\0\1\13\6\0\1\13\6\0\7\3\1\107\15\3"+
    "\2\0\2\u010d\1\0\1\u010d\1\0\1\u010d\1\0\1\u012a"+
    "\2\0\2\u010d\25\0\2\u010d\5\0\1\u010d\5\0\7\u010d"+
    "\3\0\2\u0110\1\0\1\u0110\1\0\1\u0110\2\0\1\u012a"+
    "\1\0\2\u0110\25\0\2\u0110\5\0\1\u0110\5\0\7\u0110"+
    "\2\0\1\13\2\u0112\1\0\1\u0112\1\13\1\u0112\1\13"+
    "\1\0\1\u012b\1\13\2\u0112\5\13\2\0\1\13\6\0"+
    "\1\13\6\0\2\u0112\5\13\1\u0112\5\13\7\u0112\1\13"+
    "\2\0\2\152\1\0\1\152\1\0\1\152\4\0\2\152"+
    "\25\0\2\152\5\0\1\152\5\0\7\152\3\0\2\337"+
    "\1\0\1\337\1\0\1\337\4\0\2\337\25\0\2\337"+
    "\5\0\1\337\5\0\7\337\1\0\2\62\2\164\1\62"+
    "\1\164\1\62\1\164\2\62\1\57\1\160\2\164\5\62"+
    "\1\61\17\62\2\164\5\62\1\164\5\62\7\164\3\62"+
    "\2\345\1\62\1\345\1\62\1\345\2\62\1\57\1\160"+
    "\2\345\5\62\1\61\17\62\2\345\5\62\1\345\5\62"+
    "\7\345\1\62\2\0\2\161\1\0\1\161\1\0\1\161"+
    "\4\0\2\161\25\0\2\161\5\0\1\161\5\0\7\161"+
    "\3\0\2\351\1\0\1\351\1\0\1\351\4\0\2\351"+
    "\25\0\2\351\5\0\1\351\5\0\7\351\2\0\1\13"+
    "\2\162\1\0\1\162\1\13\1\162\1\13\1\0\2\13"+
    "\2\162\5\13\2\0\1\13\6\0\1\13\6\0\2\162"+
    "\5\13\1\162\5\13\7\162\1\13\1\0\1\13\2\353"+
    "\1\0\1\353\1\13\1\353\1\13\1\0\2\13\2\353"+
    "\5\13\2\0\1\13\6\0\1\13\6\0\2\353\5\13"+
    "\1\353\5\13\7\353\1\13\1\0\3\3\1\0\2\3"+
    "\1\304\1\3\1\0\2\13\7\3\2\0\1\13\6\0"+
    "\1\13\6\0\25\3\1\0\3\3\1\0\4\3\1\0"+
    "\2\13\7\3\2\0\1\13\6\0\1\13\6\0\3\3"+
    "\1\u012c\21\3\1\0\3\3\1\0\2\3\1\u012d\1\3"+
    "\1\0\2\13\7\3\2\0\1\13\6\0\1\13\6\0"+
    "\25\3\23\u0121\1\u012e\5\u0121\1\u012f\36\u0121\32\u0122\3\0"+
    "\33\u0122\1\0\3\3\1\0\4\3\1\0\2\13\4\3"+
    "\1\u0130\2\3\2\0\1\13\6\0\1\13\6\0\25\3"+
    "\1\0\3\3\1\0\4\3\1\0\2\13\4\3\1\u0131"+
    "\2\3\2\0\1\13\6\0\1\13\6\0\25\3\1\0"+
    "\3\3\1\0\4\3\1\0\2\13\7\3\2\0\1\13"+
    "\6\0\1\13\6\0\1\3\1\u011d\23\3\1\0\3\3"+
    "\1\0\4\3\1\0\2\13\6\3\1\151\2\0\1\13"+
    "\6\0\1\13\6\0\25\3\1\0\3\3\1\0\4\3"+
    "\1\0\2\13\6\3\1\u0132\2\0\1\13\6\0\1\13"+
    "\6\0\25\3\1\0\3\3\1\0\4\3\1\0\2\13"+
    "\7\3\2\0\1\13\6\0\1\13\6\0\1\172\24\3"+
    "\1\0\3\3\1\0\2\3\1\74\1\3\1\0\2\13"+
    "\7\3\2\0\1\13\6\0\1\13\6\0\25\3\1\0"+
    "\3\3\1\0\4\3\1\0\2\13\2\3\1\107\4\3"+
    "\2\0\1\13\6\0\1\13\6\0\25\3\1\0\3\3"+
    "\1\0\4\3\1\0\2\13\3\3\1\304\3\3\2\0"+
    "\1\13\6\0\1\13\6\0\25\3\23\u0121\1\u012e\2\u0121"+
    "\1\u0133\1\u0121\1\0\1\u012f\61\u0121\1\u012e\4\u0121\1\0"+
    "\1\u012f\36\u0121\1\0\3\3\1\0\2\3\1\u0134\1\3"+
    "\1\0\2\13\7\3\2\0\1\13\6\0\1\13\6\0"+
    "\25\3\1\0\3\3\1\0\4\3\1\0\2\13\7\3"+
    "\2\0\1\13\6\0\1\13\6\0\6\3\1\107\16\3"+
    "\1\0\3\3\1\0\4\3\1\0\2\13\7\3\2\0"+
    "\1\13\6\0\1\13\6\0\7\3\1\u0135\15\3\23\u0121"+
    "\1\u012e\2\u0121\1\u0133\2\u0121\1\u012f\36\u0121\1\0\3\3"+
    "\1\0\4\3\1\0\2\13\7\3\2\0\1\13\6\0"+
    "\1\13\6\0\7\3\1\u0136\15\3\1\0\3\3\1\0"+
    "\4\3\1\0\2\13\4\3\1\u0137\2\3\2\0\1\13"+
    "\6\0\1\13\6\0\25\3\1\0\3\3\1\0\4\3"+
    "\1\0\2\13\7\3\2\0\1\13\6\0\1\13\6\0"+
    "\1\u0138\24\3\1\0\3\3\1\0\4\3\1\0\2\13"+
    "\7\3\2\0\1\13\6\0\1\13\6\0\3\3\1\74"+
    "\21\3\1\0\3\3\1\0\4\3\1\0\2\13\7\3"+
    "\2\0\1\13\6\0\1\13\6\0\4\3\1\u0139\20\3"+
    "\1\0\3\3\1\0\4\3\1\0\2\13\7\3\2\0"+
    "\1\13\6\0\1\13\6\0\4\3\1\304\20\3";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16128];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\17\1\1\11\1\1\1\11\31\1\1\0"+
    "\1\11\1\1\1\11\1\0\22\1\1\0\31\1\1\0"+
    "\3\1\1\0\12\1\1\0\61\1\1\0\2\1\1\0"+
    "\2\1\1\0\1\1\1\0\3\1\1\0\1\1\1\0"+
    "\53\1\3\0\2\1\2\0\1\1\2\0\1\1\1\0"+
    "\1\1\1\0\1\1\2\0\42\1\1\0\2\1\1\0"+
    "\4\1\6\0\6\1\1\0\10\1\1\11\17\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[313];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 198) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { lexeme=yytext()+" "+(yyline+1);return ERROR_CEROS_A_LA_IZQUIERDA;
            }
          case 15: break;
          case 2: 
            { lexeme=yytext()+" "+(yyline+1);return ERROR_CARACTERES_NO_VALIDOS;
            }
          case 16: break;
          case 3: 
            { lexeme=yytext()+" "+(yyline+1); return IDENTIFICADOR;
            }
          case 17: break;
          case 4: 
            { lexeme=yytext()+" "+(yyline+1); return LITERAL;
            }
          case 18: break;
          case 5: 
            { lexeme=yytext()+" "+(yyline+1); return OPERADOR;
            }
          case 19: break;
          case 6: 
            { /* ignore */
            }
          case 20: break;
          case 7: 
            { lexeme=yytext()+" "+(yyline+1);return ERROR_IDENTIFICADOR;
            }
          case 21: break;
          case 8: 
            { lexeme=yytext()+" "+(yyline+1);return ERROR_NOTACION_CIENTIFICA;
            }
          case 22: break;
          case 9: 
            { lexeme=yytext()+" "+(yyline+1);return ERROR_STRING;
            }
          case 23: break;
          case 10: 
            { lexeme=yytext()+" "+(yyline+1); return PALABRA_RESERVADA;
            }
          case 24: break;
          case 11: 
            { lexeme=yytext()+" "+(yyline+1);return ERROR_COMENTARIO;
            }
          case 25: break;
          case 12: 
            { lexeme=yytext()+" "+(yyline+1); return UNIDAD;
            }
          case 26: break;
          case 13: 
            { lexeme=yytext()+" "+(yyline+1); return TRANSAC;
            }
          case 27: break;
          case 14: 
            { lexeme=yytext()+" "+(yyline+1);return ERROR_HEXADECIMAL;
            }
          case 28: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
