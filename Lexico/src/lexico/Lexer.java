/* The following code was generated by JFlex 1.6.1 */

package lexico;
import static lexico.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/lexico/lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\30\1\23\1\32\1\32\1\31\22\0\1\30\1\34\1\10"+
    "\2\25\1\35\1\40\1\11\1\35\1\35\1\27\1\34\1\35\1\24"+
    "\1\3\1\26\1\2\1\63\1\66\1\65\1\67\1\70\1\64\1\2"+
    "\1\62\1\2\1\35\1\43\1\36\1\42\1\37\1\35\1\25\6\4"+
    "\7\1\1\21\1\1\1\60\12\1\1\35\1\12\1\35\1\35\2\25"+
    "\1\44\1\13\1\53\1\45\1\6\1\14\1\57\1\5\1\54\1\1"+
    "\1\51\1\50\1\55\1\15\1\47\1\56\1\1\1\16\1\46\1\17"+
    "\1\22\1\20\1\61\1\7\1\52\1\71\1\35\1\41\1\35\1\35"+
    "\6\25\1\33\u1e6e\25\u0134\0\1\32\1\32\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\1\1\2\1\3\1\4\2\2\3\1\6\2\1\5"+
    "\3\4\1\0\7\4\13\2\1\0\1\6\2\3\1\6"+
    "\5\2\1\0\1\3\2\7\2\0\1\7\1\0\17\2"+
    "\1\3\1\0\1\5\1\0\1\2\1\10\24\2\7\1"+
    "\1\0\1\3\1\0\1\10\4\2\6\7\7\1\6\7"+
    "\7\1\14\2\1\11\12\2\1\10\12\2\1\12\1\1"+
    "\2\0\1\2\3\7\1\3\1\7\1\0\1\3\1\7"+
    "\1\1\3\7\1\3\1\7\1\0\1\7\1\1\2\2"+
    "\1\10\5\2\1\10\2\11\2\2\1\13\5\2\1\13"+
    "\13\2\5\0\1\7\1\0\1\7\1\0\13\2\3\11"+
    "\20\2\1\1\1\0\1\14\1\3\1\0\1\14\1\3"+
    "\20\1\2\2\1\10\3\2\1\0\1\11\7\2\6\1"+
    "\1\14\3\7\7\1\2\7\7\1\2\2\2\11\3\2"+
    "\2\7\1\11\2\2\2\1\2\2\14\1\2\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[359];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"+
    "\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u032c\0\u0366"+
    "\0\72\0\u03a0\0\u03da\0\u0414\0\u020a\0\u044e\0\u020a\0\u0488"+
    "\0\u04c2\0\u04fc\0\u0536\0\72\0\u0570\0\u05aa\0\u05e4\0\u061e"+
    "\0\u0658\0\u0692\0\u06cc\0\u0706\0\u0740\0\u077a\0\u07b4\0\u07ee"+
    "\0\u0828\0\u0862\0\u089c\0\u08d6\0\u0910\0\u094a\0\u0984\0\u09be"+
    "\0\u09f8\0\u0a32\0\72\0\u0a6c\0\72\0\u0aa6\0\u0ae0\0\u0b1a"+
    "\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0\0\u0cea"+
    "\0\u0d24\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80\0\u0eba"+
    "\0\u0ef4\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc\0\u07b4\0\u1016\0\u1050"+
    "\0\u108a\0\u10c4\0\u10fe\0\u1138\0\u1172\0\u11ac\0\u11e6\0\u1220"+
    "\0\u125a\0\u1294\0\u12ce\0\u1308\0\u1342\0\u137c\0\u13b6\0\u13f0"+
    "\0\u142a\0\u1464\0\u149e\0\u14d8\0\u1512\0\u154c\0\u1586\0\u15c0"+
    "\0\u15fa\0\u1634\0\u166e\0\u166e\0\u16a8\0\u16e2\0\u171c\0\u1756"+
    "\0\u1790\0\u17ca\0\u1804\0\u0a32\0\u183e\0\u1878\0\u18b2\0\u18ec"+
    "\0\u1926\0\u1960\0\u199a\0\u19d4\0\u1a0e\0\u1a48\0\u1a82\0\u1abc"+
    "\0\u1af6\0\u0ae0\0\u1b30\0\u1b6a\0\u1ba4\0\u1bde\0\u1c18\0\u1c52"+
    "\0\u1c8c\0\u1cc6\0\u1d00\0\u1d3a\0\u1d74\0\u1dae\0\u1de8\0\u1e22"+
    "\0\u1e5c\0\u1e96\0\u1ed0\0\u1f0a\0\u1f44\0\u1f7e\0\u1fb8\0\u1ff2"+
    "\0\u202c\0\u2066\0\u20a0\0\u20da\0\u2114\0\u214e\0\u2188\0\u21c2"+
    "\0\u21fc\0\u2236\0\u2270\0\u22aa\0\u22e4\0\u231e\0\u2358\0\u2392"+
    "\0\u23cc\0\u2406\0\u2440\0\u247a\0\u24b4\0\u07b4\0\u24ee\0\u2528"+
    "\0\u2562\0\u259c\0\u25d6\0\u2610\0\u264a\0\u17ca\0\u2684\0\u0196"+
    "\0\u020a\0\u26be\0\u26f8\0\u2732\0\u276c\0\u27a6\0\u1a82\0\u27e0"+
    "\0\u01d0\0\u281a\0\u2854\0\u288e\0\u28c8\0\u2902\0\u293c\0\u2976"+
    "\0\u29b0\0\u29ea\0\u2a24\0\u2a5e\0\u2a98\0\u2ad2\0\u2b0c\0\u2b46"+
    "\0\u07b4\0\u2b80\0\u2bba\0\u2bf4\0\u2c2e\0\u2c68\0\u2ca2\0\u2cdc"+
    "\0\u2d16\0\u2d50\0\u2d8a\0\u2dc4\0\u2dfe\0\u2e38\0\u2e72\0\u2eac"+
    "\0\u2ee6\0\u2f20\0\u2f5a\0\u2f94\0\u2fce\0\u3008\0\u3042\0\u307c"+
    "\0\u30b6\0\u30f0\0\u312a\0\u3164\0\u2a5e\0\u319e\0\u31d8\0\u3212"+
    "\0\u324c\0\u3286\0\u32c0\0\u32fa\0\u3334\0\u336e\0\u33a8\0\u33e2"+
    "\0\u341c\0\u3456\0\u3490\0\u34ca\0\u3504\0\u353e\0\u3578\0\u35b2"+
    "\0\u35ec\0\u3626\0\u3660\0\u369a\0\u36d4\0\u370e\0\u3748\0\u3782"+
    "\0\u37bc\0\u37f6\0\u3830\0\u2f94\0\u2f94\0\u386a\0\u3008\0\u3008"+
    "\0\u38a4\0\u38de\0\u3918\0\u3952\0\u398c\0\u39c6\0\u3a00\0\u3a3a"+
    "\0\u3a74\0\u3aae\0\u3ae8\0\u3b22\0\u3b5c\0\u3b96\0\u3bd0\0\u3c0a"+
    "\0\u3c44\0\u3c7e\0\u1ed0\0\u3cb8\0\u3cf2\0\u3d2c\0\u3d66\0\u3da0"+
    "\0\u3dda\0\u3e14\0\u3e4e\0\u3e88\0\u3ec2\0\u3efc\0\u3f36\0\u3f70"+
    "\0\u3faa\0\u3fe4\0\u401e\0\u4058\0\u4092\0\72\0\u40cc\0\u020a"+
    "\0\u4106\0\u4140\0\u417a\0\u41b4\0\u41ee\0\u4228\0\u4262\0\u429c"+
    "\0\u42d6\0\u4310\0\u434a\0\u4384\0\u43be\0\u43f8\0\u4432\0\u446c"+
    "\0\u44a6\0\u44e0\0\u451a\0\u4554\0\u458e\0\u45c8\0\u4602\0\u463c"+
    "\0\u4676\0\u46b0\0\u46ea\0\u4724\0\u475e\0\u4798\0\u47d2\0\u480c"+
    "\0\u4846\0\u4880\0\u48ba\0\u48f4\0\u492e\0\u4968\0\u49a2\0\u49dc"+
    "\0\u4a16\0\u4a50\0\u4a8a\0\u4ac4\0\u4afe\0\u4b38\0\u4b72";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[359];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\3\1\6\1\7\1\3"+
    "\1\10\1\11\1\12\1\13\1\14\1\3\1\15\1\16"+
    "\1\17\1\3\1\20\1\21\1\22\1\12\1\23\1\24"+
    "\2\21\1\0\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\26\1\34\1\35\1\36\1\37\3\3\1\40"+
    "\1\41\1\42\1\43\1\44\1\3\1\45\1\46\7\4"+
    "\1\3\73\0\2\47\1\0\4\47\3\0\10\47\1\0"+
    "\1\50\17\0\26\47\1\0\1\51\1\52\1\53\2\51"+
    "\1\54\1\51\3\0\10\51\1\0\1\50\17\0\16\51"+
    "\7\52\1\51\2\0\1\53\21\0\1\50\35\0\7\53"+
    "\2\0\2\47\1\0\2\47\1\55\1\47\3\0\10\47"+
    "\1\0\1\50\17\0\3\47\1\56\22\47\1\0\2\47"+
    "\1\0\4\47\3\0\2\47\1\57\1\47\1\60\3\47"+
    "\1\0\1\50\17\0\4\47\1\61\21\47\10\62\1\63"+
    "\1\62\1\64\10\62\1\65\1\66\45\62\11\67\1\63"+
    "\1\70\10\67\1\65\1\71\45\67\24\0\1\50\46\0"+
    "\2\47\1\0\4\47\3\0\3\47\1\72\4\47\1\0"+
    "\1\50\17\0\1\73\2\47\1\74\2\47\1\75\17\47"+
    "\1\0\2\47\1\0\4\47\3\0\3\47\1\76\3\47"+
    "\1\77\1\0\1\50\17\0\1\100\2\47\1\101\4\47"+
    "\1\102\15\47\1\0\2\47\1\0\2\47\1\103\1\47"+
    "\3\0\10\47\1\0\1\50\17\0\26\47\1\0\2\47"+
    "\1\0\1\47\1\104\2\47\3\0\3\47\1\105\4\47"+
    "\1\0\1\50\17\0\26\47\1\0\2\47\1\0\4\47"+
    "\3\0\10\47\1\0\1\50\17\0\1\101\7\47\1\106"+
    "\15\47\1\0\2\47\1\0\4\47\3\0\1\47\1\107"+
    "\6\47\1\0\1\50\17\0\10\47\1\110\15\47\2\0"+
    "\1\111\1\112\20\0\1\50\15\0\1\34\17\0\7\111"+
    "\25\0\1\50\1\0\1\113\1\114\12\0\1\34\53\0"+
    "\1\50\2\0\1\34\12\0\1\34\53\0\1\50\15\0"+
    "\1\34\53\0\1\50\11\0\1\34\3\0\1\34\53\0"+
    "\1\50\12\0\1\34\2\0\1\34\53\0\1\50\13\0"+
    "\1\34\55\0\1\50\14\0\1\34\31\0\2\47\1\0"+
    "\4\47\3\0\10\47\1\0\1\50\17\0\1\47\1\115"+
    "\1\116\23\47\1\0\2\47\1\0\2\47\1\117\1\47"+
    "\3\0\10\47\1\0\1\50\17\0\1\120\2\47\1\116"+
    "\22\47\1\0\2\47\1\0\2\47\1\121\1\47\3\0"+
    "\4\47\1\122\3\47\1\0\1\50\17\0\3\47\1\123"+
    "\21\47\1\124\1\0\2\47\1\0\2\47\1\125\1\47"+
    "\3\0\10\47\1\0\1\50\17\0\26\47\1\0\2\47"+
    "\1\0\4\47\3\0\10\47\1\0\1\50\17\0\1\126"+
    "\2\47\1\127\22\47\1\0\2\47\1\0\4\47\3\0"+
    "\1\47\1\116\1\130\5\47\1\0\1\50\17\0\11\47"+
    "\1\131\14\47\1\0\2\47\1\0\4\47\3\0\10\47"+
    "\1\0\1\50\17\0\1\132\2\47\1\133\4\47\1\134"+
    "\15\47\1\0\2\47\1\0\4\47\3\0\3\47\1\135"+
    "\3\47\1\136\1\0\1\50\17\0\1\137\25\47\1\0"+
    "\2\47\1\0\4\47\3\0\3\47\1\140\4\47\1\0"+
    "\1\50\17\0\26\47\1\0\2\47\1\0\1\47\1\141"+
    "\1\142\1\47\3\0\10\47\1\0\1\50\17\0\26\47"+
    "\1\0\2\47\1\0\4\47\3\0\10\47\21\0\26\47"+
    "\3\0\1\143\20\0\1\144\1\0\1\144\1\145\4\0"+
    "\1\144\1\143\1\146\1\147\1\150\1\151\1\144\1\143"+
    "\27\0\1\51\2\0\4\51\3\0\10\51\21\0\16\51"+
    "\7\0\1\51\1\0\1\51\1\52\1\53\2\51\1\54"+
    "\1\51\3\0\10\51\21\0\16\51\7\52\1\51\2\0"+
    "\1\53\3\0\1\152\53\0\7\53\2\0\1\51\1\153"+
    "\1\0\4\51\3\0\10\51\1\0\1\154\17\0\16\51"+
    "\7\153\1\51\1\0\2\47\1\0\3\47\1\155\3\0"+
    "\10\47\21\0\26\47\1\0\2\47\1\0\4\47\3\0"+
    "\7\47\1\156\21\0\26\47\1\0\2\47\1\0\4\47"+
    "\3\0\7\47\1\157\21\0\26\47\1\0\2\47\1\0"+
    "\1\47\1\160\2\47\3\0\10\47\21\0\26\47\1\0"+
    "\2\47\1\0\4\47\3\0\10\47\21\0\2\47\1\161"+
    "\23\47\10\62\1\63\1\62\1\64\10\62\1\65\46\62"+
    "\7\162\1\163\1\164\1\165\1\166\6\165\1\162\1\167"+
    "\47\162\3\62\1\170\4\62\1\63\1\62\1\64\10\62"+
    "\1\65\1\171\1\62\1\171\1\172\4\62\1\171\1\170"+
    "\1\173\1\174\1\175\1\176\1\171\1\170\26\62\11\67"+
    "\1\63\1\70\10\67\1\65\46\67\7\177\1\200\1\201"+
    "\1\202\1\203\6\201\1\177\1\204\47\177\3\67\1\205"+
    "\5\67\1\63\1\70\10\67\1\65\1\206\1\67\1\206"+
    "\1\207\4\67\1\206\1\205\1\210\1\211\1\212\1\213"+
    "\1\206\1\205\26\67\1\0\2\47\1\0\2\47\1\214"+
    "\1\47\3\0\10\47\21\0\26\47\1\0\2\47\1\0"+
    "\4\47\3\0\10\47\21\0\4\47\1\215\21\47\1\0"+
    "\2\47\1\0\4\47\3\0\10\47\21\0\3\47\1\216"+
    "\22\47\1\0\2\47\1\0\4\47\3\0\4\47\1\217"+
    "\3\47\21\0\26\47\1\0\2\47\1\0\4\47\3\0"+
    "\10\47\21\0\3\47\1\157\22\47\1\0\2\47\1\0"+
    "\4\47\3\0\2\47\1\220\5\47\21\0\26\47\1\0"+
    "\2\47\1\0\4\47\3\0\10\47\21\0\4\47\1\61"+
    "\21\47\1\0\2\47\1\0\4\47\3\0\3\47\1\116"+
    "\4\47\21\0\26\47\1\0\2\47\1\0\4\47\3\0"+
    "\2\47\1\221\5\47\21\0\26\47\1\0\2\47\1\0"+
    "\4\47\3\0\4\47\1\222\3\47\21\0\26\47\1\0"+
    "\2\47\1\0\4\47\3\0\10\47\21\0\10\47\1\223"+
    "\15\47\1\0\2\47\1\0\4\47\3\0\7\47\1\161"+
    "\21\0\1\224\25\47\1\0\2\47\1\0\2\47\1\225"+
    "\1\47\3\0\10\47\21\0\26\47\1\0\2\47\1\0"+
    "\4\47\3\0\10\47\21\0\10\47\1\226\15\47\1\0"+
    "\2\47\1\0\4\47\3\0\2\47\1\227\5\47\21\0"+
    "\26\47\2\0\1\111\1\53\2\0\1\152\53\0\7\111"+
    "\3\0\1\53\57\0\7\53\1\0\23\113\1\0\5\113"+
    "\3\0\36\113\27\0\1\230\43\0\2\47\1\0\4\47"+
    "\3\0\10\47\21\0\1\47\1\231\24\47\1\0\2\47"+
    "\1\0\4\47\3\0\10\47\21\0\4\47\1\232\21\47"+
    "\1\0\2\47\1\0\4\47\3\0\10\47\21\0\6\47"+
    "\1\233\17\47\1\0\2\47\1\0\4\47\3\0\2\47"+
    "\1\234\5\47\21\0\7\47\1\235\16\47\1\0\2\47"+
    "\1\0\4\47\3\0\3\47\1\236\4\47\21\0\26\47"+
    "\1\0\2\47\1\0\4\47\3\0\10\47\21\0\4\47"+
    "\1\237\21\47\1\0\2\47\1\0\4\47\3\0\10\47"+
    "\21\0\1\240\25\47\1\0\2\47\1\0\4\47\3\0"+
    "\10\47\21\0\1\156\25\47\1\0\2\47\1\0\4\47"+
    "\3\0\10\47\21\0\4\47\1\241\21\47\1\0\2\47"+
    "\1\0\4\47\3\0\2\47\1\242\5\47\21\0\26\47"+
    "\1\0\2\47\1\0\4\47\3\0\4\47\1\243\3\47"+
    "\21\0\26\47\1\0\2\47\1\0\4\47\3\0\10\47"+
    "\21\0\12\47\1\244\13\47\1\0\2\47\1\0\4\47"+
    "\3\0\10\47\21\0\12\47\1\245\13\47\1\0\2\47"+
    "\1\0\4\47\3\0\10\47\21\0\1\47\1\246\24\47"+
    "\1\0\2\47\1\0\4\47\3\0\2\47\1\247\5\47"+
    "\21\0\26\47\1\0\2\47\1\0\4\47\3\0\10\47"+
    "\21\0\10\47\1\250\15\47\1\0\2\47\1\0\4\47"+
    "\3\0\1\251\7\47\21\0\26\47\1\0\2\47\1\0"+
    "\4\47\3\0\10\47\21\0\6\47\1\252\17\47\1\0"+
    "\2\47\1\0\4\47\3\0\10\47\21\0\1\253\25\47"+
    "\1\0\2\47\1\0\4\47\3\0\10\47\21\0\10\47"+
    "\1\254\15\47\1\0\2\47\1\0\2\47\1\255\1\47"+
    "\3\0\10\47\21\0\10\47\1\256\15\47\1\0\22\25"+
    "\1\0\4\25\3\0\10\25\1\0\26\25\1\0\22\25"+
    "\1\0\4\25\3\0\7\25\1\257\1\0\26\25\1\0"+
    "\22\25\1\0\3\25\1\257\3\0\7\25\1\257\1\0"+
    "\26\25\1\0\22\25\1\0\4\25\3\0\3\25\1\257"+
    "\3\25\1\257\1\0\26\25\1\0\22\25\1\0\4\25"+
    "\3\0\4\25\1\257\2\25\1\257\1\0\26\25\1\0"+
    "\22\25\1\0\4\25\3\0\5\25\1\257\2\25\1\0"+
    "\26\25\1\0\22\25\1\0\4\25\3\0\6\25\1\257"+
    "\1\25\1\0\26\25\2\0\1\153\21\0\1\154\35\0"+
    "\7\153\3\0\1\153\57\0\7\153\2\0\2\47\1\0"+
    "\4\47\1\260\1\261\1\0\10\47\21\0\26\47\1\0"+
    "\2\47\1\0\4\47\3\0\3\47\1\233\4\47\21\0"+
    "\26\47\1\0\2\47\1\0\4\47\3\0\10\47\21\0"+
    "\11\47\1\116\14\47\1\0\2\47\1\0\2\47\1\262"+
    "\1\47\3\0\10\47\21\0\26\47\1\0\2\47\1\0"+
    "\2\47\1\116\1\47\3\0\10\47\21\0\26\47\10\162"+
    "\1\65\1\162\1\263\10\162\1\65\56\162\1\65\1\162"+
    "\1\263\6\162\1\264\1\162\1\65\46\162\10\165\1\63"+
    "\1\165\1\265\10\165\1\65\56\165\1\266\1\165\1\265"+
    "\10\165\1\65\46\165\10\162\1\65\1\162\1\263\6\162"+
    "\1\267\1\162\1\65\46\162\1\62\7\270\1\271\1\270"+
    "\1\272\10\270\1\65\4\270\3\62\10\270\1\62\26\270"+
    "\1\62\7\270\1\271\1\270\1\272\10\270\1\65\4\270"+
    "\3\62\7\270\1\273\1\62\26\270\1\62\7\270\1\271"+
    "\1\270\1\272\10\270\1\65\3\270\1\273\3\62\7\270"+
    "\1\273\1\62\26\270\1\62\7\270\1\271\1\270\1\272"+
    "\10\270\1\65\4\270\3\62\3\270\1\273\3\270\1\273"+
    "\1\62\26\270\1\62\7\270\1\271\1\270\1\272\10\270"+
    "\1\65\4\270\3\62\4\270\1\273\2\270\1\273\1\62"+
    "\26\270\1\62\7\270\1\271\1\270\1\272\10\270\1\65"+
    "\4\270\3\62\5\270\1\273\2\270\1\62\26\270\1\62"+
    "\7\270\1\271\1\270\1\272\10\270\1\65\4\270\3\62"+
    "\6\270\1\273\1\270\1\62\26\270\11\177\1\65\1\274"+
    "\10\177\1\65\57\177\1\65\1\274\6\177\1\275\1\177"+
    "\1\65\46\177\11\201\1\63\1\276\10\201\1\65\57\201"+
    "\1\277\1\276\10\201\1\65\46\201\11\177\1\65\1\274"+
    "\6\177\1\300\1\177\1\65\46\177\1\67\10\301\1\271"+
    "\1\302\10\301\1\65\4\301\3\67\10\301\1\67\26\301"+
    "\1\67\10\301\1\271\1\302\10\301\1\65\4\301\3\67"+
    "\7\301\1\303\1\67\26\301\1\67\10\301\1\271\1\302"+
    "\10\301\1\65\3\301\1\303\3\67\7\301\1\303\1\67"+
    "\26\301\1\67\10\301\1\271\1\302\10\301\1\65\4\301"+
    "\3\67\3\301\1\303\3\301\1\303\1\67\26\301\1\67"+
    "\10\301\1\271\1\302\10\301\1\65\4\301\3\67\4\301"+
    "\1\303\2\301\1\303\1\67\26\301\1\67\10\301\1\271"+
    "\1\302\10\301\1\65\4\301\3\67\5\301\1\303\2\301"+
    "\1\67\26\301\1\67\10\301\1\271\1\302\10\301\1\65"+
    "\4\301\3\67\6\301\1\303\1\301\1\67\26\301\1\0"+
    "\2\47\1\0\4\47\3\0\10\47\21\0\1\304\25\47"+
    "\1\0\2\47\1\0\4\47\3\0\10\47\21\0\1\305"+
    "\25\47\1\0\2\47\1\0\4\47\3\0\10\47\21\0"+
    "\4\47\1\116\21\47\1\0\2\47\1\0\2\47\1\306"+
    "\1\47\3\0\10\47\21\0\26\47\1\0\2\47\1\0"+
    "\4\47\3\0\10\47\21\0\7\47\1\307\16\47\1\0"+
    "\2\47\1\0\4\47\3\0\2\47\1\310\5\47\21\0"+
    "\26\47\1\0\2\47\1\0\4\47\3\0\7\47\1\311"+
    "\21\0\26\47\1\0\2\47\1\0\4\47\3\0\10\47"+
    "\21\0\2\47\1\116\23\47\1\0\2\47\1\0\4\47"+
    "\3\0\2\47\1\312\5\47\21\0\26\47\1\0\2\47"+
    "\1\0\4\47\3\0\10\47\21\0\15\47\1\116\10\47"+
    "\1\0\2\47\1\0\3\47\1\313\3\0\10\47\21\0"+
    "\26\47\1\0\2\47\1\0\4\47\3\0\4\47\1\314"+
    "\3\47\21\0\26\47\23\230\1\315\3\230\1\316\42\230"+
    "\1\0\2\47\1\0\4\47\3\0\3\47\1\317\4\47"+
    "\21\0\26\47\1\0\2\47\1\0\2\47\1\320\1\47"+
    "\3\0\10\47\21\0\26\47\1\0\2\47\1\0\4\47"+
    "\3\0\10\47\21\0\2\47\1\256\23\47\1\0\2\47"+
    "\1\0\4\47\3\0\10\47\21\0\1\47\1\321\24\47"+
    "\1\0\2\47\1\0\4\47\3\0\10\47\21\0\3\47"+
    "\1\322\22\47\1\0\2\47\1\0\4\47\3\0\7\47"+
    "\1\323\21\0\10\47\1\324\15\47\1\0\2\47\1\0"+
    "\4\47\3\0\10\47\21\0\10\47\1\325\15\47\1\0"+
    "\2\47\1\0\4\47\3\0\1\326\7\47\21\0\26\47"+
    "\1\0\2\47\1\0\4\47\3\0\10\47\21\0\4\47"+
    "\1\327\21\47\1\0\2\47\1\0\4\47\3\0\4\47"+
    "\1\330\3\47\21\0\2\47\1\331\23\47\1\0\2\47"+
    "\1\0\2\47\1\332\1\47\3\0\10\47\21\0\26\47"+
    "\1\0\2\47\1\0\4\47\3\0\10\47\21\0\3\47"+
    "\1\333\22\47\1\0\2\47\1\0\4\47\3\0\10\47"+
    "\21\0\12\47\1\334\13\47\1\0\2\47\1\0\4\47"+
    "\3\0\10\47\21\0\10\47\1\335\15\47\1\0\2\47"+
    "\1\0\4\47\3\0\7\47\1\336\21\0\26\47\1\0"+
    "\2\47\1\0\4\47\3\0\5\47\1\337\2\47\21\0"+
    "\26\47\1\0\2\47\1\0\4\47\3\0\10\47\21\0"+
    "\4\47\1\340\21\47\1\0\2\47\1\0\4\47\3\0"+
    "\10\47\21\0\1\341\25\47\1\0\2\47\1\0\4\47"+
    "\3\0\10\47\21\0\13\47\1\342\12\47\1\0\2\47"+
    "\1\0\4\47\3\0\10\47\21\0\4\47\1\161\21\47"+
    "\1\0\2\47\1\0\4\47\3\0\10\47\21\0\5\47"+
    "\1\233\20\47\1\0\22\25\1\0\1\343\3\25\3\0"+
    "\10\25\1\0\26\25\2\344\1\345\1\344\1\345\1\344"+
    "\1\345\4\344\2\345\27\344\2\345\5\344\1\345\6\344"+
    "\7\345\1\344\2\346\1\347\1\346\1\347\1\346\1\347"+
    "\4\346\2\347\27\346\2\347\5\346\1\347\6\346\7\347"+
    "\1\346\1\0\2\47\1\0\4\47\3\0\3\47\1\256"+
    "\4\47\21\0\26\47\12\162\1\263\10\162\1\65\56\162"+
    "\1\65\1\162\1\263\6\162\1\165\1\162\1\65\55\162"+
    "\1\163\2\165\1\166\6\165\1\162\1\167\57\162\1\65"+
    "\1\162\1\263\6\162\1\163\1\162\1\65\55\162\1\163"+
    "\1\164\1\165\1\166\6\165\1\162\1\167\1\162\1\350"+
    "\45\162\1\62\7\270\1\271\1\270\1\272\10\270\1\65"+
    "\1\351\3\270\3\62\10\270\1\62\26\270\12\177\1\274"+
    "\10\177\1\65\57\177\1\65\1\274\6\177\1\201\1\177"+
    "\1\65\55\177\1\200\2\201\1\203\6\201\1\177\1\204"+
    "\60\177\1\65\1\274\6\177\1\200\1\177\1\65\55\177"+
    "\1\200\1\201\1\202\1\203\6\201\1\177\1\204\1\177"+
    "\1\352\45\177\1\67\10\301\1\271\1\302\10\301\1\65"+
    "\1\353\3\301\3\67\10\301\1\67\26\301\1\0\2\47"+
    "\1\0\4\47\3\0\10\47\21\0\5\47\1\116\20\47"+
    "\1\0\2\47\1\0\4\47\3\0\2\47\1\354\5\47"+
    "\21\0\26\47\1\0\2\47\1\0\4\47\3\0\10\47"+
    "\21\0\2\47\1\355\23\47\1\0\2\47\1\0\4\47"+
    "\3\0\4\47\1\356\3\47\21\0\26\47\1\0\2\47"+
    "\1\0\2\47\1\357\1\47\3\0\10\47\21\0\26\47"+
    "\1\0\2\47\1\0\4\47\3\0\3\47\1\360\4\47"+
    "\21\0\26\47\1\0\2\47\1\0\4\47\3\0\10\47"+
    "\21\0\2\47\1\361\23\47\1\0\2\47\1\0\2\47"+
    "\1\362\1\47\3\0\10\47\21\0\26\47\1\0\2\47"+
    "\1\0\4\47\3\0\10\47\21\0\16\47\1\116\1\363"+
    "\1\364\1\365\1\366\3\47\23\367\1\370\2\367\1\0"+
    "\1\316\1\371\41\367\23\230\1\315\2\230\1\63\1\316"+
    "\42\230\1\0\2\47\1\0\2\47\1\372\1\47\3\0"+
    "\10\47\21\0\26\47\1\0\2\47\1\0\4\47\3\0"+
    "\4\47\1\161\3\47\21\0\13\47\1\373\12\47\1\0"+
    "\2\47\1\0\4\47\3\0\2\47\1\374\5\47\21\0"+
    "\26\47\1\0\2\47\1\0\4\47\3\0\10\47\21\0"+
    "\7\47\1\375\16\47\1\0\2\47\1\0\4\47\3\0"+
    "\2\47\1\376\5\47\21\0\26\47\1\0\2\47\1\0"+
    "\4\47\3\0\10\47\21\0\1\47\1\377\24\47\1\0"+
    "\2\47\1\0\4\47\3\0\10\47\21\0\3\47\1\256"+
    "\22\47\1\0\2\47\1\0\4\47\3\0\10\47\21\0"+
    "\7\47\1\u0100\16\47\1\0\2\47\1\0\4\47\3\0"+
    "\3\47\1\u0101\4\47\21\0\10\47\1\u0102\15\47\1\0"+
    "\2\47\1\0\4\47\3\0\4\47\1\u0103\3\47\21\0"+
    "\26\47\1\0\2\47\1\0\4\47\3\0\3\47\1\u0104"+
    "\4\47\21\0\26\47\1\0\2\47\1\0\4\47\3\0"+
    "\3\47\1\375\4\47\21\0\26\47\1\0\2\47\1\0"+
    "\4\47\3\0\10\47\21\0\10\47\1\324\15\47\1\0"+
    "\2\47\1\0\4\47\3\0\1\47\1\u0105\6\47\21\0"+
    "\26\47\1\0\2\47\1\0\4\47\3\0\4\47\1\u0106"+
    "\3\47\21\0\26\47\1\0\2\47\1\0\4\47\3\0"+
    "\10\47\21\0\1\u0107\25\47\1\0\2\47\1\0\4\47"+
    "\3\0\10\47\21\0\10\47\1\u0108\15\47\1\0\2\47"+
    "\1\0\4\47\3\0\1\254\7\47\21\0\26\47\1\0"+
    "\2\47\1\0\4\47\3\0\10\47\21\0\11\47\1\u0109"+
    "\14\47\3\0\1\143\20\0\1\u010a\1\0\1\144\1\145"+
    "\4\0\1\144\1\143\1\146\1\147\1\150\1\151\1\144"+
    "\1\143\26\0\2\344\1\u010b\1\344\1\u010b\1\344\1\u010b"+
    "\1\344\1\u010c\2\344\2\u010b\27\344\2\u010b\5\344\1\u010b"+
    "\6\344\7\u010b\3\344\1\345\1\344\1\345\1\344\1\345"+
    "\1\344\1\u010d\2\344\2\345\27\344\2\345\5\344\1\345"+
    "\6\344\7\345\1\344\2\346\1\u010e\1\346\1\u010e\1\346"+
    "\1\u010e\2\346\1\u010f\1\346\2\u010e\27\346\2\u010e\5\346"+
    "\1\u010e\6\346\7\u010e\3\346\1\347\1\346\1\347\1\346"+
    "\1\347\2\346\1\u0110\1\346\2\347\27\346\2\347\5\346"+
    "\1\347\6\346\7\347\1\346\3\162\1\u0111\4\162\1\65"+
    "\1\162\1\263\10\162\1\65\1\u0112\1\162\1\u0112\1\u0113"+
    "\4\162\1\u0112\1\u0111\1\u0114\1\u0115\1\u0116\1\u0117\1\u0112"+
    "\1\u0111\26\162\3\62\1\170\4\62\1\63\1\62\1\64"+
    "\10\62\1\65\1\u0118\1\62\1\171\1\172\4\62\1\171"+
    "\1\170\1\173\1\174\1\175\1\176\1\171\1\170\26\62"+
    "\3\177\1\u0119\5\177\1\65\1\274\10\177\1\65\1\u011a"+
    "\1\177\1\u011a\1\u011b\4\177\1\u011a\1\u0119\1\u011c\1\u011d"+
    "\1\u011e\1\u011f\1\u011a\1\u0119\26\177\3\67\1\205\5\67"+
    "\1\63\1\70\10\67\1\65\1\u0120\1\67\1\206\1\207"+
    "\4\67\1\206\1\205\1\210\1\211\1\212\1\213\1\206"+
    "\1\205\26\67\1\0\2\47\1\0\4\47\3\0\10\47"+
    "\21\0\7\47\1\u0121\16\47\1\0\2\47\1\0\4\47"+
    "\3\0\10\47\21\0\10\47\1\u0122\15\47\1\0\2\47"+
    "\1\0\4\47\3\0\10\47\21\0\6\47\1\256\17\47"+
    "\1\0\2\47\1\0\4\47\3\0\2\47\1\u0123\5\47"+
    "\21\0\26\47\1\0\2\47\1\0\4\47\3\0\1\47"+
    "\1\u0124\6\47\21\0\26\47\1\0\2\47\1\0\4\47"+
    "\3\0\10\47\21\0\1\47\1\116\24\47\1\0\2\47"+
    "\1\0\4\47\3\0\10\47\21\0\20\47\1\116\1\47"+
    "\1\u0125\3\47\1\0\2\47\1\0\4\47\3\0\10\47"+
    "\21\0\23\47\1\116\2\47\1\0\2\47\1\0\4\47"+
    "\3\0\10\47\21\0\22\47\1\116\3\47\1\0\2\47"+
    "\1\0\4\47\3\0\10\47\21\0\24\47\1\u0126\1\47"+
    "\23\367\1\370\3\367\1\370\1\367\3\u0127\61\367\1\370"+
    "\2\367\1\u0128\1\370\1\367\3\u0127\61\367\1\370\2\367"+
    "\1\u0127\1\316\1\371\41\367\1\0\2\47\1\0\4\47"+
    "\3\0\10\47\21\0\2\47\1\223\23\47\1\0\2\47"+
    "\1\0\4\47\3\0\10\47\21\0\1\u0129\25\47\1\0"+
    "\2\47\1\0\4\47\3\0\10\47\21\0\1\47\1\233"+
    "\24\47\1\0\2\47\1\0\4\47\3\0\4\47\1\116"+
    "\3\47\21\0\26\47\1\0\2\47\1\0\4\47\3\0"+
    "\10\47\21\0\13\47\1\116\12\47\1\0\2\47\1\0"+
    "\4\47\3\0\10\47\21\0\10\47\1\u012a\15\47\1\0"+
    "\2\47\1\0\4\47\3\0\10\47\21\0\3\47\1\u012b"+
    "\22\47\1\0\2\47\1\0\4\47\3\0\10\47\21\0"+
    "\1\323\25\47\1\0\2\47\1\0\4\47\3\0\2\47"+
    "\1\u012c\5\47\21\0\26\47\1\0\2\47\1\0\4\47"+
    "\3\0\3\47\1\u012d\4\47\21\0\26\47\1\0\2\47"+
    "\1\0\4\47\3\0\2\47\1\u012e\5\47\21\0\26\47"+
    "\1\0\2\47\1\0\4\47\3\0\10\47\21\0\10\47"+
    "\1\u012f\15\47\1\0\2\47\1\0\2\47\1\233\1\47"+
    "\3\0\10\47\21\0\26\47\1\0\2\47\1\0\4\47"+
    "\3\0\4\47\1\161\3\47\21\0\26\47\1\0\2\47"+
    "\1\0\4\47\3\0\10\47\21\0\7\47\1\116\16\47"+
    "\1\0\2\47\1\0\4\47\3\0\10\47\21\0\1\116"+
    "\25\47\1\0\2\25\1\257\17\25\1\0\1\u0130\1\25"+
    "\1\u0130\1\u0131\3\0\1\25\1\u0130\1\257\1\u0132\1\u0133"+
    "\1\u0134\1\u0135\1\u0130\1\143\26\25\2\0\1\u010b\1\0"+
    "\1\u010b\1\0\1\u010b\1\0\1\u0136\2\0\2\u010b\27\0"+
    "\2\u010b\5\0\1\u010b\6\0\7\u010b\3\0\1\u010e\1\0"+
    "\1\u010e\1\0\1\u010e\2\0\1\u0136\1\0\2\u010e\27\0"+
    "\2\u010e\5\0\1\u010e\6\0\7\u010e\1\0\1\162\7\u0137"+
    "\1\u0138\1\u0137\1\u0139\10\u0137\1\65\4\u0137\3\162\10\u0137"+
    "\1\162\26\u0137\1\162\7\u0137\1\u0138\1\u0137\1\u0139\10\u0137"+
    "\1\65\4\u0137\3\162\7\u0137\1\u013a\1\162\26\u0137\1\162"+
    "\7\u0137\1\u0138\1\u0137\1\u0139\10\u0137\1\65\3\u0137\1\u013a"+
    "\3\162\7\u0137\1\u013a\1\162\26\u0137\1\162\7\u0137\1\u0138"+
    "\1\u0137\1\u0139\10\u0137\1\65\4\u0137\3\162\3\u0137\1\u013a"+
    "\3\u0137\1\u013a\1\162\26\u0137\1\162\7\u0137\1\u0138\1\u0137"+
    "\1\u0139\10\u0137\1\65\4\u0137\3\162\4\u0137\1\u013a\2\u0137"+
    "\1\u013a\1\162\26\u0137\1\162\7\u0137\1\u0138\1\u0137\1\u0139"+
    "\10\u0137\1\65\4\u0137\3\162\5\u0137\1\u013a\2\u0137\1\162"+
    "\26\u0137\1\162\7\u0137\1\u0138\1\u0137\1\u0139\10\u0137\1\65"+
    "\4\u0137\3\162\6\u0137\1\u013a\1\u0137\1\162\26\u0137\1\62"+
    "\2\270\1\273\4\270\1\271\1\270\1\272\10\270\1\65"+
    "\1\u013b\1\270\1\u013b\1\u013c\3\62\1\270\1\u013b\1\273"+
    "\1\u013d\1\u013e\1\u013f\1\u0140\1\u013b\1\170\26\270\1\177"+
    "\10\u0141\1\u0138\1\u0142\10\u0141\1\65\4\u0141\3\177\10\u0141"+
    "\1\177\26\u0141\1\177\10\u0141\1\u0138\1\u0142\10\u0141\1\65"+
    "\4\u0141\3\177\7\u0141\1\u0143\1\177\26\u0141\1\177\10\u0141"+
    "\1\u0138\1\u0142\10\u0141\1\65\3\u0141\1\u0143\3\177\7\u0141"+
    "\1\u0143\1\177\26\u0141\1\177\10\u0141\1\u0138\1\u0142\10\u0141"+
    "\1\65\4\u0141\3\177\3\u0141\1\u0143\3\u0141\1\u0143\1\177"+
    "\26\u0141\1\177\10\u0141\1\u0138\1\u0142\10\u0141\1\65\4\u0141"+
    "\3\177\4\u0141\1\u0143\2\u0141\1\u0143\1\177\26\u0141\1\177"+
    "\10\u0141\1\u0138\1\u0142\10\u0141\1\65\4\u0141\3\177\5\u0141"+
    "\1\u0143\2\u0141\1\177\26\u0141\1\177\10\u0141\1\u0138\1\u0142"+
    "\10\u0141\1\65\4\u0141\3\177\6\u0141\1\u0143\1\u0141\1\177"+
    "\26\u0141\1\67\2\301\1\303\5\301\1\271\1\302\10\301"+
    "\1\65\1\u0144\1\301\1\u0144\1\u0145\3\67\1\301\1\u0144"+
    "\1\303\1\u0146\1\u0147\1\u0148\1\u0149\1\u0144\1\205\26\301"+
    "\1\0\2\47\1\0\2\47\1\321\1\47\3\0\10\47"+
    "\21\0\26\47\1\0\2\47\1\0\4\47\3\0\10\47"+
    "\21\0\3\47\1\u014a\22\47\1\0\2\47\1\0\2\47"+
    "\1\u014b\1\47\3\0\10\47\21\0\26\47\1\0\2\47"+
    "\1\0\4\47\3\0\10\47\21\0\16\47\1\116\7\47"+
    "\1\0\2\47\1\0\4\47\3\0\10\47\21\0\20\47"+
    "\1\116\5\47\23\u0127\1\u014c\3\u0127\1\u014d\42\u0127\31\u0128"+
    "\3\0\36\u0128\1\0\2\47\1\0\4\47\3\0\4\47"+
    "\1\u014e\3\47\21\0\26\47\1\0\2\47\1\0\4\47"+
    "\3\0\4\47\1\u014f\3\47\21\0\26\47\1\0\2\47"+
    "\1\0\4\47\3\0\10\47\21\0\1\47\1\u0121\24\47"+
    "\1\0\2\47\1\0\4\47\3\0\7\47\1\161\21\0"+
    "\26\47\1\0\2\47\1\0\4\47\3\0\7\47\1\u0150"+
    "\21\0\26\47\1\0\2\47\1\0\4\47\3\0\10\47"+
    "\21\0\1\216\25\47\1\0\2\47\1\0\2\47\1\101"+
    "\1\47\3\0\10\47\21\0\26\47\1\0\22\25\1\0"+
    "\1\343\3\25\3\0\7\25\1\257\1\0\26\25\1\0"+
    "\22\25\1\0\1\343\2\25\1\257\3\0\7\25\1\257"+
    "\1\0\26\25\1\0\22\25\1\0\1\343\3\25\3\0"+
    "\3\25\1\257\3\25\1\257\1\0\26\25\1\0\22\25"+
    "\1\0\1\343\3\25\3\0\4\25\1\257\2\25\1\257"+
    "\1\0\26\25\1\0\22\25\1\0\1\343\3\25\3\0"+
    "\5\25\1\257\2\25\1\0\26\25\1\0\22\25\1\0"+
    "\1\343\3\25\3\0\6\25\1\257\1\25\1\0\26\25"+
    "\10\162\1\65\1\162\1\263\10\162\1\65\1\350\57\162"+
    "\1\263\10\162\1\65\1\350\46\162\7\u0137\1\u0138\1\u0137"+
    "\1\u0139\10\u0137\1\65\1\u0151\3\u0137\3\162\10\u0137\1\162"+
    "\26\u0137\1\62\7\270\1\271\1\270\1\272\10\270\1\65"+
    "\1\351\3\270\3\62\7\270\1\273\1\62\26\270\1\62"+
    "\7\270\1\271\1\270\1\272\10\270\1\65\1\351\2\270"+
    "\1\273\3\62\7\270\1\273\1\62\26\270\1\62\7\270"+
    "\1\271\1\270\1\272\10\270\1\65\1\351\3\270\3\62"+
    "\3\270\1\273\3\270\1\273\1\62\26\270\1\62\7\270"+
    "\1\271\1\270\1\272\10\270\1\65\1\351\3\270\3\62"+
    "\4\270\1\273\2\270\1\273\1\62\26\270\1\62\7\270"+
    "\1\271\1\270\1\272\10\270\1\65\1\351\3\270\3\62"+
    "\5\270\1\273\2\270\1\62\26\270\1\62\7\270\1\271"+
    "\1\270\1\272\10\270\1\65\1\351\3\270\3\62\6\270"+
    "\1\273\1\270\1\62\26\270\11\177\1\65\1\274\10\177"+
    "\1\65\1\352\57\177\1\274\10\177\1\65\1\352\46\177"+
    "\10\u0141\1\u0138\1\u0142\10\u0141\1\65\1\u0152\3\u0141\3\177"+
    "\10\u0141\1\177\26\u0141\1\67\10\301\1\271\1\302\10\301"+
    "\1\65\1\353\3\301\3\67\7\301\1\303\1\67\26\301"+
    "\1\67\10\301\1\271\1\302\10\301\1\65\1\353\2\301"+
    "\1\303\3\67\7\301\1\303\1\67\26\301\1\67\10\301"+
    "\1\271\1\302\10\301\1\65\1\353\3\301\3\67\3\301"+
    "\1\303\3\301\1\303\1\67\26\301\1\67\10\301\1\271"+
    "\1\302\10\301\1\65\1\353\3\301\3\67\4\301\1\303"+
    "\2\301\1\303\1\67\26\301\1\67\10\301\1\271\1\302"+
    "\10\301\1\65\1\353\3\301\3\67\5\301\1\303\2\301"+
    "\1\67\26\301\1\67\10\301\1\271\1\302\10\301\1\65"+
    "\1\353\3\301\3\67\6\301\1\303\1\301\1\67\26\301"+
    "\1\0\2\47\1\0\4\47\3\0\2\47\1\116\5\47"+
    "\21\0\26\47\1\0\2\47\1\0\4\47\3\0\3\47"+
    "\1\321\4\47\21\0\26\47\23\u0127\1\u014c\2\u0127\1\0"+
    "\1\u014d\1\u0153\64\u0127\1\u014c\2\u0127\1\0\1\u014d\42\u0127"+
    "\1\0\2\47\1\0\2\47\1\u0154\1\47\3\0\10\47"+
    "\21\0\26\47\1\0\2\47\1\0\4\47\3\0\10\47"+
    "\21\0\6\47\1\116\17\47\1\0\2\47\1\0\4\47"+
    "\3\0\10\47\21\0\7\47\1\u0155\16\47\3\162\1\u0111"+
    "\4\162\1\65\1\162\1\263\10\162\1\65\1\u0156\1\162"+
    "\1\u0112\1\u0113\4\162\1\u0112\1\u0111\1\u0114\1\u0115\1\u0116"+
    "\1\u0117\1\u0112\1\u0111\26\162\3\177\1\u0119\5\177\1\65"+
    "\1\274\10\177\1\65\1\u0157\1\177\1\u011a\1\u011b\4\177"+
    "\1\u011a\1\u0119\1\u011c\1\u011d\1\u011e\1\u011f\1\u011a\1\u0119"+
    "\26\177\23\u0127\1\u014c\3\u0127\1\u014d\1\u0153\41\u0127\1\0"+
    "\2\47\1\0\4\47\3\0\10\47\21\0\7\47\1\u0158"+
    "\16\47\1\0\2\47\1\0\4\47\3\0\4\47\1\u0159"+
    "\3\47\21\0\26\47\1\162\2\u0137\1\u013a\4\u0137\1\u0138"+
    "\1\u0137\1\u0139\10\u0137\1\65\1\u015a\1\u0137\1\u015a\1\u015b"+
    "\3\162\1\u0137\1\u015a\1\u013a\1\u015c\1\u015d\1\u015e\1\u015f"+
    "\1\u015a\1\u0111\26\u0137\1\177\2\u0141\1\u0143\5\u0141\1\u0138"+
    "\1\u0142\10\u0141\1\65\1\u0160\1\u0141\1\u0160\1\u0161\3\177"+
    "\1\u0141\1\u0160\1\u0143\1\u0162\1\u0163\1\u0164\1\u0165\1\u0160"+
    "\1\u0119\26\u0141\1\0\2\47\1\0\4\47\3\0\10\47"+
    "\21\0\1\u0166\25\47\1\0\2\47\1\0\4\47\3\0"+
    "\10\47\21\0\3\47\1\101\22\47\1\162\7\u0137\1\u0138"+
    "\1\u0137\1\u0139\10\u0137\1\65\1\u0151\3\u0137\3\162\7\u0137"+
    "\1\u013a\1\162\26\u0137\1\162\7\u0137\1\u0138\1\u0137\1\u0139"+
    "\10\u0137\1\65\1\u0151\2\u0137\1\u013a\3\162\7\u0137\1\u013a"+
    "\1\162\26\u0137\1\162\7\u0137\1\u0138\1\u0137\1\u0139\10\u0137"+
    "\1\65\1\u0151\3\u0137\3\162\3\u0137\1\u013a\3\u0137\1\u013a"+
    "\1\162\26\u0137\1\162\7\u0137\1\u0138\1\u0137\1\u0139\10\u0137"+
    "\1\65\1\u0151\3\u0137\3\162\4\u0137\1\u013a\2\u0137\1\u013a"+
    "\1\162\26\u0137\1\162\7\u0137\1\u0138\1\u0137\1\u0139\10\u0137"+
    "\1\65\1\u0151\3\u0137\3\162\5\u0137\1\u013a\2\u0137\1\162"+
    "\26\u0137\1\162\7\u0137\1\u0138\1\u0137\1\u0139\10\u0137\1\65"+
    "\1\u0151\3\u0137\3\162\6\u0137\1\u013a\1\u0137\1\162\26\u0137"+
    "\1\177\10\u0141\1\u0138\1\u0142\10\u0141\1\65\1\u0152\3\u0141"+
    "\3\177\7\u0141\1\u0143\1\177\26\u0141\1\177\10\u0141\1\u0138"+
    "\1\u0142\10\u0141\1\65\1\u0152\2\u0141\1\u0143\3\177\7\u0141"+
    "\1\u0143\1\177\26\u0141\1\177\10\u0141\1\u0138\1\u0142\10\u0141"+
    "\1\65\1\u0152\3\u0141\3\177\3\u0141\1\u0143\3\u0141\1\u0143"+
    "\1\177\26\u0141\1\177\10\u0141\1\u0138\1\u0142\10\u0141\1\65"+
    "\1\u0152\3\u0141\3\177\4\u0141\1\u0143\2\u0141\1\u0143\1\177"+
    "\26\u0141\1\177\10\u0141\1\u0138\1\u0142\10\u0141\1\65\1\u0152"+
    "\3\u0141\3\177\5\u0141\1\u0143\2\u0141\1\177\26\u0141\1\177"+
    "\10\u0141\1\u0138\1\u0142\10\u0141\1\65\1\u0152\3\u0141\3\177"+
    "\6\u0141\1\u0143\1\u0141\1\177\26\u0141\1\0\2\47\1\0"+
    "\4\47\3\0\10\47\21\0\4\47\1\u0167\21\47\1\0"+
    "\2\47\1\0\4\47\3\0\10\47\21\0\4\47\1\321"+
    "\21\47";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19372];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\16\1\1\11\3\1\1\0\6\1\1\11"+
    "\13\1\1\0\11\1\1\0\1\11\1\1\1\11\2\0"+
    "\1\1\1\0\20\1\1\0\1\1\1\0\35\1\1\0"+
    "\1\1\1\0\103\1\2\0\6\1\1\0\10\1\1\0"+
    "\41\1\5\0\1\1\1\0\1\1\1\0\37\1\1\0"+
    "\2\1\1\0\30\1\1\0\16\1\1\11\61\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[359];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 206) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { lexeme=yytext()+" "+(yyline+1);return ERROR_CARACTERES_NO_VALIDOS;
            }
          case 13: break;
          case 2: 
            { lexeme=yytext()+" "+(yyline+1); return IDENTIFICADOR;
            }
          case 14: break;
          case 3: 
            { lexeme=yytext()+" "+(yyline+1); return LITERAL;
            }
          case 15: break;
          case 4: 
            { lexeme=yytext()+" "+(yyline+1); return OPERADOR;
            }
          case 16: break;
          case 5: 
            { /* ignore */
            }
          case 17: break;
          case 6: 
            { lexeme=yytext()+" "+(yyline+1);return ERROR_IDENTIFICADOR;
            }
          case 18: break;
          case 7: 
            { lexeme=yytext()+" "+(yyline+1);return ERROR_STRING;
            }
          case 19: break;
          case 8: 
            { lexeme=yytext()+" "+(yyline+1); return PALABRA_RESERVADA;
            }
          case 20: break;
          case 9: 
            { lexeme=yytext()+" "+(yyline+1);return ERROR_COMENTARIO;
            }
          case 21: break;
          case 10: 
            { lexeme=yytext()+" "+(yyline+1); return UNIDAD;
            }
          case 22: break;
          case 11: 
            { lexeme=yytext()+" "+(yyline+1); return TRANSAC;
            }
          case 23: break;
          case 12: 
            { lexeme=yytext()+" "+(yyline+1);return ERROR_HEXADECIMAL;
            }
          case 24: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
