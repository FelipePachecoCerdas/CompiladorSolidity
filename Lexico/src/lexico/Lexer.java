/* The following code was generated by JFlex 1.6.1 */

package lexico;
import static lexico.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/lexico/lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\66\1\16\1\20\1\20\1\17\22\0\1\14\1\21\1\11"+
    "\2\0\1\22\1\25\1\12\1\22\1\22\1\27\1\21\1\22\1\13"+
    "\1\3\1\15\1\2\1\57\1\62\1\61\1\63\1\64\1\60\1\2"+
    "\1\56\1\2\1\22\1\22\1\23\1\30\1\24\1\22\1\0\6\5"+
    "\11\1\1\53\12\1\1\22\1\0\1\22\1\22\1\4\1\0\1\31"+
    "\1\35\1\43\1\32\1\7\1\50\1\52\1\6\1\46\1\1\1\40"+
    "\1\37\1\47\1\44\1\36\1\51\1\1\1\33\1\34\1\42\1\45"+
    "\1\54\1\55\1\10\1\41\1\65\1\22\1\26\1\22\1\22\6\0"+
    "\1\20\u1fa2\0\1\20\1\20\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\2\2\2\1\1\4"+
    "\1\5\10\4\20\2\1\1\1\3\1\1\5\2\1\0"+
    "\1\3\1\0\2\3\1\0\1\5\1\2\1\6\43\2"+
    "\1\0\1\3\1\0\1\6\27\2\1\6\15\2\1\7"+
    "\1\2\1\0\2\1\5\2\1\10\6\2\1\6\1\2"+
    "\1\10\2\2\1\6\14\2\1\1\2\0\32\2\1\3"+
    "\1\2\1\6\26\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[217];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\u01b8\0\u01ef\0\67\0\u0226\0\u025d\0\67\0\u0294\0\u02cb"+
    "\0\u0302\0\u0339\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483"+
    "\0\u04ba\0\u04f1\0\u0528\0\u055f\0\u0596\0\u05cd\0\u0604\0\u063b"+
    "\0\u0672\0\u06a9\0\u06e0\0\u0717\0\u074e\0\u0785\0\u07bc\0\u07f3"+
    "\0\u082a\0\u0861\0\u0898\0\u0181\0\u0181\0\u01b8\0\u01b8\0\u08cf"+
    "\0\334\0\u0906\0\u093d\0\156\0\u0974\0\u09ab\0\u09e2\0\u0a19"+
    "\0\u0a50\0\u0a87\0\u0abe\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1"+
    "\0\u0c08\0\u0c3f\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b\0\u0d52\0\u0d89"+
    "\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41"+
    "\0\u0f78\0\u0faf\0\u0fe6\0\u101d\0\u1054\0\u108b\0\u10c2\0\u10f9"+
    "\0\u1130\0\u1130\0\u1167\0\u119e\0\u11d5\0\u120c\0\u1243\0\u127a"+
    "\0\u12b1\0\u12e8\0\u131f\0\u1356\0\u138d\0\u13c4\0\u13fb\0\u1432"+
    "\0\u1469\0\u14a0\0\u14d7\0\u150e\0\u1545\0\u157c\0\u15b3\0\u15ea"+
    "\0\u1621\0\u1658\0\u168f\0\u16c6\0\u16fd\0\u1734\0\u176b\0\u17a2"+
    "\0\u17d9\0\u1810\0\u1847\0\u187e\0\u18b5\0\u18ec\0\u1923\0\u195a"+
    "\0\156\0\u1991\0\u19c8\0\u19ff\0\u1a36\0\u1a6d\0\u1aa4\0\u1adb"+
    "\0\u1b12\0\u1b49\0\156\0\u1b80\0\u1bb7\0\u1bee\0\u1c25\0\u1c5c"+
    "\0\u1c93\0\u1cca\0\u1d01\0\u1d38\0\u1d6f\0\u1da6\0\u1ddd\0\u1e14"+
    "\0\u1e4b\0\u1e82\0\u1eb9\0\u1ef0\0\u1f27\0\u1f5e\0\u1f95\0\u1fcc"+
    "\0\u2003\0\u203a\0\u2071\0\u20a8\0\u20df\0\u2116\0\u214d\0\u2184"+
    "\0\u21bb\0\u21f2\0\u2229\0\u2260\0\u2297\0\u22ce\0\u2305\0\u233c"+
    "\0\u2373\0\u23aa\0\u23e1\0\u2418\0\u244f\0\u2486\0\u24bd\0\u24f4"+
    "\0\u252b\0\u2562\0\u2599\0\u25d0\0\u2607\0\u263e\0\u2675\0\u26ac"+
    "\0\67\0\u26e3\0\u1545\0\u271a\0\u2751\0\u2788\0\u27bf\0\u27f6"+
    "\0\u282d\0\u2864\0\u289b\0\u28d2\0\u2909\0\u2940\0\u2977\0\u29ae"+
    "\0\u29e5\0\u2a1c\0\u2a53\0\u2a8a\0\u2ac1\0\u2af8\0\u2b2f\0\u2b66"+
    "\0\u2b9d";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[217];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\2\1\3\1\6\1\7"+
    "\1\3\1\10\1\11\1\12\1\13\1\14\2\13\1\0"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\15"+
    "\1\24\1\25\1\26\1\27\1\30\3\3\1\31\1\32"+
    "\1\33\1\3\1\34\1\35\1\36\1\37\1\40\1\3"+
    "\1\41\1\42\1\43\7\4\1\3\1\13\70\0\2\3"+
    "\2\0\4\3\20\0\35\3\2\0\1\44\1\4\1\45"+
    "\1\0\2\44\1\46\1\44\20\0\25\44\7\4\1\44"+
    "\3\0\1\45\53\0\7\45\3\0\2\3\2\0\2\3"+
    "\1\47\1\3\20\0\5\3\1\50\27\3\2\0\2\3"+
    "\2\0\4\3\20\0\6\3\1\51\2\3\1\52\1\3"+
    "\1\53\21\3\1\0\11\54\1\55\4\54\1\0\47\54"+
    "\1\0\12\56\1\57\3\56\1\0\47\56\3\0\1\60"+
    "\1\61\24\0\1\16\25\0\7\60\17\0\1\62\12\0"+
    "\1\16\66\0\1\16\61\0\1\16\4\0\1\16\62\0"+
    "\1\16\3\0\1\16\63\0\1\16\67\0\1\16\67\0"+
    "\2\16\37\0\2\3\2\0\4\3\20\0\1\3\1\63"+
    "\1\3\1\64\31\3\2\0\2\3\2\0\2\3\1\65"+
    "\1\3\20\0\1\66\4\3\1\64\27\3\2\0\2\3"+
    "\2\0\2\3\1\67\1\3\20\0\35\3\2\0\2\3"+
    "\2\0\2\3\1\70\1\3\20\0\5\3\1\71\3\3"+
    "\1\72\22\3\1\73\2\0\2\3\2\0\4\3\20\0"+
    "\1\74\1\3\1\75\2\3\1\76\2\3\1\77\24\3"+
    "\2\0\2\3\2\0\2\3\1\100\1\3\20\0\35\3"+
    "\2\0\2\3\2\0\1\3\1\101\2\3\20\0\2\3"+
    "\1\102\32\3\2\0\2\3\2\0\4\3\20\0\1\103"+
    "\4\3\1\104\27\3\2\0\2\3\2\0\4\3\20\0"+
    "\15\3\1\105\1\3\1\106\15\3\2\0\2\3\2\0"+
    "\4\3\20\0\13\3\1\107\2\3\1\110\1\64\15\3"+
    "\2\0\2\3\2\0\4\3\20\0\1\111\4\3\1\112"+
    "\7\3\1\113\17\3\2\0\2\3\2\0\4\3\20\0"+
    "\1\114\1\3\1\115\2\3\1\116\6\3\1\117\1\120"+
    "\17\3\2\0\2\3\2\0\4\3\20\0\1\121\1\3"+
    "\1\122\11\3\1\123\20\3\2\0\2\3\2\0\4\3"+
    "\20\0\2\3\1\124\32\3\2\0\2\3\2\0\4\3"+
    "\20\0\1\116\14\3\1\125\17\3\2\0\2\3\2\0"+
    "\1\3\1\126\1\127\1\3\20\0\35\3\2\0\1\44"+
    "\3\0\4\44\20\0\25\44\7\0\1\44\3\0\1\45"+
    "\4\0\1\130\46\0\7\45\3\0\1\44\1\131\2\0"+
    "\4\44\2\0\1\132\15\0\25\44\7\131\1\44\2\0"+
    "\2\3\2\0\3\3\1\133\20\0\35\3\2\0\2\3"+
    "\2\0\4\3\20\0\14\3\1\134\20\3\2\0\2\3"+
    "\2\0\4\3\20\0\3\3\1\135\31\3\2\0\2\3"+
    "\2\0\1\3\1\136\2\3\20\0\35\3\2\0\2\3"+
    "\2\0\4\3\20\0\14\3\1\137\20\3\3\0\1\60"+
    "\1\45\3\0\1\130\46\0\7\60\2\0\16\62\3\0"+
    "\46\62\1\0\2\3\2\0\4\3\20\0\1\3\1\140"+
    "\33\3\2\0\2\3\2\0\4\3\20\0\6\3\1\141"+
    "\26\3\2\0\2\3\2\0\4\3\20\0\10\3\1\142"+
    "\24\3\2\0\2\3\2\0\4\3\20\0\11\3\1\143"+
    "\23\3\2\0\2\3\2\0\4\3\20\0\12\3\1\144"+
    "\1\145\21\3\2\0\2\3\2\0\4\3\20\0\6\3"+
    "\1\146\26\3\2\0\2\3\2\0\4\3\20\0\2\3"+
    "\1\147\32\3\2\0\2\3\2\0\4\3\20\0\1\150"+
    "\34\3\2\0\2\3\2\0\4\3\20\0\6\3\1\151"+
    "\26\3\2\0\2\3\2\0\2\3\1\152\1\3\20\0"+
    "\35\3\2\0\2\3\2\0\4\3\20\0\5\3\1\153"+
    "\27\3\2\0\2\3\2\0\4\3\20\0\11\3\1\154"+
    "\23\3\2\0\2\3\2\0\4\3\20\0\1\134\34\3"+
    "\2\0\2\3\2\0\4\3\20\0\15\3\1\155\17\3"+
    "\2\0\2\3\2\0\4\3\20\0\1\156\13\3\1\135"+
    "\20\3\2\0\2\3\2\0\4\3\20\0\6\3\1\157"+
    "\26\3\2\0\2\3\2\0\4\3\20\0\13\3\1\160"+
    "\21\3\2\0\2\3\2\0\4\3\20\0\13\3\1\161"+
    "\21\3\2\0\2\3\2\0\4\3\20\0\15\3\1\162"+
    "\17\3\2\0\2\3\2\0\4\3\20\0\11\3\1\163"+
    "\23\3\2\0\2\3\2\0\4\3\20\0\20\3\1\164"+
    "\14\3\2\0\2\3\2\0\4\3\20\0\20\3\1\165"+
    "\14\3\2\0\2\3\2\0\4\3\20\0\1\3\1\166"+
    "\33\3\2\0\2\3\2\0\4\3\20\0\13\3\1\167"+
    "\21\3\2\0\2\3\2\0\4\3\20\0\6\3\1\51"+
    "\26\3\2\0\2\3\2\0\4\3\20\0\5\3\1\137"+
    "\27\3\2\0\2\3\2\0\4\3\20\0\2\3\1\64"+
    "\32\3\2\0\2\3\2\0\4\3\20\0\13\3\1\170"+
    "\21\3\2\0\2\3\2\0\4\3\20\0\13\3\1\171"+
    "\21\3\2\0\2\3\2\0\4\3\20\0\10\3\1\172"+
    "\24\3\2\0\2\3\2\0\4\3\20\0\15\3\1\173"+
    "\17\3\2\0\2\3\2\0\4\3\20\0\4\3\1\174"+
    "\30\3\2\0\2\3\2\0\4\3\20\0\1\175\34\3"+
    "\2\0\2\3\2\0\2\3\1\176\1\3\20\0\35\3"+
    "\2\0\2\3\2\0\4\3\20\0\15\3\1\177\17\3"+
    "\2\0\2\3\2\0\2\3\1\200\1\3\20\0\15\3"+
    "\1\201\17\3\3\0\1\131\10\0\1\132\42\0\7\131"+
    "\4\0\1\131\53\0\7\131\3\0\1\3\1\202\1\0"+
    "\1\203\1\202\1\3\1\202\1\3\1\204\1\205\16\0"+
    "\2\202\2\3\1\202\5\3\1\202\4\3\1\202\5\3"+
    "\7\202\1\3\2\0\2\3\2\0\4\3\20\0\2\3"+
    "\1\142\32\3\2\0\2\3\2\0\2\3\1\64\1\3"+
    "\20\0\35\3\2\0\2\3\2\0\2\3\1\206\1\3"+
    "\20\0\35\3\2\0\2\3\2\0\4\3\20\0\16\3"+
    "\1\64\16\3\2\0\2\3\2\0\4\3\20\0\2\3"+
    "\1\207\32\3\2\0\2\3\2\0\2\3\1\210\1\3"+
    "\20\0\35\3\2\0\2\3\2\0\4\3\20\0\3\3"+
    "\1\201\31\3\2\0\2\3\2\0\4\3\20\0\14\3"+
    "\1\211\20\3\2\0\2\3\2\0\4\3\20\0\5\3"+
    "\1\212\27\3\2\0\2\3\2\0\4\3\20\0\1\3"+
    "\1\213\33\3\2\0\2\3\2\0\4\3\20\0\15\3"+
    "\1\214\17\3\2\0\2\3\2\0\4\3\20\0\14\3"+
    "\1\215\1\216\17\3\2\0\2\3\2\0\4\3\20\0"+
    "\4\3\1\217\30\3\2\0\2\3\2\0\4\3\20\0"+
    "\1\220\34\3\2\0\2\3\2\0\4\3\20\0\1\221"+
    "\34\3\2\0\2\3\2\0\4\3\20\0\6\3\1\64"+
    "\26\3\2\0\2\3\2\0\2\3\1\222\1\3\20\0"+
    "\35\3\2\0\2\3\2\0\4\3\20\0\3\3\1\64"+
    "\31\3\2\0\2\3\2\0\4\3\20\0\13\3\1\223"+
    "\21\3\2\0\2\3\2\0\4\3\20\0\6\3\1\224"+
    "\26\3\2\0\2\3\2\0\4\3\20\0\3\3\1\225"+
    "\5\3\1\226\23\3\2\0\2\3\2\0\4\3\20\0"+
    "\11\3\1\227\23\3\2\0\2\3\2\0\3\3\1\230"+
    "\20\0\35\3\2\0\2\3\2\0\2\3\1\231\1\3"+
    "\20\0\35\3\2\0\2\3\2\0\4\3\20\0\5\3"+
    "\1\232\27\3\2\0\2\3\2\0\4\3\20\0\20\3"+
    "\1\233\14\3\2\0\2\3\2\0\4\3\20\0\15\3"+
    "\1\234\17\3\2\0\2\3\2\0\4\3\20\0\14\3"+
    "\1\235\20\3\2\0\2\3\2\0\4\3\20\0\12\3"+
    "\1\236\22\3\2\0\2\3\2\0\4\3\20\0\13\3"+
    "\1\237\21\3\2\0\2\3\2\0\4\3\20\0\1\240"+
    "\34\3\2\0\2\3\2\0\4\3\20\0\23\3\1\241"+
    "\11\3\2\0\2\3\2\0\4\3\20\0\6\3\1\242"+
    "\26\3\2\0\2\3\2\0\4\3\20\0\21\3\1\243"+
    "\13\3\2\0\2\3\2\0\4\3\20\0\24\3\1\64"+
    "\10\3\2\0\2\3\2\0\4\3\20\0\6\3\1\135"+
    "\26\3\2\0\2\3\2\0\4\3\20\0\7\3\1\142"+
    "\25\3\2\0\1\3\1\202\1\0\1\203\1\202\1\3"+
    "\1\202\1\3\2\2\16\0\2\202\2\3\1\202\5\3"+
    "\1\202\4\3\1\202\5\3\7\202\1\3\3\0\1\203"+
    "\1\0\2\203\1\0\1\203\1\0\2\2\16\0\2\203"+
    "\2\0\1\203\5\0\1\203\4\0\1\203\5\0\7\203"+
    "\3\0\1\244\1\245\1\0\2\245\1\244\1\245\1\244"+
    "\20\0\2\245\2\244\1\245\5\244\1\245\4\244\1\245"+
    "\5\244\7\245\1\244\2\0\1\244\1\246\1\0\2\246"+
    "\1\244\1\246\1\244\20\0\2\246\2\244\1\246\5\244"+
    "\1\246\4\244\1\246\5\244\7\246\1\244\2\0\2\3"+
    "\2\0\4\3\20\0\2\3\1\201\32\3\2\0\2\3"+
    "\2\0\2\3\1\247\1\3\20\0\35\3\2\0\2\3"+
    "\2\0\4\3\20\0\11\3\1\135\7\3\1\250\13\3"+
    "\2\0\2\3\2\0\4\3\20\0\2\3\1\251\32\3"+
    "\2\0\2\3\2\0\4\3\20\0\13\3\1\252\21\3"+
    "\2\0\2\3\2\0\4\3\20\0\1\3\1\253\33\3"+
    "\2\0\2\3\2\0\4\3\20\0\12\3\1\254\22\3"+
    "\2\0\2\3\2\0\4\3\20\0\13\3\1\255\21\3"+
    "\2\0\2\3\2\0\4\3\20\0\5\3\1\201\27\3"+
    "\2\0\2\3\2\0\4\3\20\0\13\3\1\256\21\3"+
    "\2\0\2\3\2\0\4\3\20\0\7\3\1\64\25\3"+
    "\2\0\2\3\2\0\4\3\20\0\3\3\1\227\31\3"+
    "\2\0\2\3\2\0\4\3\20\0\3\3\1\257\31\3"+
    "\2\0\2\3\2\0\4\3\20\0\12\3\1\260\22\3"+
    "\2\0\2\3\2\0\4\3\20\0\11\3\1\261\23\3"+
    "\2\0\2\3\2\0\4\3\20\0\2\3\1\262\12\3"+
    "\1\263\17\3\2\0\2\3\2\0\4\3\20\0\25\3"+
    "\1\64\1\264\1\265\1\266\1\267\3\3\2\0\2\3"+
    "\2\0\2\3\1\270\1\3\20\0\35\3\2\0\2\3"+
    "\2\0\4\3\20\0\2\3\1\271\32\3\2\0\2\3"+
    "\2\0\4\3\20\0\2\3\1\254\32\3\2\0\2\3"+
    "\2\0\4\3\20\0\15\3\1\216\17\3\2\0\2\3"+
    "\2\0\4\3\20\0\17\3\1\272\15\3\2\0\2\3"+
    "\2\0\4\3\20\0\11\3\1\273\23\3\2\0\2\3"+
    "\2\0\4\3\20\0\11\3\1\274\23\3\2\0\2\3"+
    "\2\0\2\3\1\275\1\3\20\0\35\3\2\0\2\3"+
    "\2\0\4\3\20\0\4\3\1\177\30\3\2\0\2\3"+
    "\2\0\4\3\20\0\1\276\34\3\2\0\2\3\2\0"+
    "\4\3\20\0\15\3\1\277\17\3\2\0\2\3\2\0"+
    "\4\3\20\0\16\3\1\300\16\3\2\0\1\244\4\0"+
    "\1\244\1\0\1\244\22\0\2\244\1\0\5\244\1\0"+
    "\4\244\1\0\5\244\7\0\1\244\3\0\1\245\1\0"+
    "\2\245\1\0\1\245\1\0\1\301\17\0\2\245\2\0"+
    "\1\245\5\0\1\245\4\0\1\245\5\0\7\245\4\0"+
    "\1\246\1\0\2\246\1\0\1\246\2\0\1\301\16\0"+
    "\2\246\2\0\1\246\5\0\1\246\4\0\1\246\5\0"+
    "\7\246\3\0\2\3\2\0\4\3\20\0\3\3\1\155"+
    "\31\3\2\0\2\3\2\0\4\3\20\0\1\302\34\3"+
    "\2\0\2\3\2\0\4\3\20\0\13\3\1\303\21\3"+
    "\2\0\2\3\2\0\4\3\20\0\1\3\1\142\33\3"+
    "\2\0\2\3\2\0\4\3\20\0\15\3\1\304\17\3"+
    "\2\0\2\3\2\0\4\3\20\0\11\3\1\64\23\3"+
    "\2\0\2\3\2\0\4\3\20\0\21\3\1\64\13\3"+
    "\2\0\2\3\2\0\4\3\20\0\12\3\1\305\22\3"+
    "\2\0\2\3\2\0\4\3\20\0\17\3\1\306\15\3"+
    "\2\0\2\3\2\0\4\3\20\0\5\3\1\307\27\3"+
    "\2\0\2\3\2\0\4\3\20\0\2\3\1\310\32\3"+
    "\2\0\2\3\2\0\4\3\20\0\1\215\34\3\2\0"+
    "\2\3\2\0\4\3\20\0\13\3\1\311\21\3\2\0"+
    "\2\3\2\0\4\3\20\0\27\3\1\64\1\3\1\312"+
    "\3\3\2\0\2\3\2\0\4\3\20\0\32\3\1\64"+
    "\2\3\2\0\2\3\2\0\4\3\20\0\31\3\1\64"+
    "\3\3\2\0\2\3\2\0\4\3\20\0\33\3\1\313"+
    "\1\3\2\0\2\3\2\0\4\3\20\0\1\3\1\64"+
    "\33\3\2\0\2\3\2\0\4\3\20\0\13\3\1\314"+
    "\21\3\2\0\2\3\2\0\4\3\20\0\15\3\1\315"+
    "\17\3\2\0\2\3\2\0\2\3\1\142\1\3\20\0"+
    "\35\3\2\0\2\3\2\0\4\3\20\0\15\3\1\316"+
    "\17\3\2\0\2\3\2\0\4\3\20\0\10\3\1\201"+
    "\24\3\2\0\2\3\2\0\4\3\20\0\11\3\1\135"+
    "\23\3\2\0\2\3\2\0\4\3\20\0\12\3\1\64"+
    "\22\3\2\0\2\3\2\0\4\3\20\0\1\64\34\3"+
    "\2\0\2\3\2\0\4\3\20\0\11\3\1\317\23\3"+
    "\2\0\2\3\2\0\4\3\20\0\11\3\1\320\23\3"+
    "\2\0\2\3\2\0\2\3\1\213\1\3\20\0\35\3"+
    "\2\0\2\3\2\0\2\3\1\321\1\3\20\0\35\3"+
    "\2\0\2\3\2\0\4\3\20\0\1\3\1\305\33\3"+
    "\2\0\2\3\2\0\4\3\20\0\14\3\1\322\20\3"+
    "\2\0\2\3\2\0\4\3\20\0\14\3\1\135\20\3"+
    "\2\0\2\3\2\0\4\3\20\0\25\3\1\64\7\3"+
    "\2\0\2\3\2\0\4\3\20\0\27\3\1\64\5\3"+
    "\2\0\2\3\2\0\4\3\20\0\1\153\34\3\2\0"+
    "\2\3\2\0\2\3\1\116\1\3\20\0\35\3\2\0"+
    "\2\3\2\0\4\3\20\0\5\3\1\323\27\3\2\0"+
    "\2\3\2\0\2\3\1\324\1\3\20\0\35\3\2\0"+
    "\2\3\2\0\4\3\20\0\10\3\1\64\24\3\2\0"+
    "\2\3\2\0\4\3\20\0\2\3\1\213\32\3\2\0"+
    "\2\3\2\0\4\3\20\0\12\3\1\325\22\3\2\0"+
    "\2\3\2\0\4\3\20\0\13\3\1\64\21\3\2\0"+
    "\2\3\2\0\4\3\20\0\12\3\1\326\22\3\2\0"+
    "\2\3\2\0\4\3\20\0\11\3\1\327\23\3\2\0"+
    "\2\3\2\0\4\3\20\0\1\330\34\3\2\0\2\3"+
    "\2\0\4\3\20\0\5\3\1\116\27\3\2\0\2\3"+
    "\2\0\4\3\20\0\6\3\1\331\26\3\2\0\2\3"+
    "\2\0\4\3\20\0\6\3\1\213\26\3\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11220];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\10\1\1\11\2\1\1\11\35\1\1\0"+
    "\1\1\1\0\2\1\1\0\46\1\1\0\1\1\1\0"+
    "\50\1\1\0\41\1\2\0\32\1\1\11\30\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[217];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 202) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { lexeme=yytext()+" "+(yyline+1);return ERROR;
            }
          case 9: break;
          case 2: 
            { lexeme=yytext()+" "+(yyline+1); return IDENTIFICADOR;
            }
          case 10: break;
          case 3: 
            { lexeme=yytext()+" "+(yyline+1); return LITERAL;
            }
          case 11: break;
          case 4: 
            { lexeme=yytext()+" "+(yyline+1); return OPERADOR;
            }
          case 12: break;
          case 5: 
            { /* ignore */
            }
          case 13: break;
          case 6: 
            { lexeme=yytext()+" "+(yyline+1); return PALABRA_RESERVADA;
            }
          case 14: break;
          case 7: 
            { lexeme=yytext()+" "+(yyline+1); return UNIDAD;
            }
          case 15: break;
          case 8: 
            { lexeme=yytext()+" "+(yyline+1); return TRANSAC;
            }
          case 16: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
