/* The following code was generated by JFlex 1.6.1 */

package lexico;
import static lexico.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/lexico/lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\15\1\3\1\4\1\4\1\3\22\0\1\15\1\17\1\12"+
    "\2\0\1\20\1\23\1\13\1\20\1\20\1\25\1\17\1\20\1\14"+
    "\1\20\1\16\1\2\1\55\1\60\1\57\1\61\1\62\1\56\1\2"+
    "\1\54\1\2\1\20\1\20\1\21\1\26\1\22\1\20\1\0\6\6"+
    "\11\1\1\51\12\1\1\20\1\0\1\20\1\20\1\5\1\0\1\27"+
    "\1\33\1\41\1\30\1\10\1\46\1\50\1\7\1\44\1\1\1\36"+
    "\1\35\1\45\1\42\1\34\1\47\1\1\1\31\1\32\1\40\1\43"+
    "\1\52\1\53\1\11\1\37\1\63\1\20\1\24\1\20\1\20\6\0"+
    "\1\4\u1fa2\0\1\4\1\4\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\2\2\1\5\1\4"+
    "\10\5\20\2\1\3\2\2\1\3\5\2\1\0\1\4"+
    "\1\5\1\2\1\6\43\2\1\0\1\2\1\0\1\6"+
    "\27\2\1\6\15\2\1\7\1\3\2\0\5\2\1\10"+
    "\6\2\1\6\1\2\1\10\2\2\1\6\14\2\2\0"+
    "\32\2\1\3\1\2\1\6\26\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[210];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0138\0\u016c"+
    "\0\64\0\u01a0\0\u01d4\0\64\0\u0208\0\u023c\0\u0270\0\u02a4"+
    "\0\u02d8\0\u030c\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444"+
    "\0\u0478\0\u04ac\0\u04e0\0\u0514\0\u0548\0\u057c\0\u05b0\0\u05e4"+
    "\0\u0618\0\u064c\0\u0680\0\u06b4\0\u06e8\0\u071c\0\u0750\0\u0784"+
    "\0\u07b8\0\u07ec\0\64\0\u0820\0\320\0\u0854\0\u0680\0\u0888"+
    "\0\u08bc\0\u08f0\0\u0924\0\u0958\0\u098c\0\u09c0\0\u09f4\0\u0a28"+
    "\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c\0\u0b60\0\u0b94\0\u0bc8"+
    "\0\u0bfc\0\u0c30\0\u0c64\0\u0c98\0\u0ccc\0\u0d00\0\u0d34\0\u0d68"+
    "\0\u0d9c\0\u0dd0\0\u0e04\0\u0e38\0\u0e6c\0\u0ea0\0\u0ed4\0\u0f08"+
    "\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8\0\u100c\0\u1040\0\u1074\0\u10a8"+
    "\0\u10dc\0\u1110\0\u1144\0\u1178\0\u11ac\0\u11e0\0\u1214\0\u1248"+
    "\0\u127c\0\u12b0\0\u12e4\0\u1318\0\u134c\0\u1380\0\u13b4\0\u13e8"+
    "\0\u141c\0\u1450\0\u1484\0\u14b8\0\u14ec\0\u1520\0\u1554\0\u1588"+
    "\0\u15bc\0\u15f0\0\u1624\0\u1658\0\u168c\0\u16c0\0\u16f4\0\u1728"+
    "\0\u175c\0\u1790\0\u17c4\0\u0680\0\u100c\0\u17f8\0\u182c\0\u1860"+
    "\0\u1894\0\u18c8\0\u18fc\0\u1930\0\u0680\0\u1964\0\u1998\0\u19cc"+
    "\0\u1a00\0\u1a34\0\u1a68\0\u1a9c\0\u1ad0\0\u1b04\0\u1b38\0\u1b6c"+
    "\0\u1ba0\0\u1bd4\0\u1c08\0\u1c3c\0\u1c70\0\u1ca4\0\u1cd8\0\u1d0c"+
    "\0\u1d40\0\u1d74\0\u1da8\0\u1ddc\0\u1e10\0\u1e44\0\u1e78\0\u1eac"+
    "\0\u1ee0\0\u1f14\0\u1f48\0\u1f7c\0\u1fb0\0\u1fe4\0\u2018\0\u204c"+
    "\0\u2080\0\u20b4\0\u20e8\0\u211c\0\u2150\0\u2184\0\u21b8\0\u21ec"+
    "\0\u2220\0\u2254\0\u2288\0\u22bc\0\u22f0\0\u2324\0\u2358\0\u238c"+
    "\0\u23c0\0\320\0\u23f4\0\u13e8\0\u2428\0\u245c\0\u2490\0\u24c4"+
    "\0\u24f8\0\u252c\0\u2560\0\u2594\0\u25c8\0\u25fc\0\u2630\0\u2664"+
    "\0\u2698\0\u26cc\0\u2700\0\u2734\0\u2768\0\u279c\0\u27d0\0\u2804"+
    "\0\u2838\0\u286c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[210];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\0\1\2\1\3\1\6"+
    "\1\7\1\3\2\2\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\13\1\22\1\23"+
    "\1\24\1\25\1\26\3\3\1\27\1\30\1\31\1\3"+
    "\1\32\1\33\1\34\1\35\1\36\1\3\1\37\1\40"+
    "\1\41\7\4\1\3\2\0\1\42\51\0\7\42\2\0"+
    "\1\43\1\44\3\0\4\43\15\0\25\43\7\44\1\43"+
    "\2\42\1\4\2\0\3\42\1\45\43\42\7\4\1\42"+
    "\65\0\1\43\1\44\3\0\2\43\1\46\1\43\15\0"+
    "\5\43\1\47\17\43\7\44\1\43\1\0\1\43\1\44"+
    "\3\0\4\43\15\0\6\43\1\50\2\43\1\51\1\43"+
    "\1\52\11\43\7\44\1\43\2\53\1\4\2\0\21\53"+
    "\1\14\25\53\7\4\1\53\2\0\1\42\13\0\1\54"+
    "\7\0\1\55\25\0\7\42\3\0\1\42\23\0\1\55"+
    "\25\0\7\42\3\0\1\42\16\0\1\55\4\0\1\55"+
    "\25\0\7\42\3\0\1\42\17\0\1\55\3\0\1\55"+
    "\25\0\7\42\3\0\1\42\20\0\1\55\30\0\7\42"+
    "\3\0\1\42\21\0\1\55\27\0\7\42\3\0\1\42"+
    "\22\0\2\55\25\0\7\42\2\0\1\43\1\44\3\0"+
    "\4\43\15\0\1\43\1\56\1\43\1\57\21\43\7\44"+
    "\1\43\1\0\1\43\1\44\3\0\2\43\1\60\1\43"+
    "\15\0\1\61\4\43\1\57\17\43\7\44\1\43\1\0"+
    "\1\43\1\44\3\0\2\43\1\62\1\43\15\0\25\43"+
    "\7\44\1\43\1\0\1\43\1\44\3\0\2\43\1\63"+
    "\1\43\15\0\5\43\1\64\3\43\1\65\13\43\7\44"+
    "\1\66\1\0\1\43\1\44\3\0\4\43\15\0\1\67"+
    "\1\43\1\70\2\43\1\71\2\43\1\72\14\43\7\44"+
    "\1\43\1\0\1\43\1\44\3\0\2\43\1\73\1\43"+
    "\15\0\25\43\7\44\1\43\1\0\1\43\1\44\3\0"+
    "\1\43\1\74\2\43\15\0\2\43\1\75\22\43\7\44"+
    "\1\43\1\0\1\43\1\44\3\0\4\43\15\0\1\76"+
    "\4\43\1\77\17\43\7\44\1\43\1\0\1\43\1\44"+
    "\3\0\4\43\15\0\15\43\1\100\1\43\1\101\5\43"+
    "\7\44\1\43\1\0\1\43\1\44\3\0\4\43\15\0"+
    "\13\43\1\102\2\43\1\103\1\57\5\43\7\44\1\43"+
    "\1\0\1\43\1\44\3\0\4\43\15\0\1\104\4\43"+
    "\1\105\7\43\1\106\7\43\7\44\1\43\1\0\1\43"+
    "\1\44\3\0\4\43\15\0\1\107\1\43\1\110\2\43"+
    "\1\111\6\43\1\112\1\113\7\43\7\44\1\43\1\0"+
    "\1\43\1\44\3\0\4\43\15\0\1\114\1\43\1\115"+
    "\11\43\1\116\10\43\7\44\1\43\1\0\1\43\1\44"+
    "\3\0\4\43\15\0\2\43\1\117\22\43\7\44\1\43"+
    "\1\0\1\43\1\44\3\0\4\43\15\0\1\111\14\43"+
    "\1\120\7\43\7\44\1\43\1\0\1\43\1\44\3\0"+
    "\1\43\1\121\1\122\1\43\15\0\25\43\7\44\1\43"+
    "\2\0\1\42\5\0\1\123\43\0\7\42\2\0\2\43"+
    "\3\0\4\43\15\0\35\43\1\0\1\43\1\44\3\0"+
    "\2\43\1\124\1\43\15\0\25\43\7\44\1\43\2\0"+
    "\1\42\5\0\1\123\3\0\1\125\37\0\7\42\2\0"+
    "\2\43\3\0\3\43\1\126\15\0\35\43\1\0\2\43"+
    "\3\0\4\43\15\0\14\43\1\127\20\43\1\0\2\43"+
    "\3\0\4\43\15\0\3\43\1\130\31\43\1\0\2\43"+
    "\3\0\1\43\1\131\2\43\15\0\35\43\1\0\2\43"+
    "\3\0\4\43\15\0\14\43\1\132\20\43\3\54\2\0"+
    "\57\54\1\0\2\43\3\0\4\43\15\0\1\43\1\133"+
    "\33\43\1\0\2\43\3\0\4\43\15\0\6\43\1\134"+
    "\26\43\1\0\2\43\3\0\4\43\15\0\10\43\1\135"+
    "\24\43\1\0\2\43\3\0\4\43\15\0\11\43\1\136"+
    "\23\43\1\0\2\43\3\0\4\43\15\0\12\43\1\137"+
    "\1\140\21\43\1\0\2\43\3\0\4\43\15\0\6\43"+
    "\1\141\26\43\1\0\2\43\3\0\4\43\15\0\2\43"+
    "\1\142\32\43\1\0\2\43\3\0\4\43\15\0\1\143"+
    "\34\43\1\0\2\43\3\0\4\43\15\0\6\43\1\144"+
    "\26\43\1\0\2\43\3\0\2\43\1\145\1\43\15\0"+
    "\35\43\1\0\2\43\3\0\4\43\15\0\5\43\1\146"+
    "\27\43\1\0\2\43\3\0\4\43\15\0\11\43\1\147"+
    "\23\43\1\0\2\43\3\0\4\43\15\0\1\127\34\43"+
    "\1\0\2\43\3\0\4\43\15\0\15\43\1\150\17\43"+
    "\1\0\2\43\3\0\4\43\15\0\1\151\13\43\1\130"+
    "\20\43\1\0\2\43\3\0\4\43\15\0\6\43\1\152"+
    "\26\43\1\0\2\43\3\0\4\43\15\0\13\43\1\153"+
    "\21\43\1\0\2\43\3\0\4\43\15\0\13\43\1\154"+
    "\21\43\1\0\2\43\3\0\4\43\15\0\15\43\1\155"+
    "\17\43\1\0\2\43\3\0\4\43\15\0\11\43\1\156"+
    "\23\43\1\0\2\43\3\0\4\43\15\0\20\43\1\157"+
    "\14\43\1\0\2\43\3\0\4\43\15\0\20\43\1\160"+
    "\14\43\1\0\2\43\3\0\4\43\15\0\1\43\1\161"+
    "\33\43\1\0\2\43\3\0\4\43\15\0\13\43\1\162"+
    "\21\43\1\0\2\43\3\0\4\43\15\0\6\43\1\50"+
    "\26\43\1\0\2\43\3\0\4\43\15\0\5\43\1\132"+
    "\27\43\1\0\2\43\3\0\4\43\15\0\2\43\1\57"+
    "\32\43\1\0\2\43\3\0\4\43\15\0\13\43\1\163"+
    "\21\43\1\0\2\43\3\0\4\43\15\0\13\43\1\164"+
    "\21\43\1\0\2\43\3\0\4\43\15\0\10\43\1\165"+
    "\24\43\1\0\2\43\3\0\4\43\15\0\15\43\1\166"+
    "\17\43\1\0\2\43\3\0\4\43\15\0\4\43\1\167"+
    "\30\43\1\0\2\43\3\0\4\43\15\0\1\170\34\43"+
    "\1\0\2\43\3\0\2\43\1\171\1\43\15\0\35\43"+
    "\1\0\2\43\3\0\4\43\15\0\15\43\1\172\17\43"+
    "\1\0\2\43\3\0\2\43\1\173\1\43\15\0\15\43"+
    "\1\174\17\43\2\0\1\175\11\0\1\125\37\0\7\175"+
    "\2\0\2\43\3\0\4\43\2\0\1\125\12\0\35\43"+
    "\2\0\1\175\51\0\7\175\2\0\2\43\3\0\4\43"+
    "\1\176\1\177\13\0\35\43\1\0\2\43\3\0\4\43"+
    "\15\0\2\43\1\135\32\43\1\0\2\43\3\0\2\43"+
    "\1\57\1\43\15\0\35\43\1\0\2\43\3\0\2\43"+
    "\1\200\1\43\15\0\35\43\1\0\2\43\3\0\4\43"+
    "\15\0\16\43\1\57\16\43\1\0\2\43\3\0\4\43"+
    "\15\0\2\43\1\201\32\43\1\0\2\43\3\0\2\43"+
    "\1\202\1\43\15\0\35\43\1\0\2\43\3\0\4\43"+
    "\15\0\3\43\1\174\31\43\1\0\2\43\3\0\4\43"+
    "\15\0\14\43\1\203\20\43\1\0\2\43\3\0\4\43"+
    "\15\0\5\43\1\204\27\43\1\0\2\43\3\0\4\43"+
    "\15\0\1\43\1\205\33\43\1\0\2\43\3\0\4\43"+
    "\15\0\15\43\1\206\17\43\1\0\2\43\3\0\4\43"+
    "\15\0\14\43\1\207\1\210\17\43\1\0\2\43\3\0"+
    "\4\43\15\0\4\43\1\211\30\43\1\0\2\43\3\0"+
    "\4\43\15\0\1\212\34\43\1\0\2\43\3\0\4\43"+
    "\15\0\1\213\34\43\1\0\2\43\3\0\4\43\15\0"+
    "\6\43\1\57\26\43\1\0\2\43\3\0\2\43\1\214"+
    "\1\43\15\0\35\43\1\0\2\43\3\0\4\43\15\0"+
    "\3\43\1\57\31\43\1\0\2\43\3\0\4\43\15\0"+
    "\13\43\1\215\21\43\1\0\2\43\3\0\4\43\15\0"+
    "\6\43\1\216\26\43\1\0\2\43\3\0\4\43\15\0"+
    "\3\43\1\217\5\43\1\220\23\43\1\0\2\43\3\0"+
    "\4\43\15\0\11\43\1\221\23\43\1\0\2\43\3\0"+
    "\3\43\1\222\15\0\35\43\1\0\2\43\3\0\2\43"+
    "\1\223\1\43\15\0\35\43\1\0\2\43\3\0\4\43"+
    "\15\0\5\43\1\224\27\43\1\0\2\43\3\0\4\43"+
    "\15\0\20\43\1\225\14\43\1\0\2\43\3\0\4\43"+
    "\15\0\15\43\1\226\17\43\1\0\2\43\3\0\4\43"+
    "\15\0\14\43\1\227\20\43\1\0\2\43\3\0\4\43"+
    "\15\0\12\43\1\230\22\43\1\0\2\43\3\0\4\43"+
    "\15\0\13\43\1\231\21\43\1\0\2\43\3\0\4\43"+
    "\15\0\1\232\34\43\1\0\2\43\3\0\4\43\15\0"+
    "\23\43\1\233\11\43\1\0\2\43\3\0\4\43\15\0"+
    "\6\43\1\234\26\43\1\0\2\43\3\0\4\43\15\0"+
    "\21\43\1\235\13\43\1\0\2\43\3\0\4\43\15\0"+
    "\24\43\1\57\10\43\1\0\2\43\3\0\4\43\15\0"+
    "\6\43\1\130\26\43\1\0\2\43\3\0\4\43\15\0"+
    "\7\43\1\135\25\43\2\0\1\236\2\0\2\236\1\0"+
    "\1\236\16\0\2\236\2\0\1\236\5\0\1\236\4\0"+
    "\1\236\5\0\7\236\3\0\1\237\2\0\2\237\1\0"+
    "\1\237\16\0\2\237\2\0\1\237\5\0\1\237\4\0"+
    "\1\237\5\0\7\237\2\0\2\43\3\0\4\43\15\0"+
    "\2\43\1\174\32\43\1\0\2\43\3\0\2\43\1\240"+
    "\1\43\15\0\35\43\1\0\2\43\3\0\4\43\15\0"+
    "\11\43\1\130\7\43\1\241\13\43\1\0\2\43\3\0"+
    "\4\43\15\0\2\43\1\242\32\43\1\0\2\43\3\0"+
    "\4\43\15\0\13\43\1\243\21\43\1\0\2\43\3\0"+
    "\4\43\15\0\1\43\1\244\33\43\1\0\2\43\3\0"+
    "\4\43\15\0\12\43\1\245\22\43\1\0\2\43\3\0"+
    "\4\43\15\0\13\43\1\246\21\43\1\0\2\43\3\0"+
    "\4\43\15\0\5\43\1\174\27\43\1\0\2\43\3\0"+
    "\4\43\15\0\13\43\1\247\21\43\1\0\2\43\3\0"+
    "\4\43\15\0\7\43\1\57\25\43\1\0\2\43\3\0"+
    "\4\43\15\0\3\43\1\221\31\43\1\0\2\43\3\0"+
    "\4\43\15\0\3\43\1\250\31\43\1\0\2\43\3\0"+
    "\4\43\15\0\12\43\1\251\22\43\1\0\2\43\3\0"+
    "\4\43\15\0\11\43\1\252\23\43\1\0\2\43\3\0"+
    "\4\43\15\0\2\43\1\253\12\43\1\254\17\43\1\0"+
    "\2\43\3\0\4\43\15\0\25\43\1\57\1\255\1\256"+
    "\1\257\1\260\3\43\1\0\2\43\3\0\2\43\1\261"+
    "\1\43\15\0\35\43\1\0\2\43\3\0\4\43\15\0"+
    "\2\43\1\262\32\43\1\0\2\43\3\0\4\43\15\0"+
    "\2\43\1\245\32\43\1\0\2\43\3\0\4\43\15\0"+
    "\15\43\1\210\17\43\1\0\2\43\3\0\4\43\15\0"+
    "\17\43\1\263\15\43\1\0\2\43\3\0\4\43\15\0"+
    "\11\43\1\264\23\43\1\0\2\43\3\0\4\43\15\0"+
    "\11\43\1\265\23\43\1\0\2\43\3\0\2\43\1\266"+
    "\1\43\15\0\35\43\1\0\2\43\3\0\4\43\15\0"+
    "\4\43\1\172\30\43\1\0\2\43\3\0\4\43\15\0"+
    "\1\267\34\43\1\0\2\43\3\0\4\43\15\0\15\43"+
    "\1\270\17\43\1\0\2\43\3\0\4\43\15\0\16\43"+
    "\1\271\16\43\2\0\1\236\2\0\2\236\1\0\1\236"+
    "\1\0\1\272\14\0\2\236\2\0\1\236\5\0\1\236"+
    "\4\0\1\236\5\0\7\236\3\0\1\237\2\0\2\237"+
    "\1\0\1\237\2\0\1\272\13\0\2\237\2\0\1\237"+
    "\5\0\1\237\4\0\1\237\5\0\7\237\2\0\2\43"+
    "\3\0\4\43\15\0\3\43\1\150\31\43\1\0\2\43"+
    "\3\0\4\43\15\0\1\273\34\43\1\0\2\43\3\0"+
    "\4\43\15\0\13\43\1\274\21\43\1\0\2\43\3\0"+
    "\4\43\15\0\1\43\1\135\33\43\1\0\2\43\3\0"+
    "\4\43\15\0\15\43\1\275\17\43\1\0\2\43\3\0"+
    "\4\43\15\0\11\43\1\57\23\43\1\0\2\43\3\0"+
    "\4\43\15\0\21\43\1\57\13\43\1\0\2\43\3\0"+
    "\4\43\15\0\12\43\1\276\22\43\1\0\2\43\3\0"+
    "\4\43\15\0\17\43\1\277\15\43\1\0\2\43\3\0"+
    "\4\43\15\0\5\43\1\300\27\43\1\0\2\43\3\0"+
    "\4\43\15\0\2\43\1\301\32\43\1\0\2\43\3\0"+
    "\4\43\15\0\1\207\34\43\1\0\2\43\3\0\4\43"+
    "\15\0\13\43\1\302\21\43\1\0\2\43\3\0\4\43"+
    "\15\0\27\43\1\57\1\43\1\303\3\43\1\0\2\43"+
    "\3\0\4\43\15\0\32\43\1\57\2\43\1\0\2\43"+
    "\3\0\4\43\15\0\31\43\1\57\3\43\1\0\2\43"+
    "\3\0\4\43\15\0\33\43\1\304\1\43\1\0\2\43"+
    "\3\0\4\43\15\0\1\43\1\57\33\43\1\0\2\43"+
    "\3\0\4\43\15\0\13\43\1\305\21\43\1\0\2\43"+
    "\3\0\4\43\15\0\15\43\1\306\17\43\1\0\2\43"+
    "\3\0\2\43\1\135\1\43\15\0\35\43\1\0\2\43"+
    "\3\0\4\43\15\0\15\43\1\307\17\43\1\0\2\43"+
    "\3\0\4\43\15\0\10\43\1\174\24\43\1\0\2\43"+
    "\3\0\4\43\15\0\11\43\1\130\23\43\1\0\2\43"+
    "\3\0\4\43\15\0\12\43\1\57\22\43\1\0\2\43"+
    "\3\0\4\43\15\0\1\57\34\43\1\0\2\43\3\0"+
    "\4\43\15\0\11\43\1\310\23\43\1\0\2\43\3\0"+
    "\4\43\15\0\11\43\1\311\23\43\1\0\2\43\3\0"+
    "\2\43\1\205\1\43\15\0\35\43\1\0\2\43\3\0"+
    "\2\43\1\312\1\43\15\0\35\43\1\0\2\43\3\0"+
    "\4\43\15\0\1\43\1\276\33\43\1\0\2\43\3\0"+
    "\4\43\15\0\14\43\1\313\20\43\1\0\2\43\3\0"+
    "\4\43\15\0\14\43\1\130\20\43\1\0\2\43\3\0"+
    "\4\43\15\0\25\43\1\57\7\43\1\0\2\43\3\0"+
    "\4\43\15\0\27\43\1\57\5\43\1\0\2\43\3\0"+
    "\4\43\15\0\1\146\34\43\1\0\2\43\3\0\2\43"+
    "\1\111\1\43\15\0\35\43\1\0\2\43\3\0\4\43"+
    "\15\0\5\43\1\314\27\43\1\0\2\43\3\0\2\43"+
    "\1\315\1\43\15\0\35\43\1\0\2\43\3\0\4\43"+
    "\15\0\10\43\1\57\24\43\1\0\2\43\3\0\4\43"+
    "\15\0\2\43\1\205\32\43\1\0\2\43\3\0\4\43"+
    "\15\0\12\43\1\316\22\43\1\0\2\43\3\0\4\43"+
    "\15\0\13\43\1\57\21\43\1\0\2\43\3\0\4\43"+
    "\15\0\12\43\1\317\22\43\1\0\2\43\3\0\4\43"+
    "\15\0\11\43\1\320\23\43\1\0\2\43\3\0\4\43"+
    "\15\0\1\321\34\43\1\0\2\43\3\0\4\43\15\0"+
    "\5\43\1\111\27\43\1\0\2\43\3\0\4\43\15\0"+
    "\6\43\1\322\26\43\1\0\2\43\3\0\4\43\15\0"+
    "\6\43\1\205\26\43";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10400];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\1\1\11\45\1\1\0\1\1\1\11\45\1"+
    "\1\0\1\1\1\0\50\1\2\0\36\1\2\0\32\1"+
    "\1\11\30\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[210];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 202) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return ERROR;
            }
          case 9: break;
          case 2: 
            { lexeme=yytext()+" "+(yyline+1); return IDENTIFICADOR;
            }
          case 10: break;
          case 3: 
            { lexeme=yytext()+" "+(yyline+1);return LITERAL;
            }
          case 11: break;
          case 4: 
            { /* ignore */
            }
          case 12: break;
          case 5: 
            { lexeme=yytext()+" "+(yyline+1); return OPERADOR;
            }
          case 13: break;
          case 6: 
            { lexeme=yytext()+" "+(yyline+1); return PALABRA_RESERVADA;
            }
          case 14: break;
          case 7: 
            { lexeme=yytext()+" "+(yyline+1); return UNIDAD;
            }
          case 15: break;
          case 8: 
            { lexeme=yytext()+" "+(yyline+1); return TRANSAC;
            }
          case 16: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
