/* The following code was generated by JFlex 1.6.1 */

package lexico;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/lexico/lexerCup.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\30\1\24\1\36\1\36\1\3\22\0\1\30\1\64\1\12"+
    "\2\26\1\65\1\42\1\13\1\66\1\32\1\35\1\63\1\27\1\25"+
    "\1\5\1\34\1\2\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\0\1\31\1\40\1\62\1\41\1\0\1\26\6\6"+
    "\14\1\1\61\7\1\1\44\1\14\1\45\1\0\2\26\1\46\1\15"+
    "\1\50\1\53\1\10\1\16\1\56\1\7\1\52\1\1\1\1\1\54"+
    "\1\55\1\17\1\51\1\1\1\1\1\20\1\47\1\21\1\23\1\22"+
    "\1\60\1\11\1\57\1\1\1\67\1\43\1\33\1\0\6\26\1\37"+
    "\u1e6e\26\u0134\0\1\36\1\36\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\4\1\5\1\4\1\2\2\3"+
    "\1\6\2\2\3\3\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\2\16\2\17\1\20\1\21\7\3\1\22"+
    "\1\23\1\17\1\2\1\24\1\25\1\26\1\4\1\27"+
    "\1\30\1\1\2\3\1\1\1\0\1\3\1\0\1\31"+
    "\2\32\1\0\1\32\5\3\1\33\1\34\1\5\1\0"+
    "\1\35\1\16\1\17\1\3\1\36\1\3\1\37\4\3"+
    "\1\0\1\1\1\26\1\30\2\27\1\1\1\30\2\1"+
    "\1\0\1\1\1\3\1\1\1\3\4\32\1\0\5\32"+
    "\1\0\1\32\2\3\1\40\2\3\1\41\1\3\1\42"+
    "\5\3\1\0\2\1\2\27\1\0\2\30\1\27\3\0"+
    "\1\43\1\0\2\32\1\0\1\31\1\0\1\32\1\0"+
    "\2\32\1\0\1\31\1\0\1\32\1\44\1\3\1\45"+
    "\2\41\1\3\1\46\2\3\1\4\1\15\6\0\1\32"+
    "\4\0\1\32\2\0\3\41\1\47\1\50\1\3\1\0"+
    "\1\51\1\27\1\0\1\51\1\27\5\0\1\41\1\52"+
    "\1\51\3\41";

  private static int [] zzUnpackAction() {
    int [] result = new int[192];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310\0\u0348"+
    "\0\70\0\70\0\70\0\u0380\0\u03b8\0\u0268\0\u03f0\0\u0428"+
    "\0\u0460\0\u0498\0\70\0\70\0\u04d0\0\u0508\0\u0540\0\u0578"+
    "\0\u05b0\0\u05e8\0\u0620\0\u0658\0\u0690\0\u0658\0\u06c8\0\u0700"+
    "\0\70\0\u0738\0\u0770\0\u07a8\0\u07e0\0\u0818\0\u0850\0\u0888"+
    "\0\u08c0\0\u08f8\0\u0930\0\u01f8\0\70\0\u0968\0\70\0\u0230"+
    "\0\u09a0\0\u09d8\0\u0a10\0\u0a48\0\u0a80\0\u0ab8\0\70\0\70"+
    "\0\u0af0\0\u0b28\0\70\0\70\0\70\0\u0b60\0\160\0\u0b98"+
    "\0\u0bd0\0\u0c08\0\u0c40\0\u0c78\0\u0cb0\0\u0ce8\0\u0d20\0\u0d58"+
    "\0\u0d90\0\u0dc8\0\u0e00\0\u0e38\0\u0e70\0\u0ea8\0\u0ee0\0\u08c0"+
    "\0\u0f18\0\u0f50\0\u0f88\0\u0fc0\0\u0ff8\0\u1030\0\u01f8\0\u1068"+
    "\0\u10a0\0\u10d8\0\u1110\0\u1148\0\u1180\0\u0230\0\u11b8\0\u11f0"+
    "\0\u1228\0\u1260\0\160\0\u1298\0\u12d0\0\u1308\0\u1340\0\160"+
    "\0\u1378\0\u13b0\0\u13e8\0\u1420\0\u1458\0\u1490\0\u14c8\0\u1500"+
    "\0\u1538\0\u1570\0\u0e38\0\u15a8\0\u0e38\0\u15e0\0\u1618\0\u1650"+
    "\0\u0f88\0\160\0\u1688\0\u16c0\0\u16f8\0\u1730\0\u0ff8\0\u1768"+
    "\0\u17a0\0\u17d8\0\u1810\0\u1848\0\u1880\0\u1110\0\u18b8\0\u18f0"+
    "\0\160\0\u1928\0\160\0\u1960\0\u1998\0\u19d0\0\160\0\u1a08"+
    "\0\u1a40\0\70\0\u14c8\0\u1a78\0\u1ab0\0\u1ae8\0\u1b20\0\u1b58"+
    "\0\u1b90\0\u1bc8\0\u1c00\0\u1c38\0\u1c70\0\u1ca8\0\u1ce0\0\u1d18"+
    "\0\u1d50\0\u1d88\0\u1dc0\0\u1df8\0\70\0\160\0\u1e30\0\u1e68"+
    "\0\u1a78\0\u1a78\0\u1ea0\0\u1ae8\0\u1ae8\0\u1ed8\0\u1f10\0\u1f48"+
    "\0\u1f80\0\u1fb8\0\u1ff0\0\160\0\70\0\u2028\0\u2060\0\u2098";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[192];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\3\1\10"+
    "\1\11\1\3\1\12\1\13\1\14\1\15\1\16\2\3"+
    "\1\17\2\3\1\5\1\20\1\14\2\5\1\21\1\22"+
    "\1\23\1\24\1\25\1\0\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\2\3\1\35\1\3\1\36\1\37"+
    "\1\40\1\41\2\3\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\71\0\2\3\1\0\1\3\1\0"+
    "\4\3\2\0\1\26\7\3\2\0\1\26\10\0\1\26"+
    "\6\0\14\3\7\0\1\52\1\53\1\0\1\53\1\54"+
    "\2\52\1\55\1\52\2\0\1\26\7\52\2\0\1\26"+
    "\10\0\1\26\6\0\14\52\11\0\1\5\20\0\1\5"+
    "\2\0\2\5\40\0\1\52\1\6\1\0\1\6\1\54"+
    "\2\52\1\55\1\52\2\0\1\26\7\52\2\0\1\26"+
    "\10\0\1\26\6\0\14\52\10\0\1\54\1\0\1\54"+
    "\3\0\1\56\60\0\2\3\1\0\1\3\1\0\2\3"+
    "\1\57\1\3\2\0\1\26\7\3\2\0\1\26\10\0"+
    "\1\26\6\0\14\3\7\0\1\3\1\60\1\0\1\60"+
    "\1\61\4\3\2\0\1\26\7\3\1\0\1\62\1\26"+
    "\10\0\1\26\6\0\6\3\1\63\5\3\6\0\12\64"+
    "\1\65\1\64\1\66\7\64\1\67\43\64\13\70\1\65"+
    "\1\71\7\70\1\67\43\70\1\0\2\26\1\0\1\26"+
    "\1\0\4\26\2\0\10\26\2\0\1\26\10\0\1\26"+
    "\6\0\14\26\7\0\2\3\1\0\1\3\1\0\4\3"+
    "\2\0\1\26\7\3\2\0\1\26\10\0\1\26\6\0"+
    "\11\3\1\72\2\3\7\0\2\3\1\0\1\3\1\0"+
    "\4\3\2\0\1\26\7\3\2\0\1\26\10\0\1\26"+
    "\6\0\1\73\2\3\1\74\2\3\1\75\5\3\7\0"+
    "\2\3\1\0\1\3\1\0\4\3\2\0\1\26\3\3"+
    "\1\76\3\3\2\0\1\26\10\0\1\26\6\0\14\3"+
    "\33\0\1\77\34\0\1\100\41\0\1\101\1\102\24\0"+
    "\1\100\42\0\1\103\24\0\1\100\45\0\1\104\21\0"+
    "\1\104\46\0\1\104\20\0\1\104\47\0\1\105\70\0"+
    "\1\105\25\0\2\3\1\0\1\3\1\0\1\3\1\106"+
    "\2\3\2\0\1\26\7\3\2\0\1\26\10\0\1\26"+
    "\6\0\14\3\7\0\2\3\1\0\1\3\1\0\4\3"+
    "\2\0\1\26\1\3\1\107\1\110\4\3\2\0\1\26"+
    "\10\0\1\26\6\0\14\3\7\0\2\3\1\0\1\3"+
    "\1\0\4\3\2\0\1\26\7\3\2\0\1\26\10\0"+
    "\1\26\6\0\3\3\1\111\10\3\7\0\2\3\1\0"+
    "\1\3\1\0\4\3\2\0\1\26\7\3\2\0\1\26"+
    "\10\0\1\26\6\0\3\3\1\112\10\3\7\0\2\3"+
    "\1\0\1\3\1\0\4\3\2\0\1\26\7\3\2\0"+
    "\1\26\10\0\1\26\6\0\1\113\13\3\7\0\2\3"+
    "\1\0\1\3\1\0\1\3\1\114\2\3\2\0\1\26"+
    "\7\3\2\0\1\26\10\0\1\26\6\0\14\3\7\0"+
    "\2\3\1\0\1\3\1\0\4\3\2\0\1\26\4\3"+
    "\1\115\2\3\2\0\1\26\10\0\1\26\6\0\14\3"+
    "\70\0\1\104\67\0\1\100\1\77\66\0\1\100\32\0"+
    "\1\116\43\0\1\52\1\26\1\0\1\26\1\0\4\52"+
    "\2\0\1\26\7\52\2\0\1\26\10\0\1\26\6\0"+
    "\14\52\7\0\1\52\1\53\1\0\1\53\1\117\2\52"+
    "\1\120\1\52\2\0\1\26\7\52\2\0\1\26\10\0"+
    "\1\26\6\0\14\52\10\0\1\54\1\0\1\54\3\0"+
    "\1\121\60\0\1\52\1\122\1\0\1\123\1\124\4\52"+
    "\2\0\1\26\7\52\1\0\1\125\1\26\10\0\1\26"+
    "\6\0\14\52\10\0\1\126\1\0\1\127\1\130\17\0"+
    "\1\131\43\0\2\3\1\0\1\3\1\0\3\3\1\132"+
    "\2\0\1\26\7\3\2\0\1\26\10\0\1\26\6\0"+
    "\14\3\7\0\1\3\1\60\1\0\1\60\1\61\4\3"+
    "\2\0\1\26\7\3\2\0\1\26\10\0\1\26\6\0"+
    "\14\3\10\0\1\61\1\0\1\61\65\0\1\133\1\0"+
    "\1\127\1\61\63\0\2\3\1\0\1\3\1\0\4\3"+
    "\2\0\1\26\7\3\2\0\1\26\10\0\1\26\6\0"+
    "\1\3\1\134\12\3\6\0\11\135\1\136\1\137\1\140"+
    "\1\141\6\140\1\142\44\135\11\143\1\144\1\145\1\146"+
    "\1\147\6\145\1\150\44\143\1\0\2\3\1\0\1\3"+
    "\1\0\4\3\2\0\1\26\4\3\1\151\2\3\2\0"+
    "\1\26\10\0\1\26\6\0\14\3\7\0\2\3\1\0"+
    "\1\3\1\0\4\3\2\0\1\26\7\3\2\0\1\26"+
    "\10\0\1\26\6\0\6\3\1\152\5\3\7\0\2\3"+
    "\1\0\1\3\1\0\4\3\2\0\1\26\3\3\1\153"+
    "\3\3\2\0\1\26\10\0\1\26\6\0\14\3\7\0"+
    "\2\3\1\0\1\3\1\0\4\3\2\0\1\26\7\3"+
    "\2\0\1\26\10\0\1\26\6\0\3\3\1\154\10\3"+
    "\7\0\2\3\1\0\1\3\1\0\4\3\2\0\1\26"+
    "\6\3\1\155\2\0\1\26\10\0\1\26\6\0\14\3"+
    "\6\0\3\101\1\0\20\101\1\0\11\101\2\0\30\101"+
    "\35\0\1\156\33\0\2\3\1\0\1\3\1\0\4\3"+
    "\2\0\1\26\7\3\2\0\1\26\10\0\1\26\6\0"+
    "\1\157\13\3\7\0\2\3\1\0\1\3\1\0\4\3"+
    "\2\0\1\26\4\3\1\160\2\3\2\0\1\26\10\0"+
    "\1\26\6\0\14\3\7\0\2\3\1\0\1\3\1\0"+
    "\4\3\2\0\1\26\6\3\1\161\2\0\1\26\10\0"+
    "\1\26\6\0\14\3\7\0\2\3\1\0\1\3\1\0"+
    "\4\3\2\0\1\26\2\3\1\162\4\3\2\0\1\26"+
    "\10\0\1\26\6\0\14\3\7\0\2\3\1\0\1\3"+
    "\1\0\4\3\2\0\1\26\7\3\2\0\1\26\10\0"+
    "\1\26\6\0\4\3\1\163\7\3\7\0\2\3\1\0"+
    "\1\3\1\0\4\3\2\0\1\26\7\3\2\0\1\26"+
    "\10\0\1\26\6\0\4\3\1\164\7\3\7\0\2\3"+
    "\1\0\1\3\1\0\4\3\2\0\1\26\3\3\1\165"+
    "\3\3\2\0\1\26\10\0\1\26\6\0\14\3\10\0"+
    "\1\166\1\0\1\166\65\0\1\117\1\0\1\117\3\0"+
    "\1\56\60\0\1\52\1\167\1\0\1\170\1\61\4\52"+
    "\2\0\1\26\7\52\1\0\1\62\1\26\10\0\1\26"+
    "\6\0\14\52\10\0\1\171\1\0\1\172\1\173\17\0"+
    "\1\174\43\0\1\26\1\170\1\0\1\170\1\175\4\26"+
    "\2\0\10\26\2\0\1\26\10\0\1\26\6\0\14\26"+
    "\7\0\1\26\1\123\1\0\1\123\1\175\4\26\2\0"+
    "\10\26\2\0\1\26\10\0\1\26\6\0\14\26\10\0"+
    "\1\175\1\0\1\175\65\0\1\176\1\0\1\172\1\124"+
    "\64\0\1\61\1\0\2\61\64\0\1\127\1\0\1\127"+
    "\1\61\64\0\1\126\1\0\1\127\1\130\63\0\2\3"+
    "\1\0\1\3\1\0\4\3\1\177\1\200\1\26\7\3"+
    "\2\0\1\26\10\0\1\26\6\0\14\3\10\0\1\201"+
    "\1\0\1\201\1\61\63\0\2\3\1\0\1\3\1\0"+
    "\2\3\1\202\1\3\2\0\1\26\7\3\2\0\1\26"+
    "\10\0\1\26\6\0\14\3\6\0\12\135\1\67\1\135"+
    "\1\203\7\135\1\67\45\135\1\204\1\135\1\204\1\135"+
    "\1\204\1\135\1\204\1\135\1\67\1\135\1\203\2\204"+
    "\5\135\1\67\21\135\1\204\1\135\1\204\2\135\1\204"+
    "\14\135\12\140\1\65\1\140\1\205\7\140\1\67\43\140"+
    "\11\64\1\206\1\207\1\140\1\66\6\140\1\210\1\67"+
    "\43\64\2\135\1\211\1\135\1\211\1\135\1\211\1\135"+
    "\1\211\1\135\1\67\1\135\1\203\2\211\5\135\1\67"+
    "\21\135\1\211\1\135\1\211\2\135\1\211\14\135\13\143"+
    "\1\67\1\212\7\143\1\67\45\143\1\213\1\143\1\213"+
    "\1\143\1\213\1\143\1\213\2\143\1\67\1\212\2\213"+
    "\5\143\1\67\21\143\1\213\1\143\1\213\2\143\1\213"+
    "\14\143\13\145\1\65\1\214\7\145\1\67\43\145\11\70"+
    "\1\215\1\145\1\216\1\71\6\145\1\217\1\67\43\70"+
    "\2\143\1\220\1\143\1\220\1\143\1\220\1\143\1\220"+
    "\2\143\1\67\1\212\2\220\5\143\1\67\21\143\1\220"+
    "\1\143\1\220\2\143\1\220\14\143\1\0\2\3\1\0"+
    "\1\3\1\0\2\3\1\221\1\3\2\0\1\26\7\3"+
    "\2\0\1\26\10\0\1\26\6\0\14\3\7\0\2\3"+
    "\1\0\1\3\1\0\4\3\2\0\1\26\7\3\2\0"+
    "\1\26\10\0\1\26\6\0\1\3\1\155\12\3\7\0"+
    "\2\3\1\0\1\3\1\0\4\3\2\0\1\26\7\3"+
    "\2\0\1\26\10\0\1\26\6\0\1\222\13\3\7\0"+
    "\2\3\1\0\1\3\1\0\2\3\1\223\1\3\2\0"+
    "\1\26\7\3\2\0\1\26\10\0\1\26\6\0\14\3"+
    "\6\0\24\156\1\224\10\156\1\225\32\156\1\0\2\3"+
    "\1\0\1\3\1\0\4\3\2\0\1\26\3\3\1\221"+
    "\3\3\2\0\1\26\10\0\1\26\6\0\14\3\7\0"+
    "\2\3\1\0\1\3\1\0\4\3\2\0\1\26\1\226"+
    "\6\3\2\0\1\26\10\0\1\26\6\0\14\3\7\0"+
    "\2\3\1\0\1\3\1\0\4\3\2\0\1\26\7\3"+
    "\2\0\1\26\10\0\1\26\6\0\10\3\1\221\3\3"+
    "\7\0\2\3\1\0\1\3\1\0\4\3\2\0\1\26"+
    "\2\3\1\227\4\3\2\0\1\26\10\0\1\26\6\0"+
    "\14\3\7\0\2\3\1\0\1\3\1\0\4\3\2\0"+
    "\1\26\7\3\2\0\1\26\10\0\1\26\6\0\6\3"+
    "\1\230\5\3\7\0\2\3\1\0\1\3\1\0\4\3"+
    "\2\0\1\26\7\3\2\0\1\26\10\0\1\26\6\0"+
    "\4\3\1\231\7\3\10\0\1\166\1\0\1\166\25\0"+
    "\1\232\36\0\1\26\1\233\1\0\1\233\1\61\4\26"+
    "\2\0\10\26\2\0\1\26\10\0\1\26\6\0\14\26"+
    "\7\0\1\26\1\170\1\0\1\170\1\61\4\26\2\0"+
    "\10\26\2\0\1\26\10\0\1\26\6\0\14\26\10\0"+
    "\1\61\1\0\1\61\1\175\64\0\1\172\1\0\1\172"+
    "\1\175\64\0\1\171\1\0\1\172\1\173\64\0\1\127"+
    "\1\0\1\127\1\175\62\0\2\234\1\235\1\234\1\235"+
    "\1\234\1\235\1\234\1\235\4\234\2\235\27\234\1\235"+
    "\1\234\1\235\2\234\1\235\14\234\2\236\1\237\1\236"+
    "\1\237\1\236\1\237\1\236\1\237\4\236\2\237\27\236"+
    "\1\237\1\236\1\237\2\236\1\237\14\236\11\0\1\240"+
    "\11\135\1\241\44\0\2\135\1\140\1\135\1\140\1\135"+
    "\1\140\1\135\1\140\1\135\1\67\1\135\1\203\2\140"+
    "\5\135\1\67\21\135\1\140\1\135\1\140\2\135\1\140"+
    "\25\135\1\136\2\140\1\242\6\140\1\142\44\135\2\64"+
    "\1\243\1\64\1\243\1\64\1\243\1\64\1\243\1\64"+
    "\1\65\1\64\1\66\2\243\5\64\1\67\21\64\1\243"+
    "\1\64\1\243\2\64\1\243\16\64\1\244\1\64\1\244"+
    "\1\64\1\244\1\64\1\244\1\64\1\65\1\64\1\66"+
    "\2\244\5\64\1\67\21\64\1\244\1\64\1\244\2\64"+
    "\1\244\14\64\2\135\1\136\1\135\1\136\1\135\1\136"+
    "\1\135\1\136\1\135\1\67\1\135\1\203\2\136\5\135"+
    "\1\67\21\135\1\136\1\135\1\136\2\135\1\136\14\135"+
    "\11\0\1\245\11\143\1\246\44\0\2\143\1\145\1\143"+
    "\1\145\1\143\1\145\1\143\1\145\2\143\1\67\1\212"+
    "\2\145\5\143\1\67\21\143\1\145\1\143\1\145\2\143"+
    "\1\145\25\143\1\144\2\145\1\247\6\145\1\150\44\143"+
    "\2\70\1\250\1\70\1\250\1\70\1\250\1\70\1\250"+
    "\2\70\1\65\1\71\2\250\5\70\1\67\21\70\1\250"+
    "\1\70\1\250\2\70\1\250\16\70\1\251\1\70\1\251"+
    "\1\70\1\251\1\70\1\251\2\70\1\65\1\71\2\251"+
    "\5\70\1\67\21\70\1\251\1\70\1\251\2\70\1\251"+
    "\14\70\2\143\1\144\1\143\1\144\1\143\1\144\1\143"+
    "\1\144\2\143\1\67\1\212\2\144\5\143\1\67\21\143"+
    "\1\144\1\143\1\144\2\143\1\144\14\143\1\0\2\3"+
    "\1\0\1\3\1\0\4\3\2\0\1\26\4\3\1\221"+
    "\2\3\2\0\1\26\10\0\1\26\6\0\14\3\6\0"+
    "\24\252\1\253\3\252\1\254\3\252\1\0\1\225\32\252"+
    "\24\156\1\224\7\156\1\255\1\225\32\156\1\0\2\3"+
    "\1\0\1\3\1\0\4\3\2\0\1\26\7\3\2\0"+
    "\1\26\10\0\1\26\6\0\6\3\1\151\5\3\7\0"+
    "\2\3\1\0\1\3\1\0\2\3\1\256\1\3\2\0"+
    "\1\26\7\3\2\0\1\26\10\0\1\26\6\0\14\3"+
    "\7\0\2\3\1\0\1\3\1\0\4\3\2\0\1\26"+
    "\2\3\1\257\4\3\2\0\1\26\10\0\1\26\6\0"+
    "\14\3\6\0\2\234\1\260\1\234\1\260\1\234\1\260"+
    "\1\234\1\260\1\234\1\261\2\234\2\260\27\234\1\260"+
    "\1\234\1\260\2\234\1\260\16\234\1\235\1\234\1\235"+
    "\1\234\1\235\1\234\1\235\1\234\1\262\2\234\2\235"+
    "\27\234\1\235\1\234\1\235\2\234\1\235\14\234\2\236"+
    "\1\263\1\236\1\263\1\236\1\263\1\236\1\263\2\236"+
    "\1\264\1\236\2\263\27\236\1\263\1\236\1\263\2\236"+
    "\1\263\16\236\1\237\1\236\1\237\1\236\1\237\1\236"+
    "\1\237\2\236\1\265\1\236\2\237\27\236\1\237\1\236"+
    "\1\237\2\236\1\237\14\236\2\0\1\266\1\0\1\266"+
    "\1\0\1\266\1\0\1\266\4\0\2\266\27\0\1\266"+
    "\1\0\1\266\2\0\1\266\16\0\1\267\1\0\1\267"+
    "\1\0\1\267\1\0\1\267\4\0\2\267\27\0\1\267"+
    "\1\0\1\267\2\0\1\267\14\0\12\140\1\207\1\140"+
    "\1\205\7\140\1\67\43\140\2\64\1\140\1\64\1\140"+
    "\1\64\1\140\1\64\1\140\1\64\1\65\1\64\1\66"+
    "\2\140\5\64\1\67\21\64\1\140\1\64\1\140\2\64"+
    "\1\140\16\64\1\206\1\64\1\206\1\64\1\206\1\64"+
    "\1\206\1\64\1\65\1\64\1\66\2\206\5\64\1\67"+
    "\21\64\1\206\1\64\1\206\2\64\1\206\14\64\2\0"+
    "\1\270\1\0\1\270\1\0\1\270\1\0\1\270\4\0"+
    "\2\270\27\0\1\270\1\0\1\270\2\0\1\270\16\0"+
    "\1\271\1\0\1\271\1\0\1\271\1\0\1\271\4\0"+
    "\2\271\27\0\1\271\1\0\1\271\2\0\1\271\14\0"+
    "\13\145\1\216\1\214\7\145\1\67\43\145\2\70\1\145"+
    "\1\70\1\145\1\70\1\145\1\70\1\145\2\70\1\65"+
    "\1\71\2\145\5\70\1\67\21\70\1\145\1\70\1\145"+
    "\2\70\1\145\16\70\1\215\1\70\1\215\1\70\1\215"+
    "\1\70\1\215\2\70\1\65\1\71\2\215\5\70\1\67"+
    "\21\70\1\215\1\70\1\215\2\70\1\215\14\70\3\252"+
    "\1\272\20\252\1\253\10\252\1\253\2\272\33\252\1\272"+
    "\20\252\1\253\7\252\1\273\1\253\2\272\54\252\1\253"+
    "\3\252\1\254\3\252\1\272\1\225\32\252\1\0\2\3"+
    "\1\0\1\3\1\0\4\3\2\0\1\26\7\3\2\0"+
    "\1\26\10\0\1\26\6\0\10\3\1\274\3\3\10\0"+
    "\1\260\1\0\1\260\1\0\1\260\1\0\1\260\1\0"+
    "\1\275\2\0\2\260\27\0\1\260\1\0\1\260\2\0"+
    "\1\260\16\0\1\263\1\0\1\263\1\0\1\263\1\0"+
    "\1\263\2\0\1\275\1\0\2\263\27\0\1\263\1\0"+
    "\1\263\2\0\1\263\16\0\1\135\1\0\1\135\1\0"+
    "\1\135\1\0\1\135\4\0\2\135\27\0\1\135\1\0"+
    "\1\135\2\0\1\135\16\0\1\240\1\0\1\240\1\0"+
    "\1\240\1\0\1\240\4\0\2\240\27\0\1\240\1\0"+
    "\1\240\2\0\1\240\16\0\1\143\1\0\1\143\1\0"+
    "\1\143\1\0\1\143\4\0\2\143\27\0\1\143\1\0"+
    "\1\143\2\0\1\143\16\0\1\245\1\0\1\245\1\0"+
    "\1\245\1\0\1\245\4\0\2\245\27\0\1\245\1\0"+
    "\1\245\2\0\1\245\14\0\24\272\1\276\10\272\1\277"+
    "\32\272\3\273\1\0\32\273\2\0\30\273\24\272\1\276"+
    "\3\272\1\300\3\272\1\0\1\277\56\272\1\276\7\272"+
    "\1\0\1\277\56\272\1\276\3\272\1\300\4\272\1\277"+
    "\32\272";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8400];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\16\1\3\11\7\1\2\11\14\1\1\11"+
    "\10\1\1\0\1\1\1\0\1\11\1\1\1\11\1\0"+
    "\6\1\2\11\1\1\1\0\3\11\10\1\1\0\11\1"+
    "\1\0\10\1\1\0\5\1\1\0\16\1\1\0\4\1"+
    "\1\0\3\1\3\0\1\1\1\0\2\1\1\0\1\1"+
    "\1\0\1\1\1\0\2\1\1\0\1\1\1\0\12\1"+
    "\1\11\1\1\6\0\1\1\4\0\1\1\2\0\3\1"+
    "\1\11\2\1\1\0\2\1\1\0\2\1\5\0\2\1"+
    "\1\11\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[192];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 202) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return new Symbol(sym.ERROR_CEROS_A_LA_IZQUIERDA, yychar, yyline, yytext());
            }
          case 43: break;
          case 2: 
            { return new Symbol(sym.ERROR, yychar, yyline, yytext());
            }
          case 44: break;
          case 3: 
            { return new Symbol(sym.Identificador, yychar, yyline, yytext());
            }
          case 45: break;
          case 4: 
            { return new Symbol(sym.Numero, yychar, yyline, yytext());
            }
          case 46: break;
          case 5: 
            { /*Ignore*/
            }
          case 47: break;
          case 6: 
            { return new Symbol(sym.Comillas, yychar, yyline, yytext());
            }
          case 48: break;
          case 7: 
            { return new Symbol(sym.Resta, yychar, yyline, yytext());
            }
          case 49: break;
          case 8: 
            { return new Symbol(sym.P_coma, yychar, yyline, yytext());
            }
          case 50: break;
          case 9: 
            { return new Symbol(sym.Parentesis_c, yychar, yyline, yytext());
            }
          case 51: break;
          case 10: 
            { return new Symbol(sym.Llave_c, yychar, yyline, yytext());
            }
          case 52: break;
          case 11: 
            { return new Symbol(sym.Division, yychar, yyline, yytext());
            }
          case 53: break;
          case 12: 
            { return new Symbol(sym.Multiplicacion, yychar, yyline, yytext());
            }
          case 54: break;
          case 13: 
            { return new Symbol(sym.ERROR_CARACTERES_NO_VALIDOS, yychar, yyline, yytext());
            }
          case 55: break;
          case 14: 
            { return new Symbol(sym.Op_relacional, yychar, yyline, yytext());
            }
          case 56: break;
          case 15: 
            { return new Symbol(sym.Op_logico, yychar, yyline, yytext());
            }
          case 57: break;
          case 16: 
            { return new Symbol(sym.Corchete_a, yychar, yyline, yytext());
            }
          case 58: break;
          case 17: 
            { return new Symbol(sym.Corchete_c, yychar, yyline, yytext());
            }
          case 59: break;
          case 18: 
            { return new Symbol(sym.Igual, yychar, yyline, yytext());
            }
          case 60: break;
          case 19: 
            { return new Symbol(sym.Suma, yychar, yyline, yytext());
            }
          case 61: break;
          case 20: 
            { return new Symbol(sym.Parentesis_a, yychar, yyline, yytext());
            }
          case 62: break;
          case 21: 
            { return new Symbol(sym.Llave_a, yychar, yyline, yytext());
            }
          case 63: break;
          case 22: 
            { return new Symbol(sym.ERROR_IDENTIFICADOR, yychar, yyline, yytext());
            }
          case 64: break;
          case 23: 
            { return new Symbol(sym.NUMERO, yychar, yyline, yytext());
            }
          case 65: break;
          case 24: 
            { return new Symbol(sym.ERROR_NOTACION_CIENTIFICA, yychar, yyline, yytext());
            }
          case 66: break;
          case 25: 
            { return new Symbol(sym.STRING, yychar, yyline, yytext());
            }
          case 67: break;
          case 26: 
            { return new Symbol(sym.ERROR_STRING, yychar, yyline, yytext());
            }
          case 68: break;
          case 27: 
            { return new Symbol(sym.Op_incremento, yychar, yyline, yytext());
            }
          case 69: break;
          case 28: 
            { return new Symbol(sym.Op_atribucion, yychar, yyline, yytext());
            }
          case 70: break;
          case 29: 
            { return new Symbol(sym.OPERADOR, yychar, yyline, yytext());
            }
          case 71: break;
          case 30: 
            { return new Symbol(sym.If, yychar, yyline, yytext());
            }
          case 72: break;
          case 31: 
            { return new Symbol(sym.Do, yychar, yyline, yytext());
            }
          case 73: break;
          case 32: 
            { return new Symbol(sym.For, yychar, yyline, yytext());
            }
          case 74: break;
          case 33: 
            { return new Symbol(sym.ERROR_COMENTARIO, yychar, yyline, yytext());
            }
          case 75: break;
          case 34: 
            { return new Symbol(sym.Int, yychar, yyline, yytext());
            }
          case 76: break;
          case 35: 
            { return new Symbol(sym.Else, yychar, yyline, yytext());
            }
          case 77: break;
          case 36: 
            { return new Symbol(sym.T_dato, yychar, yyline, yytext());
            }
          case 78: break;
          case 37: 
            { return new Symbol(sym.Op_booleano, yychar, yyline, yytext());
            }
          case 79: break;
          case 38: 
            { return new Symbol(sym.Main, yychar, yyline, yytext());
            }
          case 80: break;
          case 39: 
            { /* ignore */
            }
          case 81: break;
          case 40: 
            { return new Symbol(sym.While, yychar, yyline, yytext());
            }
          case 82: break;
          case 41: 
            { return new Symbol(sym.ERROR_HEXADECIMAL, yychar, yyline, yytext());
            }
          case 83: break;
          case 42: 
            { return new Symbol(sym.Cadena, yychar, yyline, yytext());
            }
          case 84: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
