/* The following code was generated by JFlex 1.6.1 */

package lexico;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/lexico/lexerCup.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\26\1\23\1\35\1\35\1\34\22\0\1\26\1\77\1\11"+
    "\2\25\1\101\1\41\1\12\1\102\1\30\1\33\1\100\1\73\1\24"+
    "\1\4\1\32\1\2\1\65\1\70\1\67\1\71\1\72\1\66\1\3"+
    "\1\64\1\3\1\74\1\27\1\37\1\76\1\40\1\31\1\25\6\5"+
    "\14\1\1\75\7\1\1\44\1\13\1\45\1\105\2\25\1\46\1\14"+
    "\1\50\1\52\1\7\1\15\1\57\1\6\1\55\1\1\1\63\1\53"+
    "\1\54\1\16\1\51\1\56\1\1\1\17\1\47\1\20\1\22\1\21"+
    "\1\61\1\10\1\60\1\62\1\103\1\42\1\104\1\43\6\25\1\36"+
    "\u1e6e\25\u0134\0\1\35\1\35\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\2\4\1\5\2\3\1\6\1\2"+
    "\1\7\6\3\1\10\1\11\1\12\1\13\1\14\2\15"+
    "\2\16\3\17\1\20\1\21\11\3\1\22\1\23\1\3"+
    "\1\24\1\25\1\26\1\15\1\27\1\30\1\31\1\32"+
    "\1\33\1\1\1\4\1\34\1\1\3\3\1\1\2\3"+
    "\1\0\1\3\1\0\1\35\2\36\1\0\1\36\20\3"+
    "\1\37\1\10\1\0\1\16\1\40\11\3\1\41\3\3"+
    "\1\42\11\3\1\1\1\33\1\34\2\4\1\1\1\34"+
    "\2\1\1\0\1\1\1\40\3\3\1\1\1\3\4\36"+
    "\1\0\5\36\1\0\1\36\7\3\1\43\10\3\1\44"+
    "\16\3\1\45\7\3\1\46\1\3\2\1\2\4\1\0"+
    "\2\34\1\4\2\0\1\47\1\3\1\0\1\50\1\0"+
    "\2\36\1\0\1\35\1\0\1\36\1\0\2\36\1\0"+
    "\1\35\1\0\1\36\2\3\2\45\3\3\1\51\1\52"+
    "\2\3\1\45\2\44\1\3\1\53\5\3\1\53\3\3"+
    "\1\54\17\3\1\7\6\0\1\36\4\0\1\36\2\0"+
    "\1\55\6\3\3\44\26\3\1\56\1\3\1\0\1\57"+
    "\1\4\1\0\1\57\1\4\4\0\2\3\1\60\1\3"+
    "\1\0\1\44\1\3\1\61\11\3\1\62\1\3\1\63"+
    "\1\3\1\64\1\57\1\3\1\65\1\3\2\44\6\3"+
    "\1\66\1\67\1\44\1\70\1\71\1\72\6\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[358];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\u015e\0\u01a4\0\u01ea"+
    "\0\u0230\0\u0276\0\u02bc\0\u0302\0\u0348\0\u038e\0\u03d4\0\u041a"+
    "\0\u0460\0\106\0\u04a6\0\106\0\106\0\106\0\u04ec\0\u0532"+
    "\0\u0578\0\u05be\0\u0604\0\u064a\0\106\0\106\0\106\0\u0690"+
    "\0\u06d6\0\u071c\0\u0762\0\u07a8\0\u07ee\0\u0834\0\u087a\0\u08c0"+
    "\0\106\0\106\0\u0906\0\u094c\0\u094c\0\u04a6\0\u04a6\0\106"+
    "\0\106\0\106\0\106\0\u0992\0\u09d8\0\u0a1e\0\u0a64\0\u0aaa"+
    "\0\u0af0\0\u0b36\0\u0b7c\0\u0bc2\0\u0c08\0\u0c4e\0\u0c94\0\u0cda"+
    "\0\u0230\0\106\0\u0d20\0\106\0\u0276\0\u0d66\0\u0dac\0\u0df2"+
    "\0\u0e38\0\u0e7e\0\u0ec4\0\u0f0a\0\u0f50\0\u0f96\0\u0fdc\0\u1022"+
    "\0\u1068\0\u10ae\0\u10f4\0\u113a\0\u1180\0\u11c6\0\106\0\u120c"+
    "\0\u1252\0\106\0\214\0\u1298\0\u12de\0\u1324\0\u136a\0\u13b0"+
    "\0\u13f6\0\u143c\0\u1482\0\u14c8\0\214\0\u150e\0\u1554\0\u159a"+
    "\0\214\0\u15e0\0\u1626\0\u166c\0\u16b2\0\u16f8\0\u173e\0\u1784"+
    "\0\u17ca\0\u1810\0\u1856\0\u189c\0\u18e2\0\u1928\0\u196e\0\u19b4"+
    "\0\u19fa\0\u1a40\0\u1a86\0\u0bc2\0\u1acc\0\u1b12\0\u1b58\0\u1b9e"+
    "\0\u1be4\0\u1c2a\0\u1c70\0\u1cb6\0\u1cfc\0\u0230\0\u1d42\0\u1d88"+
    "\0\u1dce\0\u1e14\0\u1e5a\0\u1ea0\0\u0276\0\u1ee6\0\u1f2c\0\u1f72"+
    "\0\u1fb8\0\u1ffe\0\u2044\0\u208a\0\u20d0\0\u2116\0\214\0\u215c"+
    "\0\u21a2\0\u21e8\0\u222e\0\u2274\0\u22ba\0\u2300\0\u2346\0\u238c"+
    "\0\u23d2\0\u2418\0\u245e\0\u24a4\0\u24ea\0\u2530\0\u2576\0\u25bc"+
    "\0\u2602\0\u2648\0\u268e\0\u26d4\0\u271a\0\u2760\0\u27a6\0\u27ec"+
    "\0\u2832\0\u2878\0\u28be\0\u2904\0\u294a\0\u2990\0\214\0\u29d6"+
    "\0\u2a1c\0\u2a62\0\u2aa8\0\u2aee\0\u19b4\0\u2b34\0\u19b4\0\u2b7a"+
    "\0\u2bc0\0\u2c06\0\214\0\u2c4c\0\u1c2a\0\214\0\u2c92\0\u2cd8"+
    "\0\u2d1e\0\u2d64\0\u1cb6\0\u2daa\0\u2df0\0\u2e36\0\u2e7c\0\u2ec2"+
    "\0\u2f08\0\u1e14\0\u2f4e\0\u2f94\0\u2fda\0\u3020\0\214\0\u3066"+
    "\0\u30ac\0\u30f2\0\u3138\0\214\0\214\0\u317e\0\u31c4\0\u320a"+
    "\0\u3250\0\u3296\0\u32dc\0\214\0\u3322\0\u3368\0\u33ae\0\u33f4"+
    "\0\u343a\0\u3480\0\u34c6\0\u350c\0\u3552\0\214\0\u3598\0\u35de"+
    "\0\u3624\0\u366a\0\u36b0\0\u36f6\0\u373c\0\u3782\0\u37c8\0\u380e"+
    "\0\u3854\0\u389a\0\u38e0\0\u3926\0\u396c\0\u2a1c\0\u39b2\0\u39f8"+
    "\0\u3a3e\0\u3a84\0\u3aca\0\u3b10\0\u3b56\0\u3b9c\0\u3be2\0\u3c28"+
    "\0\u3c6e\0\u3cb4\0\u3cfa\0\u3d40\0\214\0\u3d86\0\u3dcc\0\u3e12"+
    "\0\u3e58\0\u3e9e\0\u3ee4\0\u3f2a\0\u3f70\0\u3fb6\0\u3ffc\0\u4042"+
    "\0\u4088\0\u40ce\0\u4114\0\u415a\0\u41a0\0\u41e6\0\u422c\0\u4272"+
    "\0\u42b8\0\u42fe\0\u4344\0\u438a\0\u43d0\0\u4416\0\u445c\0\u44a2"+
    "\0\u44e8\0\u452e\0\u4574\0\u45ba\0\214\0\u4600\0\u4646\0\u39b2"+
    "\0\u39b2\0\u468c\0\u3a3e\0\u3a3e\0\u46d2\0\u4718\0\u475e\0\u47a4"+
    "\0\u47ea\0\u4830\0\u4876\0\u48bc\0\u4902\0\u4948\0\u498e\0\214"+
    "\0\u49d4\0\u4a1a\0\u4a60\0\u4aa6\0\u4aec\0\u4b32\0\u4b78\0\u4bbe"+
    "\0\u4c04\0\214\0\u4c4a\0\214\0\u4c90\0\214\0\106\0\u4cd6"+
    "\0\214\0\u4d1c\0\u4d62\0\u4da8\0\u4dee\0\u4e34\0\u4e7a\0\u4ec0"+
    "\0\u4f06\0\u4f4c\0\214\0\214\0\u4f92\0\214\0\214\0\214"+
    "\0\u4fd8\0\u501e\0\u5064\0\u50aa\0\u50f0\0\u5136";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[358];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\3\1\7\1\10"+
    "\1\3\1\11\1\12\1\13\1\14\1\15\1\3\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\13\1\22\1\24"+
    "\1\25\1\26\1\27\1\30\1\22\1\0\1\13\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\3\1\43\1\3\1\44\1\45\1\46\1\3"+
    "\1\47\1\50\2\3\7\5\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\107\0"+
    "\3\3\1\0\4\3\2\0\1\13\7\3\2\0\1\13"+
    "\10\0\1\13\7\0\25\3\2\0\1\3\11\0\1\64"+
    "\2\65\1\66\2\64\1\67\1\64\2\0\1\13\7\64"+
    "\2\0\1\13\10\0\1\13\7\0\16\64\7\65\2\0"+
    "\1\64\11\0\1\64\2\5\1\66\2\64\1\67\1\64"+
    "\2\0\1\13\7\64\2\0\1\13\10\0\1\13\7\0"+
    "\16\64\7\5\2\0\1\64\12\0\2\66\3\0\1\70"+
    "\54\0\7\66\14\0\3\3\1\0\2\3\1\71\1\3"+
    "\2\0\1\13\7\3\2\0\1\13\10\0\1\13\7\0"+
    "\3\3\1\72\21\3\2\0\1\3\11\0\1\3\2\73"+
    "\1\74\4\3\2\0\1\13\2\3\1\75\1\3\1\76"+
    "\2\3\1\0\1\77\1\13\10\0\1\13\7\0\5\3"+
    "\1\100\10\3\7\73\2\0\1\3\10\0\11\101\1\102"+
    "\1\101\1\103\7\101\1\104\62\101\12\105\1\102\1\106"+
    "\7\105\1\104\62\105\1\0\3\13\1\0\4\13\2\0"+
    "\10\13\2\0\1\13\10\0\1\13\7\0\25\13\2\0"+
    "\1\13\11\0\3\3\1\0\4\3\2\0\1\13\3\3"+
    "\1\107\3\3\2\0\1\13\10\0\1\13\7\0\1\110"+
    "\2\3\1\111\6\3\1\112\12\3\2\0\1\3\11\0"+
    "\3\3\1\0\4\3\2\0\1\13\3\3\1\113\2\3"+
    "\1\114\2\0\1\13\10\0\1\13\7\0\1\115\2\3"+
    "\1\116\3\3\1\117\15\3\2\0\1\3\11\0\3\3"+
    "\1\0\2\3\1\120\1\3\2\0\1\13\7\3\2\0"+
    "\1\13\10\0\1\13\7\0\25\3\2\0\1\3\11\0"+
    "\3\3\1\0\1\3\1\121\2\3\2\0\1\13\3\3"+
    "\1\122\3\3\2\0\1\13\10\0\1\13\7\0\25\3"+
    "\2\0\1\3\11\0\3\3\1\0\4\3\2\0\1\13"+
    "\7\3\2\0\1\13\10\0\1\13\7\0\1\123\6\3"+
    "\1\124\15\3\2\0\1\3\11\0\3\3\1\0\4\3"+
    "\2\0\1\13\1\3\1\125\5\3\2\0\1\13\10\0"+
    "\1\13\7\0\7\3\1\126\15\3\2\0\1\3\106\0"+
    "\1\127\41\0\1\130\1\131\42\0\1\127\42\0\1\35"+
    "\42\0\1\127\46\0\1\132\36\0\1\132\47\0\1\132"+
    "\35\0\1\132\50\0\1\132\106\0\1\132\44\0\3\3"+
    "\1\0\4\3\2\0\1\13\7\3\2\0\1\13\10\0"+
    "\1\13\7\0\1\3\1\133\2\3\1\134\20\3\2\0"+
    "\1\3\11\0\3\3\1\0\2\3\1\135\1\3\2\0"+
    "\1\13\4\3\1\136\2\3\2\0\1\13\10\0\1\13"+
    "\7\0\3\3\1\137\10\3\1\140\10\3\2\0\1\3"+
    "\11\0\3\3\1\0\4\3\2\0\1\13\7\3\2\0"+
    "\1\13\10\0\1\13\7\0\1\141\2\3\1\142\21\3"+
    "\2\0\1\3\11\0\3\3\1\0\2\3\1\143\1\3"+
    "\2\0\1\13\7\3\2\0\1\13\10\0\1\13\7\0"+
    "\1\144\2\3\1\145\21\3\2\0\1\3\11\0\3\3"+
    "\1\0\4\3\2\0\1\13\7\3\2\0\1\13\10\0"+
    "\1\13\7\0\1\146\2\3\1\147\3\3\1\150\15\3"+
    "\2\0\1\3\11\0\3\3\1\0\4\3\2\0\1\13"+
    "\1\3\1\151\1\152\4\3\2\0\1\13\10\0\1\13"+
    "\7\0\6\3\1\153\16\3\2\0\1\3\11\0\3\3"+
    "\1\0\4\3\2\0\1\13\3\3\1\154\2\3\1\155"+
    "\2\0\1\13\10\0\1\13\7\0\1\156\24\3\2\0"+
    "\1\3\11\0\3\3\1\0\2\3\1\157\1\3\2\0"+
    "\1\13\7\3\2\0\1\13\10\0\1\13\7\0\25\3"+
    "\2\0\1\3\11\0\3\3\1\0\1\3\1\160\1\161"+
    "\1\3\2\0\1\13\7\3\2\0\1\13\10\0\1\13"+
    "\7\0\25\3\2\0\1\3\11\0\3\3\1\0\4\3"+
    "\2\0\1\13\4\3\1\162\2\3\2\0\1\13\10\0"+
    "\1\13\7\0\25\3\2\0\1\3\106\0\1\132\10\0"+
    "\1\64\2\13\1\0\4\64\2\0\1\13\7\64\2\0"+
    "\1\13\10\0\1\13\7\0\16\64\7\13\2\0\1\64"+
    "\11\0\1\64\2\65\1\163\2\64\1\164\1\64\2\0"+
    "\1\13\7\64\2\0\1\13\10\0\1\13\7\0\16\64"+
    "\7\65\2\0\1\64\12\0\2\66\3\0\1\165\54\0"+
    "\7\66\14\0\1\64\1\166\1\167\1\170\4\64\2\0"+
    "\1\13\7\64\1\0\1\171\1\13\10\0\1\13\7\0"+
    "\16\64\7\167\2\0\1\64\12\0\1\172\1\173\1\174"+
    "\17\0\1\175\37\0\7\173\14\0\3\3\1\0\3\3"+
    "\1\176\2\0\1\13\7\3\2\0\1\13\10\0\1\13"+
    "\7\0\25\3\2\0\1\3\11\0\3\3\1\0\4\3"+
    "\2\0\1\13\6\3\1\177\2\0\1\13\10\0\1\13"+
    "\7\0\25\3\2\0\1\3\11\0\1\3\2\73\1\74"+
    "\4\3\2\0\1\13\7\3\2\0\1\13\10\0\1\13"+
    "\7\0\16\3\7\73\2\0\1\3\12\0\2\74\60\0"+
    "\7\74\14\0\3\3\1\0\4\3\2\0\1\13\6\3"+
    "\1\200\2\0\1\13\10\0\1\13\7\0\25\3\2\0"+
    "\1\3\11\0\3\3\1\0\1\3\1\201\2\3\2\0"+
    "\1\13\7\3\2\0\1\13\10\0\1\13\7\0\25\3"+
    "\2\0\1\3\12\0\1\202\1\173\1\74\57\0\7\173"+
    "\14\0\3\3\1\0\4\3\2\0\1\13\7\3\2\0"+
    "\1\13\10\0\1\13\7\0\1\3\1\203\23\3\2\0"+
    "\1\3\10\0\10\204\1\205\1\206\1\207\1\210\6\207"+
    "\1\211\63\204\10\212\1\213\1\214\1\215\1\216\6\214"+
    "\1\217\63\212\1\0\3\3\1\0\2\3\1\220\1\3"+
    "\2\0\1\13\7\3\2\0\1\13\10\0\1\13\7\0"+
    "\25\3\2\0\1\3\11\0\3\3\1\0\4\3\2\0"+
    "\1\13\7\3\2\0\1\13\10\0\1\13\7\0\5\3"+
    "\1\221\17\3\2\0\1\3\11\0\3\3\1\0\4\3"+
    "\2\0\1\13\7\3\2\0\1\13\10\0\1\13\7\0"+
    "\3\3\1\222\21\3\2\0\1\3\11\0\3\3\1\0"+
    "\4\3\2\0\1\13\4\3\1\223\2\3\2\0\1\13"+
    "\10\0\1\13\7\0\25\3\2\0\1\3\11\0\3\3"+
    "\1\0\4\3\2\0\1\13\7\3\2\0\1\13\10\0"+
    "\1\13\7\0\3\3\1\224\21\3\2\0\1\3\11\0"+
    "\3\3\1\0\4\3\2\0\1\13\2\3\1\225\4\3"+
    "\2\0\1\13\10\0\1\13\7\0\25\3\2\0\1\3"+
    "\11\0\3\3\1\0\4\3\2\0\1\13\7\3\2\0"+
    "\1\13\10\0\1\13\7\0\5\3\1\226\17\3\2\0"+
    "\1\3\11\0\3\3\1\0\4\3\2\0\1\13\3\3"+
    "\1\227\3\3\2\0\1\13\10\0\1\13\7\0\25\3"+
    "\2\0\1\3\11\0\3\3\1\0\4\3\2\0\1\13"+
    "\2\3\1\230\4\3\2\0\1\13\10\0\1\13\7\0"+
    "\25\3\2\0\1\3\11\0\3\3\1\0\4\3\2\0"+
    "\1\13\4\3\1\231\2\3\2\0\1\13\10\0\1\13"+
    "\7\0\25\3\2\0\1\3\11\0\3\3\1\0\4\3"+
    "\2\0\1\13\7\3\2\0\1\13\10\0\1\13\7\0"+
    "\7\3\1\232\15\3\2\0\1\3\11\0\3\3\1\0"+
    "\4\3\2\0\1\13\6\3\1\233\2\0\1\13\10\0"+
    "\1\13\7\0\1\234\24\3\2\0\1\3\11\0\3\3"+
    "\1\0\4\3\2\0\1\13\3\3\1\133\3\3\2\0"+
    "\1\13\10\0\1\13\7\0\25\3\2\0\1\3\11\0"+
    "\3\3\1\0\2\3\1\235\1\3\2\0\1\13\7\3"+
    "\2\0\1\13\10\0\1\13\7\0\25\3\2\0\1\3"+
    "\11\0\3\3\1\0\4\3\2\0\1\13\7\3\2\0"+
    "\1\13\10\0\1\13\7\0\7\3\1\236\15\3\2\0"+
    "\1\3\11\0\3\3\1\0\4\3\2\0\1\13\2\3"+
    "\1\237\4\3\2\0\1\13\10\0\1\13\7\0\25\3"+
    "\2\0\1\3\10\0\23\130\1\0\10\130\3\0\47\130"+
    "\33\0\1\240\53\0\3\3\1\0\4\3\2\0\1\13"+
    "\7\3\2\0\1\13\10\0\1\13\7\0\4\3\1\241"+
    "\20\3\2\0\1\3\11\0\3\3\1\0\4\3\2\0"+
    "\1\13\2\3\1\242\4\3\2\0\1\13\10\0\1\13"+
    "\7\0\2\3\1\243\22\3\2\0\1\3\11\0\3\3"+
    "\1\0\4\3\2\0\1\13\3\3\1\244\3\3\2\0"+
    "\1\13\10\0\1\13\7\0\25\3\2\0\1\3\11\0"+
    "\3\3\1\0\4\3\2\0\1\13\7\3\2\0\1\13"+
    "\10\0\1\13\7\0\5\3\1\245\17\3\2\0\1\3"+
    "\11\0\3\3\1\0\4\3\2\0\1\13\7\3\2\0"+
    "\1\13\10\0\1\13\7\0\1\246\24\3\2\0\1\3"+
    "\11\0\3\3\1\0\4\3\2\0\1\13\7\3\2\0"+
    "\1\13\10\0\1\13\7\0\5\3\1\247\17\3\2\0"+
    "\1\3\11\0\3\3\1\0\4\3\2\0\1\13\2\3"+
    "\1\250\4\3\2\0\1\13\10\0\1\13\7\0\25\3"+
    "\2\0\1\3\11\0\3\3\1\0\4\3\2\0\1\13"+
    "\7\3\2\0\1\13\10\0\1\13\7\0\5\3\1\251"+
    "\17\3\2\0\1\3\11\0\3\3\1\0\4\3\2\0"+
    "\1\13\7\3\2\0\1\13\10\0\1\13\7\0\12\3"+
    "\1\252\12\3\2\0\1\3\11\0\3\3\1\0\4\3"+
    "\2\0\1\13\7\3\2\0\1\13\10\0\1\13\7\0"+
    "\7\3\1\253\1\254\14\3\2\0\1\3\11\0\3\3"+
    "\1\0\4\3\2\0\1\13\7\3\2\0\1\13\10\0"+
    "\1\13\7\0\4\3\1\255\20\3\2\0\1\3\11\0"+
    "\3\3\1\0\4\3\2\0\1\13\2\3\1\256\4\3"+
    "\2\0\1\13\10\0\1\13\7\0\25\3\2\0\1\3"+
    "\11\0\3\3\1\0\4\3\2\0\1\13\4\3\1\257"+
    "\2\3\2\0\1\13\10\0\1\13\7\0\25\3\2\0"+
    "\1\3\11\0\3\3\1\0\4\3\2\0\1\13\7\3"+
    "\2\0\1\13\10\0\1\13\7\0\10\3\1\260\14\3"+
    "\2\0\1\3\11\0\3\3\1\0\4\3\2\0\1\13"+
    "\7\3\2\0\1\13\10\0\1\13\7\0\1\261\6\3"+
    "\1\262\15\3\2\0\1\3\11\0\3\3\1\0\4\3"+
    "\2\0\1\13\1\263\6\3\2\0\1\13\10\0\1\13"+
    "\7\0\25\3\2\0\1\3\11\0\3\3\1\0\4\3"+
    "\2\0\1\13\7\3\2\0\1\13\10\0\1\13\7\0"+
    "\12\3\1\264\12\3\2\0\1\3\11\0\3\3\1\0"+
    "\4\3\2\0\1\13\7\3\2\0\1\13\10\0\1\13"+
    "\7\0\1\177\24\3\2\0\1\3\11\0\3\3\1\0"+
    "\4\3\2\0\1\13\7\3\2\0\1\13\10\0\1\13"+
    "\7\0\7\3\1\265\15\3\2\0\1\3\11\0\3\3"+
    "\1\0\2\3\1\266\1\3\2\0\1\13\7\3\2\0"+
    "\1\13\10\0\1\13\7\0\7\3\1\267\15\3\2\0"+
    "\1\3\11\0\3\3\1\0\4\3\2\0\1\13\3\3"+
    "\1\270\3\3\2\0\1\13\10\0\1\13\7\0\25\3"+
    "\2\0\1\3\12\0\2\163\3\0\1\70\54\0\7\163"+
    "\14\0\1\64\1\271\1\272\1\74\4\64\2\0\1\13"+
    "\7\64\1\0\1\77\1\13\10\0\1\13\7\0\16\64"+
    "\7\272\2\0\1\64\12\0\1\273\1\274\1\275\17\0"+
    "\1\276\37\0\7\274\14\0\1\13\2\272\1\277\4\13"+
    "\2\0\10\13\2\0\1\13\10\0\1\13\7\0\16\13"+
    "\7\272\2\0\1\13\11\0\1\13\2\167\1\277\4\13"+
    "\2\0\10\13\2\0\1\13\10\0\1\13\7\0\16\13"+
    "\7\167\2\0\1\13\12\0\2\277\60\0\7\277\15\0"+
    "\1\300\1\274\1\170\57\0\7\274\15\0\3\74\57\0"+
    "\7\74\15\0\2\173\1\74\57\0\7\173\15\0\1\172"+
    "\1\173\1\174\57\0\7\173\14\0\3\3\1\0\4\3"+
    "\1\301\1\302\1\13\7\3\2\0\1\13\10\0\1\13"+
    "\7\0\25\3\2\0\1\3\11\0\3\3\1\0\4\3"+
    "\2\0\1\13\3\3\1\252\3\3\2\0\1\13\10\0"+
    "\1\13\7\0\25\3\2\0\1\3\11\0\3\3\1\0"+
    "\4\3\2\0\1\13\7\3\2\0\1\13\10\0\1\13"+
    "\7\0\6\3\1\303\16\3\2\0\1\3\11\0\3\3"+
    "\1\0\2\3\1\304\1\3\2\0\1\13\7\3\2\0"+
    "\1\13\10\0\1\13\7\0\25\3\2\0\1\3\12\0"+
    "\2\305\1\74\57\0\7\305\14\0\3\3\1\0\2\3"+
    "\1\306\1\3\2\0\1\13\7\3\2\0\1\13\10\0"+
    "\1\13\7\0\25\3\2\0\1\3\10\0\11\204\1\104"+
    "\1\204\1\307\7\204\1\104\64\204\2\310\1\204\1\310"+
    "\1\204\1\310\1\204\1\104\1\204\1\307\2\310\5\204"+
    "\1\104\22\204\1\310\1\204\1\310\1\204\1\310\11\204"+
    "\7\310\13\204\11\207\1\102\1\207\1\311\7\207\1\104"+
    "\62\207\10\101\1\312\1\313\1\207\1\103\6\207\1\314"+
    "\1\104\62\101\2\204\2\315\1\204\1\315\1\204\1\315"+
    "\1\204\1\104\1\204\1\307\2\315\5\204\1\104\22\204"+
    "\1\315\1\204\1\315\1\204\1\315\11\204\7\315\13\204"+
    "\12\212\1\104\1\316\7\212\1\104\64\212\2\317\1\212"+
    "\1\317\1\212\1\317\2\212\1\104\1\316\2\317\5\212"+
    "\1\104\22\212\1\317\1\212\1\317\1\212\1\317\11\212"+
    "\7\317\13\212\12\214\1\102\1\320\7\214\1\104\62\214"+
    "\10\105\1\321\1\214\1\322\1\106\6\214\1\323\1\104"+
    "\62\105\2\212\2\324\1\212\1\324\1\212\1\324\2\212"+
    "\1\104\1\316\2\324\5\212\1\104\22\212\1\324\1\212"+
    "\1\324\1\212\1\324\11\212\7\324\13\212\1\0\3\3"+
    "\1\0\4\3\2\0\1\13\7\3\2\0\1\13\10\0"+
    "\1\13\7\0\1\325\24\3\2\0\1\3\11\0\3\3"+
    "\1\0\4\3\2\0\1\13\7\3\2\0\1\13\10\0"+
    "\1\13\7\0\1\326\24\3\2\0\1\3\11\0\3\3"+
    "\1\0\4\3\2\0\1\13\7\3\2\0\1\13\10\0"+
    "\1\13\7\0\5\3\1\327\17\3\2\0\1\3\11\0"+
    "\3\3\1\0\2\3\1\330\1\3\2\0\1\13\7\3"+
    "\2\0\1\13\10\0\1\13\7\0\25\3\2\0\1\3"+
    "\11\0\3\3\1\0\4\3\2\0\1\13\7\3\2\0"+
    "\1\13\10\0\1\13\7\0\6\3\1\133\16\3\2\0"+
    "\1\3\11\0\3\3\1\0\4\3\2\0\1\13\7\3"+
    "\2\0\1\13\10\0\1\13\7\0\2\3\1\331\22\3"+
    "\2\0\1\3\11\0\3\3\1\0\4\3\2\0\1\13"+
    "\7\3\2\0\1\13\10\0\1\13\7\0\1\3\1\233"+
    "\23\3\2\0\1\3\11\0\3\3\1\0\4\3\2\0"+
    "\1\13\2\3\1\332\4\3\2\0\1\13\10\0\1\13"+
    "\7\0\25\3\2\0\1\3\11\0\3\3\1\0\4\3"+
    "\2\0\1\13\6\3\1\333\2\0\1\13\10\0\1\13"+
    "\7\0\25\3\2\0\1\3\11\0\3\3\1\0\4\3"+
    "\2\0\1\13\7\3\2\0\1\13\10\0\1\13\7\0"+
    "\1\3\1\334\23\3\2\0\1\3\11\0\3\3\1\0"+
    "\2\3\1\335\1\3\2\0\1\13\7\3\2\0\1\13"+
    "\10\0\1\13\7\0\25\3\2\0\1\3\11\0\3\3"+
    "\1\0\4\3\2\0\1\13\2\3\1\336\4\3\2\0"+
    "\1\13\10\0\1\13\7\0\25\3\2\0\1\3\11\0"+
    "\3\3\1\0\4\3\2\0\1\13\7\3\2\0\1\13"+
    "\10\0\1\13\7\0\13\3\1\133\11\3\2\0\1\3"+
    "\11\0\3\3\1\0\3\3\1\337\2\0\1\13\7\3"+
    "\2\0\1\13\10\0\1\13\7\0\25\3\2\0\1\3"+
    "\11\0\3\3\1\0\4\3\2\0\1\13\4\3\1\340"+
    "\2\3\2\0\1\13\10\0\1\13\7\0\25\3\2\0"+
    "\1\3\10\0\23\240\1\341\7\240\1\342\52\240\1\0"+
    "\3\3\1\0\4\3\2\0\1\13\3\3\1\343\3\3"+
    "\2\0\1\13\10\0\1\13\7\0\25\3\2\0\1\3"+
    "\11\0\3\3\1\0\4\3\2\0\1\13\7\3\2\0"+
    "\1\13\10\0\1\13\7\0\4\3\1\344\20\3\2\0"+
    "\1\3\11\0\3\3\1\0\4\3\2\0\1\13\7\3"+
    "\2\0\1\13\10\0\1\13\7\0\3\3\1\345\21\3"+
    "\2\0\1\3\11\0\3\3\1\0\4\3\2\0\1\13"+
    "\6\3\1\346\2\0\1\13\10\0\1\13\7\0\7\3"+
    "\1\347\15\3\2\0\1\3\11\0\3\3\1\0\4\3"+
    "\2\0\1\13\7\3\2\0\1\13\10\0\1\13\7\0"+
    "\7\3\1\350\15\3\2\0\1\3\11\0\3\3\1\0"+
    "\4\3\2\0\1\13\1\351\6\3\2\0\1\13\10\0"+
    "\1\13\7\0\25\3\2\0\1\3\11\0\3\3\1\0"+
    "\4\3\2\0\1\13\7\3\2\0\1\13\10\0\1\13"+
    "\7\0\5\3\1\352\17\3\2\0\1\3\11\0\3\3"+
    "\1\0\4\3\2\0\1\13\4\3\1\353\2\3\2\0"+
    "\1\13\10\0\1\13\7\0\1\3\1\354\23\3\2\0"+
    "\1\3\11\0\3\3\1\0\2\3\1\355\1\3\2\0"+
    "\1\13\7\3\2\0\1\13\10\0\1\13\7\0\25\3"+
    "\2\0\1\3\11\0\3\3\1\0\4\3\2\0\1\13"+
    "\7\3\2\0\1\13\10\0\1\13\7\0\1\3\1\267"+
    "\23\3\2\0\1\3\11\0\3\3\1\0\4\3\2\0"+
    "\1\13\2\3\1\356\4\3\2\0\1\13\10\0\1\13"+
    "\7\0\25\3\2\0\1\3\11\0\3\3\1\0\4\3"+
    "\2\0\1\13\7\3\2\0\1\13\10\0\1\13\7\0"+
    "\10\3\1\357\14\3\2\0\1\3\11\0\3\3\1\0"+
    "\4\3\2\0\1\13\7\3\2\0\1\13\10\0\1\13"+
    "\7\0\7\3\1\360\15\3\2\0\1\3\11\0\3\3"+
    "\1\0\4\3\2\0\1\13\6\3\1\361\2\0\1\13"+
    "\10\0\1\13\7\0\25\3\2\0\1\3\11\0\3\3"+
    "\1\0\2\3\1\362\1\3\2\0\1\13\7\3\2\0"+
    "\1\13\10\0\1\13\7\0\16\3\1\327\1\363\1\364"+
    "\1\365\1\366\2\3\2\0\1\3\11\0\3\3\1\0"+
    "\4\3\2\0\1\13\7\3\2\0\1\13\10\0\1\13"+
    "\7\0\3\3\1\367\21\3\2\0\1\3\11\0\3\3"+
    "\1\0\4\3\2\0\1\13\7\3\2\0\1\13\10\0"+
    "\1\13\7\0\11\3\1\370\13\3\2\0\1\3\11\0"+
    "\3\3\1\0\4\3\2\0\1\13\5\3\1\371\1\3"+
    "\2\0\1\13\10\0\1\13\7\0\25\3\2\0\1\3"+
    "\11\0\3\3\1\0\4\3\2\0\1\13\7\3\2\0"+
    "\1\13\10\0\1\13\7\0\5\3\1\372\17\3\2\0"+
    "\1\3\11\0\3\3\1\0\4\3\2\0\1\13\7\3"+
    "\2\0\1\13\10\0\1\13\7\0\1\373\24\3\2\0"+
    "\1\3\11\0\3\3\1\0\4\3\2\0\1\13\7\3"+
    "\2\0\1\13\10\0\1\13\7\0\5\3\1\374\17\3"+
    "\2\0\1\3\11\0\3\3\1\0\4\3\2\0\1\13"+
    "\7\3\2\0\1\13\10\0\1\13\7\0\15\3\1\252"+
    "\7\3\2\0\1\3\11\0\3\3\1\0\4\3\2\0"+
    "\1\13\7\3\2\0\1\13\10\0\1\13\7\0\7\3"+
    "\1\375\15\3\2\0\1\3\11\0\1\13\2\376\1\74"+
    "\4\13\2\0\10\13\2\0\1\13\10\0\1\13\7\0"+
    "\16\13\7\376\2\0\1\13\11\0\1\13\2\272\1\74"+
    "\4\13\2\0\10\13\2\0\1\13\10\0\1\13\7\0"+
    "\16\13\7\272\2\0\1\13\12\0\2\74\1\277\57\0"+
    "\7\74\15\0\2\274\1\277\57\0\7\274\15\0\1\273"+
    "\1\274\1\275\57\0\7\274\15\0\2\173\1\277\57\0"+
    "\7\173\13\0\2\377\2\u0100\1\377\1\u0100\1\377\1\u0100"+
    "\4\377\2\u0100\30\377\1\u0100\1\377\1\u0100\1\377\1\u0100"+
    "\11\377\7\u0100\13\377\2\u0101\2\u0102\1\u0101\1\u0102\1\u0101"+
    "\1\u0102\4\u0101\2\u0102\30\u0101\1\u0102\1\u0101\1\u0102\1\u0101"+
    "\1\u0102\11\u0101\7\u0102\13\u0101\1\0\3\3\1\0\4\3"+
    "\2\0\1\13\3\3\1\267\3\3\2\0\1\13\10\0"+
    "\1\13\7\0\25\3\2\0\1\3\20\0\1\u0103\11\204"+
    "\1\u0104\63\0\2\204\2\207\1\204\1\207\1\204\1\207"+
    "\1\204\1\104\1\204\1\307\2\207\5\204\1\104\22\204"+
    "\1\207\1\204\1\207\1\204\1\207\11\204\7\207\23\204"+
    "\1\205\2\207\1\u0105\6\207\1\211\63\204\2\101\2\u0106"+
    "\1\101\1\u0106\1\101\1\u0106\1\101\1\102\1\101\1\103"+
    "\2\u0106\5\101\1\104\22\101\1\u0106\1\101\1\u0106\1\101"+
    "\1\u0106\11\101\7\u0106\15\101\2\u0107\1\101\1\u0107\1\101"+
    "\1\u0107\1\101\1\102\1\101\1\103\2\u0107\5\101\1\104"+
    "\22\101\1\u0107\1\101\1\u0107\1\101\1\u0107\11\101\7\u0107"+
    "\13\101\2\204\2\205\1\204\1\205\1\204\1\205\1\204"+
    "\1\104\1\204\1\307\2\205\5\204\1\104\22\204\1\205"+
    "\1\204\1\205\1\204\1\205\11\204\7\205\13\204\10\0"+
    "\1\u0108\11\212\1\u0109\63\0\2\212\2\214\1\212\1\214"+
    "\1\212\1\214\2\212\1\104\1\316\2\214\5\212\1\104"+
    "\22\212\1\214\1\212\1\214\1\212\1\214\11\212\7\214"+
    "\23\212\1\213\2\214\1\u010a\6\214\1\217\63\212\2\105"+
    "\2\u010b\1\105\1\u010b\1\105\1\u010b\2\105\1\102\1\106"+
    "\2\u010b\5\105\1\104\22\105\1\u010b\1\105\1\u010b\1\105"+
    "\1\u010b\11\105\7\u010b\15\105\2\u010c\1\105\1\u010c\1\105"+
    "\1\u010c\2\105\1\102\1\106\2\u010c\5\105\1\104\22\105"+
    "\1\u010c\1\105\1\u010c\1\105\1\u010c\11\105\7\u010c\13\105"+
    "\2\212\2\213\1\212\1\213\1\212\1\213\2\212\1\104"+
    "\1\316\2\213\5\212\1\104\22\212\1\213\1\212\1\213"+
    "\1\212\1\213\11\212\7\213\13\212\1\0\3\3\1\0"+
    "\4\3\2\0\1\13\7\3\2\0\1\13\10\0\1\13"+
    "\7\0\15\3\1\u010d\7\3\2\0\1\3\11\0\3\3"+
    "\1\0\4\3\2\0\1\13\2\3\1\u010e\4\3\2\0"+
    "\1\13\10\0\1\13\7\0\25\3\2\0\1\3\11\0"+
    "\3\3\1\0\4\3\2\0\1\13\7\3\2\0\1\13"+
    "\10\0\1\13\7\0\1\3\1\340\23\3\2\0\1\3"+
    "\11\0\3\3\1\0\4\3\2\0\1\13\4\3\1\u010f"+
    "\2\3\2\0\1\13\10\0\1\13\7\0\25\3\2\0"+
    "\1\3\11\0\3\3\1\0\2\3\1\u0110\1\3\2\0"+
    "\1\13\7\3\2\0\1\13\10\0\1\13\7\0\25\3"+
    "\2\0\1\3\11\0\3\3\1\0\4\3\2\0\1\13"+
    "\3\3\1\u0111\3\3\2\0\1\13\10\0\1\13\7\0"+
    "\25\3\2\0\1\3\11\0\3\3\1\0\4\3\2\0"+
    "\1\13\7\3\2\0\1\13\10\0\1\13\7\0\1\3"+
    "\1\u0112\23\3\2\0\1\3\11\0\3\3\1\0\2\3"+
    "\1\u0113\1\3\2\0\1\13\7\3\2\0\1\13\10\0"+
    "\1\13\7\0\25\3\2\0\1\3\11\0\3\3\1\0"+
    "\4\3\2\0\1\13\7\3\2\0\1\13\10\0\1\13"+
    "\7\0\16\3\1\327\1\363\1\364\1\365\1\366\2\3"+
    "\2\0\1\3\10\0\23\u0114\1\u0115\2\u0114\1\u0116\3\u0114"+
    "\1\0\1\342\52\u0114\23\240\1\341\6\240\1\22\1\342"+
    "\52\240\1\0\3\3\1\0\2\3\1\u0117\1\3\2\0"+
    "\1\13\7\3\2\0\1\13\10\0\1\13\7\0\25\3"+
    "\2\0\1\3\11\0\3\3\1\0\4\3\2\0\1\13"+
    "\2\3\1\u0118\4\3\2\0\1\13\10\0\1\13\7\0"+
    "\25\3\2\0\1\3\11\0\3\3\1\0\4\3\2\0"+
    "\1\13\7\3\2\0\1\13\10\0\1\13\7\0\2\3"+
    "\1\u0119\22\3\2\0\1\3\11\0\3\3\1\0\4\3"+
    "\2\0\1\13\2\3\1\u011a\4\3\2\0\1\13\10\0"+
    "\1\13\7\0\25\3\2\0\1\3\11\0\3\3\1\0"+
    "\4\3\2\0\1\13\7\3\2\0\1\13\10\0\1\13"+
    "\7\0\4\3\1\u011b\20\3\2\0\1\3\11\0\3\3"+
    "\1\0\4\3\2\0\1\13\7\3\2\0\1\13\10\0"+
    "\1\13\7\0\3\3\1\267\21\3\2\0\1\3\11\0"+
    "\3\3\1\0\4\3\2\0\1\13\7\3\2\0\1\13"+
    "\10\0\1\13\7\0\2\3\1\u011c\22\3\2\0\1\3"+
    "\11\0\3\3\1\0\4\3\2\0\1\13\3\3\1\u011d"+
    "\3\3\2\0\1\13\10\0\1\13\7\0\7\3\1\u011e"+
    "\15\3\2\0\1\3\11\0\3\3\1\0\4\3\2\0"+
    "\1\13\4\3\1\u011f\2\3\2\0\1\13\10\0\1\13"+
    "\7\0\25\3\2\0\1\3\11\0\3\3\1\0\4\3"+
    "\2\0\1\13\4\3\1\u0120\2\3\2\0\1\13\10\0"+
    "\1\13\7\0\11\3\1\u0121\13\3\2\0\1\3\11\0"+
    "\3\3\1\0\4\3\2\0\1\13\7\3\2\0\1\13"+
    "\10\0\1\13\7\0\7\3\1\u0122\15\3\2\0\1\3"+
    "\11\0\3\3\1\0\4\3\2\0\1\13\1\3\1\u0123"+
    "\5\3\2\0\1\13\10\0\1\13\7\0\25\3\2\0"+
    "\1\3\11\0\3\3\1\0\4\3\2\0\1\13\4\3"+
    "\1\u0124\2\3\2\0\1\13\10\0\1\13\7\0\25\3"+
    "\2\0\1\3\11\0\3\3\1\0\4\3\2\0\1\13"+
    "\3\3\1\u0125\3\3\2\0\1\13\10\0\1\13\7\0"+
    "\25\3\2\0\1\3\11\0\3\3\1\0\4\3\2\0"+
    "\1\13\7\3\2\0\1\13\10\0\1\13\7\0\20\3"+
    "\1\327\1\3\1\u0126\2\3\2\0\1\3\11\0\3\3"+
    "\1\0\4\3\2\0\1\13\7\3\2\0\1\13\10\0"+
    "\1\13\7\0\23\3\1\327\1\3\2\0\1\3\11\0"+
    "\3\3\1\0\4\3\2\0\1\13\7\3\2\0\1\13"+
    "\10\0\1\13\7\0\22\3\1\327\2\3\2\0\1\3"+
    "\11\0\3\3\1\0\4\3\2\0\1\13\7\3\2\0"+
    "\1\13\10\0\1\13\7\0\24\3\1\u0127\2\0\1\3"+
    "\11\0\3\3\1\0\4\3\2\0\1\13\3\3\1\u0128"+
    "\3\3\2\0\1\13\10\0\1\13\7\0\25\3\2\0"+
    "\1\3\11\0\3\3\1\0\4\3\2\0\1\13\7\3"+
    "\2\0\1\13\10\0\1\13\7\0\6\3\1\u0129\16\3"+
    "\2\0\1\3\11\0\3\3\1\0\4\3\2\0\1\13"+
    "\7\3\2\0\1\13\10\0\1\13\7\0\1\u012a\24\3"+
    "\2\0\1\3\11\0\3\3\1\0\4\3\2\0\1\13"+
    "\7\3\2\0\1\13\10\0\1\13\7\0\7\3\1\u012b"+
    "\15\3\2\0\1\3\11\0\3\3\1\0\4\3\2\0"+
    "\1\13\1\u012c\6\3\2\0\1\13\10\0\1\13\7\0"+
    "\25\3\2\0\1\3\11\0\3\3\1\0\2\3\1\u012d"+
    "\1\3\2\0\1\13\7\3\2\0\1\13\10\0\1\13"+
    "\7\0\25\3\2\0\1\3\11\0\3\3\1\0\4\3"+
    "\2\0\1\13\2\3\1\u012e\4\3\2\0\1\13\10\0"+
    "\1\13\7\0\25\3\2\0\1\3\10\0\2\377\2\u012f"+
    "\1\377\1\u012f\1\377\1\u012f\1\377\1\u0130\2\377\2\u012f"+
    "\30\377\1\u012f\1\377\1\u012f\1\377\1\u012f\11\377\7\u012f"+
    "\15\377\2\u0100\1\377\1\u0100\1\377\1\u0100\1\377\1\u0131"+
    "\2\377\2\u0100\30\377\1\u0100\1\377\1\u0100\1\377\1\u0100"+
    "\11\377\7\u0100\13\377\2\u0101\2\u0132\1\u0101\1\u0132\1\u0101"+
    "\1\u0132\2\u0101\1\u0133\1\u0101\2\u0132\30\u0101\1\u0132\1\u0101"+
    "\1\u0132\1\u0101\1\u0132\11\u0101\7\u0132\15\u0101\2\u0102\1\u0101"+
    "\1\u0102\1\u0101\1\u0102\2\u0101\1\u0134\1\u0101\2\u0102\30\u0101"+
    "\1\u0102\1\u0101\1\u0102\1\u0101\1\u0102\11\u0101\7\u0102\13\u0101"+
    "\2\0\2\u0135\1\0\1\u0135\1\0\1\u0135\4\0\2\u0135"+
    "\30\0\1\u0135\1\0\1\u0135\1\0\1\u0135\11\0\7\u0135"+
    "\15\0\2\u0136\1\0\1\u0136\1\0\1\u0136\4\0\2\u0136"+
    "\30\0\1\u0136\1\0\1\u0136\1\0\1\u0136\11\0\7\u0136"+
    "\13\0\11\207\1\313\1\207\1\311\7\207\1\104\62\207"+
    "\2\101\2\207\1\101\1\207\1\101\1\207\1\101\1\102"+
    "\1\101\1\103\2\207\5\101\1\104\22\101\1\207\1\101"+
    "\1\207\1\101\1\207\11\101\7\207\15\101\2\312\1\101"+
    "\1\312\1\101\1\312\1\101\1\102\1\101\1\103\2\312"+
    "\5\101\1\104\22\101\1\312\1\101\1\312\1\101\1\312"+
    "\11\101\7\312\13\101\2\0\2\u0137\1\0\1\u0137\1\0"+
    "\1\u0137\4\0\2\u0137\30\0\1\u0137\1\0\1\u0137\1\0"+
    "\1\u0137\11\0\7\u0137\15\0\2\u0138\1\0\1\u0138\1\0"+
    "\1\u0138\4\0\2\u0138\30\0\1\u0138\1\0\1\u0138\1\0"+
    "\1\u0138\11\0\7\u0138\13\0\12\214\1\322\1\320\7\214"+
    "\1\104\62\214\2\105\2\214\1\105\1\214\1\105\1\214"+
    "\2\105\1\102\1\106\2\214\5\105\1\104\22\105\1\214"+
    "\1\105\1\214\1\105\1\214\11\105\7\214\15\105\2\321"+
    "\1\105\1\321\1\105\1\321\2\105\1\102\1\106\2\321"+
    "\5\105\1\104\22\105\1\321\1\105\1\321\1\105\1\321"+
    "\11\105\7\321\13\105\1\0\3\3\1\0\4\3\2\0"+
    "\1\13\7\3\2\0\1\13\10\0\1\13\7\0\2\3"+
    "\1\u0139\22\3\2\0\1\3\11\0\3\3\1\0\4\3"+
    "\2\0\1\13\7\3\2\0\1\13\10\0\1\13\7\0"+
    "\7\3\1\u013a\15\3\2\0\1\3\11\0\3\3\1\0"+
    "\4\3\2\0\1\13\7\3\2\0\1\13\10\0\1\13"+
    "\7\0\12\3\1\267\12\3\2\0\1\3\11\0\3\3"+
    "\1\0\4\3\2\0\1\13\2\3\1\u013b\4\3\2\0"+
    "\1\13\10\0\1\13\7\0\25\3\2\0\1\3\11\0"+
    "\3\3\1\0\4\3\2\0\1\13\1\3\1\u013c\5\3"+
    "\2\0\1\13\10\0\1\13\7\0\25\3\2\0\1\3"+
    "\11\0\3\3\1\0\4\3\2\0\1\13\7\3\2\0"+
    "\1\13\10\0\1\13\7\0\4\3\1\327\20\3\2\0"+
    "\1\3\10\0\23\u0114\1\u0115\7\u0114\1\u0115\3\u013d\72\u0114"+
    "\1\u0115\6\u0114\1\u013e\1\u0115\3\u013d\72\u0114\1\u0115\2\u0114"+
    "\1\u0116\3\u0114\1\u013d\1\342\52\u0114\1\0\3\3\1\0"+
    "\4\3\2\0\1\13\7\3\2\0\1\13\10\0\1\13"+
    "\7\0\1\3\1\u013f\23\3\2\0\1\3\11\0\3\3"+
    "\1\0\4\3\2\0\1\13\7\3\2\0\1\13\10\0"+
    "\1\13\7\0\4\3\1\252\20\3\2\0\1\3\11\0"+
    "\3\3\1\0\4\3\2\0\1\13\4\3\1\u0140\2\3"+
    "\2\0\1\13\10\0\1\13\7\0\25\3\2\0\1\3"+
    "\11\0\3\3\1\0\4\3\2\0\1\13\7\3\2\0"+
    "\1\13\10\0\1\13\7\0\11\3\1\327\13\3\2\0"+
    "\1\3\11\0\3\3\1\0\4\3\2\0\1\13\7\3"+
    "\2\0\1\13\10\0\1\13\7\0\7\3\1\u0141\15\3"+
    "\2\0\1\3\11\0\3\3\1\0\4\3\2\0\1\13"+
    "\7\3\2\0\1\13\10\0\1\13\7\0\3\3\1\u0142"+
    "\21\3\2\0\1\3\11\0\3\3\1\0\4\3\2\0"+
    "\1\13\7\3\2\0\1\13\10\0\1\13\7\0\1\u0143"+
    "\24\3\2\0\1\3\11\0\3\3\1\0\4\3\2\0"+
    "\1\13\2\3\1\u0144\4\3\2\0\1\13\10\0\1\13"+
    "\7\0\25\3\2\0\1\3\11\0\3\3\1\0\4\3"+
    "\2\0\1\13\3\3\1\u0145\3\3\2\0\1\13\10\0"+
    "\1\13\7\0\25\3\2\0\1\3\11\0\3\3\1\0"+
    "\2\3\1\133\1\3\2\0\1\13\7\3\2\0\1\13"+
    "\10\0\1\13\7\0\25\3\2\0\1\3\11\0\3\3"+
    "\1\0\4\3\2\0\1\13\7\3\2\0\1\13\10\0"+
    "\1\13\7\0\1\u0146\24\3\2\0\1\3\11\0\3\3"+
    "\1\0\4\3\2\0\1\13\2\3\1\u0147\4\3\2\0"+
    "\1\13\10\0\1\13\7\0\25\3\2\0\1\3\11\0"+
    "\3\3\1\0\4\3\2\0\1\13\7\3\2\0\1\13"+
    "\10\0\1\13\7\0\7\3\1\u0148\15\3\2\0\1\3"+
    "\11\0\3\3\1\0\2\3\1\252\1\3\2\0\1\13"+
    "\7\3\2\0\1\13\10\0\1\13\7\0\25\3\2\0"+
    "\1\3\11\0\3\3\1\0\4\3\2\0\1\13\2\3"+
    "\1\u0149\4\3\2\0\1\13\10\0\1\13\7\0\25\3"+
    "\2\0\1\3\11\0\3\3\1\0\4\3\2\0\1\13"+
    "\7\3\2\0\1\13\10\0\1\13\7\0\16\3\1\327"+
    "\6\3\2\0\1\3\11\0\3\3\1\0\4\3\2\0"+
    "\1\13\7\3\2\0\1\13\10\0\1\13\7\0\20\3"+
    "\1\327\4\3\2\0\1\3\11\0\3\3\1\0\4\3"+
    "\2\0\1\13\4\3\1\133\2\3\2\0\1\13\10\0"+
    "\1\13\7\0\25\3\2\0\1\3\11\0\3\3\1\0"+
    "\4\3\2\0\1\13\7\3\2\0\1\13\10\0\1\13"+
    "\7\0\1\u014a\24\3\2\0\1\3\11\0\3\3\1\0"+
    "\4\3\2\0\1\13\4\3\1\u014b\2\3\2\0\1\13"+
    "\10\0\1\13\7\0\25\3\2\0\1\3\11\0\3\3"+
    "\1\0\4\3\2\0\1\13\7\3\2\0\1\13\10\0"+
    "\1\13\7\0\2\3\1\u014c\22\3\2\0\1\3\11\0"+
    "\3\3\1\0\4\3\2\0\1\13\7\3\2\0\1\13"+
    "\10\0\1\13\7\0\5\3\1\u014d\17\3\2\0\1\3"+
    "\11\0\3\3\1\0\4\3\2\0\1\13\7\3\2\0"+
    "\1\13\10\0\1\13\7\0\11\3\1\u014e\13\3\2\0"+
    "\1\3\12\0\2\u012f\1\0\1\u012f\1\0\1\u012f\1\0"+
    "\1\u014f\2\0\2\u012f\30\0\1\u012f\1\0\1\u012f\1\0"+
    "\1\u012f\11\0\7\u012f\15\0\2\u0132\1\0\1\u0132\1\0"+
    "\1\u0132\2\0\1\u014f\1\0\2\u0132\30\0\1\u0132\1\0"+
    "\1\u0132\1\0\1\u0132\11\0\7\u0132\15\0\2\204\1\0"+
    "\1\204\1\0\1\204\4\0\2\204\30\0\1\204\1\0"+
    "\1\204\1\0\1\204\11\0\7\204\15\0\2\u0103\1\0"+
    "\1\u0103\1\0\1\u0103\4\0\2\u0103\30\0\1\u0103\1\0"+
    "\1\u0103\1\0\1\u0103\11\0\7\u0103\15\0\2\212\1\0"+
    "\1\212\1\0\1\212\4\0\2\212\30\0\1\212\1\0"+
    "\1\212\1\0\1\212\11\0\7\212\15\0\2\u0108\1\0"+
    "\1\u0108\1\0\1\u0108\4\0\2\u0108\30\0\1\u0108\1\0"+
    "\1\u0108\1\0\1\u0108\11\0\7\u0108\14\0\3\3\1\0"+
    "\2\3\1\344\1\3\2\0\1\13\7\3\2\0\1\13"+
    "\10\0\1\13\7\0\25\3\2\0\1\3\11\0\3\3"+
    "\1\0\4\3\2\0\1\13\7\3\2\0\1\13\10\0"+
    "\1\13\7\0\3\3\1\u0150\21\3\2\0\1\3\11\0"+
    "\3\3\1\0\4\3\2\0\1\13\7\3\2\0\1\13"+
    "\10\0\1\13\7\0\1\3\1\u0151\23\3\2\0\1\3"+
    "\11\0\3\3\1\0\2\3\1\u0152\1\3\2\0\1\13"+
    "\7\3\2\0\1\13\10\0\1\13\7\0\25\3\2\0"+
    "\1\3\10\0\23\u013d\1\u0153\7\u013d\1\u0154\52\u013d\34\u013e"+
    "\3\0\47\u013e\1\0\3\3\1\0\4\3\2\0\1\13"+
    "\7\3\2\0\1\13\10\0\1\13\7\0\1\3\1\327"+
    "\23\3\2\0\1\3\11\0\3\3\1\0\4\3\2\0"+
    "\1\13\4\3\1\u0155\2\3\2\0\1\13\10\0\1\13"+
    "\7\0\25\3\2\0\1\3\11\0\3\3\1\0\4\3"+
    "\2\0\1\13\7\3\2\0\1\13\10\0\1\13\7\0"+
    "\4\3\1\u0139\20\3\2\0\1\3\11\0\3\3\1\0"+
    "\4\3\2\0\1\13\7\3\2\0\1\13\10\0\1\13"+
    "\7\0\2\3\1\u0156\22\3\2\0\1\3\11\0\3\3"+
    "\1\0\4\3\2\0\1\13\6\3\1\u0157\2\0\1\13"+
    "\10\0\1\13\7\0\25\3\2\0\1\3\11\0\3\3"+
    "\1\0\4\3\2\0\1\13\6\3\1\u0158\2\0\1\13"+
    "\10\0\1\13\7\0\25\3\2\0\1\3\11\0\3\3"+
    "\1\0\4\3\2\0\1\13\4\3\1\u0159\2\3\2\0"+
    "\1\13\10\0\1\13\7\0\25\3\2\0\1\3\11\0"+
    "\3\3\1\0\4\3\2\0\1\13\7\3\2\0\1\13"+
    "\10\0\1\13\7\0\11\3\1\133\13\3\2\0\1\3"+
    "\11\0\3\3\1\0\2\3\1\123\1\3\2\0\1\13"+
    "\7\3\2\0\1\13\10\0\1\13\7\0\25\3\2\0"+
    "\1\3\11\0\3\3\1\0\4\3\2\0\1\13\7\3"+
    "\2\0\1\13\10\0\1\13\7\0\1\u015a\24\3\2\0"+
    "\1\3\11\0\3\3\1\0\2\3\1\u014c\1\3\2\0"+
    "\1\13\7\3\2\0\1\13\10\0\1\13\7\0\25\3"+
    "\2\0\1\3\11\0\3\3\1\0\2\3\1\u015b\1\3"+
    "\2\0\1\13\7\3\2\0\1\13\10\0\1\13\7\0"+
    "\25\3\2\0\1\3\11\0\3\3\1\0\4\3\2\0"+
    "\1\13\2\3\1\u015c\4\3\2\0\1\13\10\0\1\13"+
    "\7\0\25\3\2\0\1\3\11\0\3\3\1\0\4\3"+
    "\2\0\1\13\3\3\1\344\3\3\2\0\1\13\10\0"+
    "\1\13\7\0\25\3\2\0\1\3\10\0\23\u013d\1\u0153"+
    "\2\u013d\1\u015d\3\u013d\1\0\1\u0154\75\u013d\1\u0153\6\u013d"+
    "\1\0\1\u0154\52\u013d\1\0\3\3\1\0\4\3\2\0"+
    "\1\13\7\3\2\0\1\13\10\0\1\13\7\0\12\3"+
    "\1\u015e\12\3\2\0\1\3\11\0\3\3\1\0\4\3"+
    "\2\0\1\13\4\3\1\u015f\2\3\2\0\1\13\10\0"+
    "\1\13\7\0\25\3\2\0\1\3\11\0\3\3\1\0"+
    "\2\3\1\u0160\1\3\2\0\1\13\7\3\2\0\1\13"+
    "\10\0\1\13\7\0\25\3\2\0\1\3\11\0\3\3"+
    "\1\0\4\3\2\0\1\13\7\3\2\0\1\13\10\0"+
    "\1\13\7\0\2\3\1\u0161\22\3\2\0\1\3\11\0"+
    "\3\3\1\0\2\3\1\u0162\1\3\2\0\1\13\7\3"+
    "\2\0\1\13\10\0\1\13\7\0\25\3\2\0\1\3"+
    "\11\0\3\3\1\0\4\3\2\0\1\13\7\3\2\0"+
    "\1\13\10\0\1\13\7\0\5\3\1\u015b\17\3\2\0"+
    "\1\3\10\0\23\u013d\1\u0153\2\u013d\1\u015d\4\u013d\1\u0154"+
    "\52\u013d\1\0\3\3\1\0\4\3\2\0\1\13\4\3"+
    "\1\u0163\2\3\2\0\1\13\10\0\1\13\7\0\25\3"+
    "\2\0\1\3\11\0\3\3\1\0\4\3\2\0\1\13"+
    "\7\3\2\0\1\13\10\0\1\13\7\0\2\3\1\u0164"+
    "\22\3\2\0\1\3\11\0\3\3\1\0\4\3\2\0"+
    "\1\13\7\3\2\0\1\13\10\0\1\13\7\0\3\3"+
    "\1\123\21\3\2\0\1\3\11\0\3\3\1\0\4\3"+
    "\2\0\1\13\7\3\2\0\1\13\10\0\1\13\7\0"+
    "\1\u0165\24\3\2\0\1\3\11\0\3\3\1\0\4\3"+
    "\2\0\1\13\7\3\2\0\1\13\10\0\1\13\7\0"+
    "\5\3\1\u0166\17\3\2\0\1\3\11\0\3\3\1\0"+
    "\4\3\2\0\1\13\7\3\2\0\1\13\10\0\1\13"+
    "\7\0\5\3\1\344\17\3\2\0\1\3\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20860];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\17\1\1\11\1\1\3\11\6\1\3\11"+
    "\11\1\2\11\5\1\4\11\13\1\1\0\1\1\1\0"+
    "\1\11\1\1\1\11\1\0\21\1\1\11\1\1\1\0"+
    "\1\11\41\1\1\0\13\1\1\0\5\1\1\0\56\1"+
    "\1\0\3\1\2\0\2\1\1\0\1\1\1\0\2\1"+
    "\1\0\1\1\1\0\1\1\1\0\2\1\1\0\1\1"+
    "\1\0\53\1\6\0\1\1\4\0\1\1\2\0\42\1"+
    "\1\0\2\1\1\0\2\1\4\0\4\1\1\0\21\1"+
    "\1\11\27\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[358];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 202) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return new Symbol(sym.ERROR_CEROS_A_LA_IZQUIERDA, yychar, yyline, yytext());
            }
          case 59: break;
          case 2: 
            { return new Symbol(sym.ERROR, yychar, yyline, yytext());
            }
          case 60: break;
          case 3: 
            { return new Symbol(sym.Identificador, yychar, yyline, yytext());
            }
          case 61: break;
          case 4: 
            { return new Symbol(sym.Numero, yychar, yyline, yytext());
            }
          case 62: break;
          case 5: 
            { return new Symbol(sym.Punto, yychar, yyline, yytext());
            }
          case 63: break;
          case 6: 
            { return new Symbol(sym.Comillas, yychar, yyline, yytext());
            }
          case 64: break;
          case 7: 
            { return new Symbol(sym.ERROR_CARACTERES_NO_VALIDOS, yychar, yyline, yytext());
            }
          case 65: break;
          case 8: 
            { /* ignore */
            }
          case 66: break;
          case 9: 
            { return new Symbol(sym.Menos, yychar, yyline, yytext());
            }
          case 67: break;
          case 10: 
            { return new Symbol(sym.P_coma, yychar, yyline, yytext());
            }
          case 68: break;
          case 11: 
            { return new Symbol(sym.Parentesis_c, yychar, yyline, yytext());
            }
          case 69: break;
          case 12: 
            { return new Symbol(sym.Pregunta, yychar, yyline, yytext());
            }
          case 70: break;
          case 13: 
            { return new Symbol(sym.Op_Aritmetico, yychar, yyline, yytext());
            }
          case 71: break;
          case 14: 
            { return new Symbol(sym.Op_logico, yychar, yyline, yytext());
            }
          case 72: break;
          case 15: 
            { return new Symbol(sym.OPERADOR, yychar, yyline, yytext());
            }
          case 73: break;
          case 16: 
            { return new Symbol(sym.Corchete_a, yychar, yyline, yytext());
            }
          case 74: break;
          case 17: 
            { return new Symbol(sym.Corchete_c, yychar, yyline, yytext());
            }
          case 75: break;
          case 18: 
            { return new Symbol(sym.Coma, yychar, yyline, yytext());
            }
          case 76: break;
          case 19: 
            { return new Symbol(sym.Dos_Puntos, yychar, yyline, yytext());
            }
          case 77: break;
          case 20: 
            { return new Symbol(sym.Igual, yychar, yyline, yytext());
            }
          case 78: break;
          case 21: 
            { return new Symbol(sym.Not, yychar, yyline, yytext());
            }
          case 79: break;
          case 22: 
            { return new Symbol(sym.Mas, yychar, yyline, yytext());
            }
          case 80: break;
          case 23: 
            { return new Symbol(sym.Parentesis_a, yychar, yyline, yytext());
            }
          case 81: break;
          case 24: 
            { return new Symbol(sym.Llave_a, yychar, yyline, yytext());
            }
          case 82: break;
          case 25: 
            { return new Symbol(sym.Llave_c, yychar, yyline, yytext());
            }
          case 83: break;
          case 26: 
            { return new Symbol(sym.Caret, yychar, yyline, yytext());
            }
          case 84: break;
          case 27: 
            { return new Symbol(sym.ERROR_IDENTIFICADOR, yychar, yyline, yytext());
            }
          case 85: break;
          case 28: 
            { return new Symbol(sym.ERROR_NOTACION_CIENTIFICA, yychar, yyline, yytext());
            }
          case 86: break;
          case 29: 
            { return new Symbol(sym.String, yychar, yyline, yytext());
            }
          case 87: break;
          case 30: 
            { return new Symbol(sym.ERROR_STRING, yychar, yyline, yytext());
            }
          case 88: break;
          case 31: 
            { return new Symbol(sym.Op_atribucion, yychar, yyline, yytext());
            }
          case 89: break;
          case 32: 
            { return new Symbol(sym.PALABRA_RESERVADA, yychar, yyline, yytext());
            }
          case 90: break;
          case 33: 
            { return new Symbol(sym.Do, yychar, yyline, yytext());
            }
          case 91: break;
          case 34: 
            { return new Symbol(sym.If, yychar, yyline, yytext());
            }
          case 92: break;
          case 35: 
            { return new Symbol(sym.For, yychar, yyline, yytext());
            }
          case 93: break;
          case 36: 
            { return new Symbol(sym.ERROR_COMENTARIO, yychar, yyline, yytext());
            }
          case 94: break;
          case 37: 
            { return new Symbol(sym.T_dato, yychar, yyline, yytext());
            }
          case 95: break;
          case 38: 
            { return new Symbol(sym.UNIDAD, yychar, yyline, yytext());
            }
          case 96: break;
          case 39: 
            { return new Symbol(sym.Enum, yychar, yyline, yytext());
            }
          case 97: break;
          case 40: 
            { return new Symbol(sym.Else, yychar, yyline, yytext());
            }
          case 98: break;
          case 41: 
            { return new Symbol(sym.This, yychar, yyline, yytext());
            }
          case 99: break;
          case 42: 
            { return new Symbol(sym.Op_booleano, yychar, yyline, yytext());
            }
          case 100: break;
          case 43: 
            { return new Symbol(sym.TRANSAC, yychar, yyline, yytext());
            }
          case 101: break;
          case 44: 
            { return new Symbol(sym.Main, yychar, yyline, yytext());
            }
          case 102: break;
          case 45: 
            { return new Symbol(sym.Break, yychar, yyline, yytext());
            }
          case 103: break;
          case 46: 
            { return new Symbol(sym.While, yychar, yyline, yytext());
            }
          case 104: break;
          case 47: 
            { return new Symbol(sym.ERROR_HEXADECIMAL, yychar, yyline, yytext());
            }
          case 105: break;
          case 48: 
            { return new Symbol(sym.Return, yychar, yyline, yytext());
            }
          case 106: break;
          case 49: 
            { return new Symbol(sym.Struct, yychar, yyline, yytext());
            }
          case 107: break;
          case 50: 
            { return new Symbol(sym.Pragma, yychar, yyline, yytext());
            }
          case 108: break;
          case 51: 
            { return new Symbol(sym.Visibilidad, yychar, yyline, yytext());
            }
          case 109: break;
          case 52: 
            { return new Symbol(sym.Cadena, yychar, yyline, yytext());
            }
          case 110: break;
          case 53: 
            { return new Symbol(sym.Returns, yychar, yyline, yytext());
            }
          case 111: break;
          case 54: 
            { return new Symbol(sym.Modificador, yychar, yyline, yytext());
            }
          case 112: break;
          case 55: 
            { return new Symbol(sym.Function, yychar, yyline, yytext());
            }
          case 113: break;
          case 56: 
            { return new Symbol(sym.Solidity, yychar, yyline, yytext());
            }
          case 114: break;
          case 57: 
            { return new Symbol(sym.Contract, yychar, yyline, yytext());
            }
          case 115: break;
          case 58: 
            { return new Symbol(sym.Continue, yychar, yyline, yytext());
            }
          case 116: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
