/* The following code was generated by JFlex 1.6.1 */

package lexico;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/lexico/lexerCup.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\30\1\24\1\36\1\36\1\3\22\0\1\30\1\75\1\12"+
    "\2\26\1\76\1\42\1\13\1\77\1\32\1\35\1\76\1\27\1\25"+
    "\1\5\1\34\1\2\1\65\1\70\1\67\1\71\1\72\1\66\1\4"+
    "\1\64\1\4\1\0\1\31\1\40\1\74\1\41\1\0\1\26\6\6"+
    "\14\1\1\73\7\1\1\44\1\14\1\45\1\0\2\26\1\46\1\15"+
    "\1\51\1\54\1\10\1\16\1\60\1\7\1\53\1\1\1\50\1\55"+
    "\1\56\1\17\1\52\1\57\1\1\1\20\1\47\1\21\1\23\1\22"+
    "\1\62\1\11\1\61\1\63\1\100\1\43\1\33\1\0\6\26\1\37"+
    "\u1e6e\26\u0134\0\1\36\1\36\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\3\2\1\3\4\2\1\4\10\2\1\5\1\6"+
    "\1\7\1\10\1\11\2\5\1\12\2\13\2\2\1\14"+
    "\1\15\12\2\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\1\1\24\1\25\1\24\1\1\3\22\1\1\2\22"+
    "\1\0\1\22\1\0\1\26\2\27\1\0\1\27\20\22"+
    "\1\30\1\3\1\0\1\31\1\13\1\17\1\32\7\22"+
    "\1\33\4\22\1\34\12\22\1\1\1\23\1\25\2\24"+
    "\1\1\1\25\2\1\1\0\1\1\1\32\3\22\1\1"+
    "\1\22\4\27\1\0\5\27\1\0\1\27\7\22\1\35"+
    "\10\22\1\36\10\22\1\37\15\22\1\40\1\22\2\1"+
    "\2\24\1\0\2\25\1\24\2\0\1\41\1\22\1\0"+
    "\1\42\1\0\2\27\1\0\1\26\1\0\1\27\1\0"+
    "\2\27\1\0\1\26\1\0\1\27\2\22\2\43\3\22"+
    "\1\44\2\22\1\43\2\36\1\22\1\45\5\22\1\45"+
    "\11\22\1\46\11\22\1\12\6\0\1\27\4\0\1\27"+
    "\2\0\6\22\3\36\1\47\26\22\1\50\1\22\1\0"+
    "\1\51\1\24\1\0\1\51\1\24\4\0\2\22\1\52"+
    "\1\22\1\0\1\36\1\22\1\53\11\22\1\54\1\22"+
    "\1\55\1\51\2\22\2\36\5\22\1\56\1\57\1\36"+
    "\1\60\1\61\6\22";

  private static int [] zzUnpackAction() {
    int [] result = new int[351];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\u0145\0\u0186\0\u01c7"+
    "\0\u0208\0\u0249\0\u028a\0\u02cb\0\u030c\0\u034d\0\u038e\0\u03cf"+
    "\0\u0410\0\u0451\0\u0492\0\u0104\0\101\0\101\0\101\0\u04d3"+
    "\0\u0514\0\u02cb\0\u0555\0\u0596\0\u05d7\0\u0618\0\101\0\101"+
    "\0\u0659\0\u069a\0\u06db\0\u071c\0\u075d\0\u079e\0\u07df\0\u0820"+
    "\0\u0861\0\u08a2\0\u08e3\0\u08e3\0\101\0\101\0\202\0\u0924"+
    "\0\u0965\0\u09a6\0\u09e7\0\u0145\0\u0a28\0\u0a69\0\u0aaa\0\u0aeb"+
    "\0\u0b2c\0\u0b6d\0\u0bae\0\u0bef\0\u0c30\0\u0249\0\101\0\u0c71"+
    "\0\101\0\u028a\0\u0cb2\0\u0cf3\0\u0d34\0\u0d75\0\u0db6\0\u0df7"+
    "\0\u0e38\0\u0e79\0\u0eba\0\u0efb\0\u0f3c\0\u0f7d\0\u0fbe\0\u0fff"+
    "\0\u1040\0\u1081\0\u10c2\0\101\0\u1103\0\u1144\0\101\0\101"+
    "\0\101\0\202\0\u1185\0\u11c6\0\u1207\0\u1248\0\u1289\0\u12ca"+
    "\0\u130b\0\202\0\u134c\0\u138d\0\u13ce\0\u140f\0\202\0\u1450"+
    "\0\u1491\0\u14d2\0\u1513\0\u1554\0\u1595\0\u15d6\0\u1617\0\u1658"+
    "\0\u1699\0\u16da\0\u171b\0\u175c\0\u179d\0\u17de\0\u181f\0\u1860"+
    "\0\u18a1\0\u18e2\0\u0b2c\0\u1923\0\u1964\0\u19a5\0\u19e6\0\u1a27"+
    "\0\u1a68\0\u1aa9\0\u1aea\0\u1b2b\0\u0249\0\u1b6c\0\u1bad\0\u1bee"+
    "\0\u1c2f\0\u1c70\0\u1cb1\0\u028a\0\u1cf2\0\u1d33\0\u1d74\0\u1db5"+
    "\0\u1df6\0\u1e37\0\u1e78\0\u1eb9\0\u1efa\0\202\0\u1f3b\0\u1f7c"+
    "\0\u1fbd\0\u1ffe\0\u203f\0\u2080\0\u20c1\0\u2102\0\u2143\0\u2184"+
    "\0\u21c5\0\u2206\0\u2247\0\u2288\0\u22c9\0\u230a\0\u234b\0\u238c"+
    "\0\u23cd\0\u240e\0\u244f\0\u2490\0\u24d1\0\u2512\0\u2553\0\u2594"+
    "\0\u25d5\0\u2616\0\u2657\0\u2698\0\u26d9\0\202\0\u271a\0\u275b"+
    "\0\u279c\0\u27dd\0\u281e\0\u181f\0\u285f\0\u181f\0\u28a0\0\u28e1"+
    "\0\u2922\0\202\0\u2963\0\u1a68\0\202\0\u29a4\0\u29e5\0\u2a26"+
    "\0\u2a67\0\u1aea\0\u2aa8\0\u2ae9\0\u2b2a\0\u2b6b\0\u2bac\0\u2bed"+
    "\0\u1c2f\0\u2c2e\0\u2c6f\0\u2cb0\0\u2cf1\0\202\0\u2d32\0\u2d73"+
    "\0\u2db4\0\u2df5\0\202\0\u2e36\0\u2e77\0\u2eb8\0\u2ef9\0\u2f3a"+
    "\0\u2f7b\0\202\0\u2fbc\0\u2ffd\0\u303e\0\u307f\0\u30c0\0\u3101"+
    "\0\u3142\0\u3183\0\u31c4\0\u3205\0\u3246\0\u3287\0\u32c8\0\u3309"+
    "\0\u334a\0\202\0\u338b\0\u33cc\0\u340d\0\u344e\0\u348f\0\u34d0"+
    "\0\u3511\0\u3552\0\u3593\0\u275b\0\u35d4\0\u3615\0\u3656\0\u3697"+
    "\0\u36d8\0\u3719\0\u375a\0\u379b\0\u37dc\0\u381d\0\u385e\0\u389f"+
    "\0\u38e0\0\u3921\0\u3962\0\u39a3\0\u39e4\0\u3a25\0\u3a66\0\u3aa7"+
    "\0\u3ae8\0\u3b29\0\u3b6a\0\101\0\u3bab\0\u3bec\0\u3c2d\0\u3c6e"+
    "\0\u3caf\0\u3cf0\0\u3d31\0\u3d72\0\u3db3\0\u3df4\0\u3e35\0\u3e76"+
    "\0\u3eb7\0\u3ef8\0\u3f39\0\u3f7a\0\u3fbb\0\u3ffc\0\u403d\0\u407e"+
    "\0\u40bf\0\u4100\0\202\0\u4141\0\u4182\0\u35d4\0\u35d4\0\u41c3"+
    "\0\u3656\0\u3656\0\u4204\0\u4245\0\u4286\0\u42c7\0\u4308\0\u4349"+
    "\0\u1fbd\0\u438a\0\u43cb\0\u440c\0\u444d\0\202\0\u448e\0\u44cf"+
    "\0\u4510\0\u4551\0\u4592\0\u45d3\0\u4614\0\u4655\0\u4696\0\202"+
    "\0\u46d7\0\202\0\101\0\u4718\0\u4759\0\u479a\0\u47db\0\u481c"+
    "\0\u485d\0\u489e\0\u48df\0\u4920\0\202\0\202\0\u4961\0\202"+
    "\0\202\0\u49a2\0\u49e3\0\u4a24\0\u4a65\0\u4aa6\0\u4ae7";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[351];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\3\1\10"+
    "\1\11\1\3\1\12\1\13\1\14\1\15\1\16\1\3"+
    "\1\17\1\20\1\21\1\22\1\5\1\23\1\14\1\24"+
    "\1\5\1\25\1\26\1\27\1\30\1\31\1\0\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\3\1\43\1\3\1\44\1\45\1\3\1\46\1\47"+
    "\1\3\1\50\1\51\1\3\7\6\1\52\1\53\1\54"+
    "\1\23\1\55\1\56\102\0\2\57\1\0\1\57\1\0"+
    "\4\57\2\0\1\32\7\57\2\0\1\32\10\0\1\32"+
    "\6\0\26\57\6\0\1\60\1\61\1\0\1\61\1\62"+
    "\2\60\1\63\1\60\2\0\1\32\7\60\2\0\1\32"+
    "\10\0\1\32\6\0\16\60\7\61\1\60\10\0\1\5"+
    "\20\0\1\5\2\0\2\5\51\0\1\60\1\64\1\0"+
    "\1\64\1\62\2\60\1\63\1\60\2\0\1\32\7\60"+
    "\2\0\1\32\10\0\1\32\6\0\16\60\7\64\1\60"+
    "\7\0\1\62\1\0\1\62\3\0\1\65\53\0\7\62"+
    "\7\0\2\57\1\0\1\57\1\0\2\57\1\66\1\57"+
    "\2\0\1\32\7\57\2\0\1\32\10\0\1\32\6\0"+
    "\4\57\1\67\21\57\6\0\1\57\1\70\1\0\1\70"+
    "\1\71\4\57\2\0\1\32\2\57\1\72\1\57\1\73"+
    "\2\57\1\0\1\74\1\32\10\0\1\32\6\0\7\57"+
    "\1\75\6\57\7\70\1\57\5\0\12\76\1\77\1\76"+
    "\1\100\7\76\1\101\54\76\13\102\1\77\1\103\7\102"+
    "\1\101\54\102\1\0\2\32\1\0\1\32\1\0\4\32"+
    "\2\0\10\32\2\0\1\32\10\0\1\32\6\0\26\32"+
    "\6\0\2\57\1\0\1\57\1\0\4\57\2\0\1\32"+
    "\3\57\1\104\3\57\2\0\1\32\10\0\1\32\6\0"+
    "\1\105\3\57\1\106\6\57\1\107\12\57\6\0\2\57"+
    "\1\0\1\57\1\0\4\57\2\0\1\32\3\57\1\110"+
    "\2\57\1\111\2\0\1\32\10\0\1\32\6\0\1\112"+
    "\3\57\1\113\1\114\20\57\6\0\2\57\1\0\1\57"+
    "\1\0\2\57\1\115\1\57\2\0\1\32\7\57\2\0"+
    "\1\32\10\0\1\32\6\0\26\57\6\0\2\57\1\0"+
    "\1\57\1\0\1\57\1\116\2\57\2\0\1\32\3\57"+
    "\1\117\3\57\2\0\1\32\10\0\1\32\6\0\26\57"+
    "\6\0\2\57\1\0\1\57\1\0\4\57\2\0\1\32"+
    "\7\57\2\0\1\32\10\0\1\32\6\0\1\120\4\57"+
    "\1\121\20\57\6\0\2\57\1\0\1\57\1\0\4\57"+
    "\2\0\1\32\1\57\1\122\5\57\2\0\1\32\10\0"+
    "\1\32\6\0\5\57\1\123\20\57\101\0\1\124\40\0"+
    "\1\125\1\126\36\0\1\124\41\0\1\127\36\0\1\124"+
    "\44\0\1\130\33\0\1\130\45\0\1\130\32\0\1\130"+
    "\46\0\1\131\101\0\1\131\36\0\2\57\1\0\1\57"+
    "\1\0\4\57\2\0\1\32\7\57\2\0\1\32\10\0"+
    "\1\32\6\0\1\57\1\132\4\57\1\133\17\57\6\0"+
    "\2\57\1\0\1\57\1\0\2\57\1\134\1\57\2\0"+
    "\1\32\4\57\1\135\2\57\2\0\1\32\10\0\1\32"+
    "\6\0\4\57\1\136\10\57\1\137\10\57\6\0\2\57"+
    "\1\0\1\57\1\0\4\57\2\0\1\32\7\57\2\0"+
    "\1\32\10\0\1\32\6\0\1\140\3\57\1\141\21\57"+
    "\6\0\2\57\1\0\1\57\1\0\4\57\2\0\1\32"+
    "\1\57\1\142\1\143\4\57\2\0\1\32\10\0\1\32"+
    "\6\0\10\57\1\144\15\57\6\0\2\57\1\0\1\57"+
    "\1\0\2\57\1\145\1\57\2\0\1\32\7\57\2\0"+
    "\1\32\10\0\1\32\6\0\1\146\3\57\1\147\21\57"+
    "\6\0\2\57\1\0\1\57\1\0\4\57\2\0\1\32"+
    "\7\57\2\0\1\32\10\0\1\32\6\0\1\150\3\57"+
    "\1\151\1\152\20\57\6\0\2\57\1\0\1\57\1\0"+
    "\4\57\2\0\1\32\3\57\1\153\2\57\1\154\2\0"+
    "\1\32\10\0\1\32\6\0\1\155\25\57\6\0\2\57"+
    "\1\0\1\57\1\0\2\57\1\156\1\57\2\0\1\32"+
    "\7\57\2\0\1\32\10\0\1\32\6\0\26\57\6\0"+
    "\2\57\1\0\1\57\1\0\1\57\1\157\1\160\1\57"+
    "\2\0\1\32\7\57\2\0\1\32\10\0\1\32\6\0"+
    "\26\57\6\0\2\57\1\0\1\57\1\0\4\57\2\0"+
    "\1\32\4\57\1\161\2\57\2\0\1\32\10\0\1\32"+
    "\6\0\26\57\101\0\1\130\5\0\1\60\1\32\1\0"+
    "\1\32\1\0\4\60\2\0\1\32\7\60\2\0\1\32"+
    "\10\0\1\32\6\0\16\60\7\32\1\60\6\0\1\60"+
    "\1\61\1\0\1\61\1\162\2\60\1\163\1\60\2\0"+
    "\1\32\7\60\2\0\1\32\10\0\1\32\6\0\16\60"+
    "\7\61\1\60\7\0\1\62\1\0\1\62\3\0\1\164"+
    "\53\0\7\62\7\0\1\60\1\165\1\0\1\166\1\167"+
    "\4\60\2\0\1\32\7\60\1\0\1\170\1\32\10\0"+
    "\1\32\6\0\16\60\7\166\1\60\7\0\1\171\1\0"+
    "\1\172\1\173\17\0\1\174\36\0\7\172\7\0\2\57"+
    "\1\0\1\57\1\0\3\57\1\175\2\0\1\32\7\57"+
    "\2\0\1\32\10\0\1\32\6\0\26\57\6\0\2\57"+
    "\1\0\1\57\1\0\4\57\2\0\1\32\6\57\1\176"+
    "\2\0\1\32\10\0\1\32\6\0\26\57\6\0\1\57"+
    "\1\70\1\0\1\70\1\71\4\57\2\0\1\32\7\57"+
    "\2\0\1\32\10\0\1\32\6\0\16\57\7\70\1\57"+
    "\7\0\1\71\1\0\1\71\57\0\7\71\7\0\2\57"+
    "\1\0\1\57\1\0\4\57\2\0\1\32\6\57\1\177"+
    "\2\0\1\32\10\0\1\32\6\0\26\57\6\0\2\57"+
    "\1\0\1\57\1\0\1\57\1\200\2\57\2\0\1\32"+
    "\7\57\2\0\1\32\10\0\1\32\6\0\26\57\7\0"+
    "\1\201\1\0\1\172\1\71\56\0\7\172\7\0\2\57"+
    "\1\0\1\57\1\0\4\57\2\0\1\32\7\57\2\0"+
    "\1\32\10\0\1\32\6\0\1\57\1\202\24\57\5\0"+
    "\11\203\1\204\1\205\1\206\1\207\6\206\1\210\55\203"+
    "\11\211\1\212\1\213\1\214\1\215\6\213\1\216\55\211"+
    "\1\0\2\57\1\0\1\57\1\0\2\57\1\217\1\57"+
    "\2\0\1\32\7\57\2\0\1\32\10\0\1\32\6\0"+
    "\26\57\6\0\2\57\1\0\1\57\1\0\4\57\2\0"+
    "\1\32\7\57\2\0\1\32\10\0\1\32\6\0\7\57"+
    "\1\220\16\57\6\0\2\57\1\0\1\57\1\0\4\57"+
    "\2\0\1\32\7\57\2\0\1\32\10\0\1\32\6\0"+
    "\4\57\1\221\21\57\6\0\2\57\1\0\1\57\1\0"+
    "\4\57\2\0\1\32\4\57\1\222\2\57\2\0\1\32"+
    "\10\0\1\32\6\0\26\57\6\0\2\57\1\0\1\57"+
    "\1\0\4\57\2\0\1\32\7\57\2\0\1\32\10\0"+
    "\1\32\6\0\4\57\1\223\21\57\6\0\2\57\1\0"+
    "\1\57\1\0\4\57\2\0\1\32\2\57\1\224\4\57"+
    "\2\0\1\32\10\0\1\32\6\0\26\57\6\0\2\57"+
    "\1\0\1\57\1\0\4\57\2\0\1\32\7\57\2\0"+
    "\1\32\10\0\1\32\6\0\7\57\1\225\16\57\6\0"+
    "\2\57\1\0\1\57\1\0\4\57\2\0\1\32\3\57"+
    "\1\226\3\57\2\0\1\32\10\0\1\32\6\0\26\57"+
    "\6\0\2\57\1\0\1\57\1\0\4\57\2\0\1\32"+
    "\2\57\1\227\4\57\2\0\1\32\10\0\1\32\6\0"+
    "\26\57\6\0\2\57\1\0\1\57\1\0\4\57\2\0"+
    "\1\32\4\57\1\230\2\57\2\0\1\32\10\0\1\32"+
    "\6\0\26\57\6\0\2\57\1\0\1\57\1\0\4\57"+
    "\2\0\1\32\7\57\2\0\1\32\10\0\1\32\6\0"+
    "\5\57\1\231\20\57\6\0\2\57\1\0\1\57\1\0"+
    "\4\57\2\0\1\32\6\57\1\232\2\0\1\32\10\0"+
    "\1\32\6\0\1\233\25\57\6\0\2\57\1\0\1\57"+
    "\1\0\4\57\2\0\1\32\3\57\1\132\3\57\2\0"+
    "\1\32\10\0\1\32\6\0\26\57\6\0\2\57\1\0"+
    "\1\57\1\0\2\57\1\234\1\57\2\0\1\32\7\57"+
    "\2\0\1\32\10\0\1\32\6\0\26\57\6\0\2\57"+
    "\1\0\1\57\1\0\4\57\2\0\1\32\7\57\2\0"+
    "\1\32\10\0\1\32\6\0\5\57\1\235\20\57\6\0"+
    "\2\57\1\0\1\57\1\0\4\57\2\0\1\32\2\57"+
    "\1\236\4\57\2\0\1\32\10\0\1\32\6\0\26\57"+
    "\5\0\3\125\1\0\20\125\1\0\11\125\2\0\41\125"+
    "\35\0\1\237\44\0\2\57\1\0\1\57\1\0\4\57"+
    "\2\0\1\32\7\57\2\0\1\32\10\0\1\32\6\0"+
    "\6\57\1\240\17\57\6\0\2\57\1\0\1\57\1\0"+
    "\4\57\2\0\1\32\2\57\1\241\4\57\2\0\1\32"+
    "\10\0\1\32\6\0\3\57\1\242\22\57\6\0\2\57"+
    "\1\0\1\57\1\0\4\57\2\0\1\32\3\57\1\243"+
    "\3\57\2\0\1\32\10\0\1\32\6\0\26\57\6\0"+
    "\2\57\1\0\1\57\1\0\4\57\2\0\1\32\7\57"+
    "\2\0\1\32\10\0\1\32\6\0\7\57\1\244\16\57"+
    "\6\0\2\57\1\0\1\57\1\0\4\57\2\0\1\32"+
    "\7\57\2\0\1\32\10\0\1\32\6\0\1\245\25\57"+
    "\6\0\2\57\1\0\1\57\1\0\4\57\2\0\1\32"+
    "\7\57\2\0\1\32\10\0\1\32\6\0\7\57\1\246"+
    "\16\57\6\0\2\57\1\0\1\57\1\0\4\57\2\0"+
    "\1\32\2\57\1\247\4\57\2\0\1\32\10\0\1\32"+
    "\6\0\26\57\6\0\2\57\1\0\1\57\1\0\4\57"+
    "\2\0\1\32\4\57\1\250\2\57\2\0\1\32\10\0"+
    "\1\32\6\0\26\57\6\0\2\57\1\0\1\57\1\0"+
    "\4\57\2\0\1\32\7\57\2\0\1\32\10\0\1\32"+
    "\6\0\11\57\1\251\14\57\6\0\2\57\1\0\1\57"+
    "\1\0\4\57\2\0\1\32\7\57\2\0\1\32\10\0"+
    "\1\32\6\0\7\57\1\252\16\57\6\0\2\57\1\0"+
    "\1\57\1\0\4\57\2\0\1\32\7\57\2\0\1\32"+
    "\10\0\1\32\6\0\13\57\1\253\12\57\6\0\2\57"+
    "\1\0\1\57\1\0\4\57\2\0\1\32\7\57\2\0"+
    "\1\32\10\0\1\32\6\0\5\57\1\254\3\57\1\255"+
    "\14\57\6\0\2\57\1\0\1\57\1\0\4\57\2\0"+
    "\1\32\7\57\2\0\1\32\10\0\1\32\6\0\6\57"+
    "\1\256\17\57\6\0\2\57\1\0\1\57\1\0\4\57"+
    "\2\0\1\32\2\57\1\257\4\57\2\0\1\32\10\0"+
    "\1\32\6\0\26\57\6\0\2\57\1\0\1\57\1\0"+
    "\4\57\2\0\1\32\7\57\2\0\1\32\10\0\1\32"+
    "\6\0\1\260\4\57\1\261\20\57\6\0\2\57\1\0"+
    "\1\57\1\0\4\57\2\0\1\32\1\262\6\57\2\0"+
    "\1\32\10\0\1\32\6\0\26\57\6\0\2\57\1\0"+
    "\1\57\1\0\4\57\2\0\1\32\7\57\2\0\1\32"+
    "\10\0\1\32\6\0\13\57\1\263\12\57\6\0\2\57"+
    "\1\0\1\57\1\0\4\57\2\0\1\32\7\57\2\0"+
    "\1\32\10\0\1\32\6\0\1\176\25\57\6\0\2\57"+
    "\1\0\1\57\1\0\4\57\2\0\1\32\7\57\2\0"+
    "\1\32\10\0\1\32\6\0\5\57\1\264\20\57\6\0"+
    "\2\57\1\0\1\57\1\0\2\57\1\265\1\57\2\0"+
    "\1\32\7\57\2\0\1\32\10\0\1\32\6\0\5\57"+
    "\1\266\20\57\6\0\2\57\1\0\1\57\1\0\4\57"+
    "\2\0\1\32\3\57\1\267\3\57\2\0\1\32\10\0"+
    "\1\32\6\0\26\57\7\0\1\162\1\0\1\162\3\0"+
    "\1\65\53\0\7\162\7\0\1\60\1\270\1\0\1\271"+
    "\1\71\4\60\2\0\1\32\7\60\1\0\1\74\1\32"+
    "\10\0\1\32\6\0\16\60\7\271\1\60\7\0\1\272"+
    "\1\0\1\273\1\274\17\0\1\275\36\0\7\273\7\0"+
    "\1\32\1\271\1\0\1\271\1\276\4\32\2\0\10\32"+
    "\2\0\1\32\10\0\1\32\6\0\16\32\7\271\1\32"+
    "\6\0\1\32\1\166\1\0\1\166\1\276\4\32\2\0"+
    "\10\32\2\0\1\32\10\0\1\32\6\0\16\32\7\166"+
    "\1\32\7\0\1\276\1\0\1\276\57\0\7\276\10\0"+
    "\1\277\1\0\1\273\1\167\56\0\7\273\10\0\1\71"+
    "\1\0\2\71\56\0\7\71\10\0\1\172\1\0\1\172"+
    "\1\71\56\0\7\172\10\0\1\171\1\0\1\172\1\173"+
    "\56\0\7\172\7\0\2\57\1\0\1\57\1\0\4\57"+
    "\1\300\1\301\1\32\7\57\2\0\1\32\10\0\1\32"+
    "\6\0\26\57\6\0\2\57\1\0\1\57\1\0\4\57"+
    "\2\0\1\32\3\57\1\253\3\57\2\0\1\32\10\0"+
    "\1\32\6\0\26\57\6\0\2\57\1\0\1\57\1\0"+
    "\4\57\2\0\1\32\7\57\2\0\1\32\10\0\1\32"+
    "\6\0\10\57\1\302\15\57\6\0\2\57\1\0\1\57"+
    "\1\0\2\57\1\303\1\57\2\0\1\32\7\57\2\0"+
    "\1\32\10\0\1\32\6\0\26\57\7\0\1\304\1\0"+
    "\1\304\1\71\56\0\7\304\7\0\2\57\1\0\1\57"+
    "\1\0\2\57\1\305\1\57\2\0\1\32\7\57\2\0"+
    "\1\32\10\0\1\32\6\0\26\57\5\0\12\203\1\101"+
    "\1\203\1\306\7\203\1\101\56\203\1\307\1\203\1\307"+
    "\1\203\1\307\1\203\1\307\1\203\1\101\1\203\1\306"+
    "\2\307\5\203\1\101\21\203\1\307\2\203\1\307\2\203"+
    "\1\307\7\203\7\307\6\203\12\206\1\77\1\206\1\310"+
    "\7\206\1\101\54\206\11\76\1\311\1\312\1\206\1\100"+
    "\6\206\1\313\1\101\54\76\2\203\1\314\1\203\1\314"+
    "\1\203\1\314\1\203\1\314\1\203\1\101\1\203\1\306"+
    "\2\314\5\203\1\101\21\203\1\314\2\203\1\314\2\203"+
    "\1\314\7\203\7\314\6\203\13\211\1\101\1\315\7\211"+
    "\1\101\56\211\1\316\1\211\1\316\1\211\1\316\1\211"+
    "\1\316\2\211\1\101\1\315\2\316\5\211\1\101\21\211"+
    "\1\316\2\211\1\316\2\211\1\316\7\211\7\316\6\211"+
    "\13\213\1\77\1\317\7\213\1\101\54\213\11\102\1\320"+
    "\1\213\1\321\1\103\6\213\1\322\1\101\54\102\2\211"+
    "\1\323\1\211\1\323\1\211\1\323\1\211\1\323\2\211"+
    "\1\101\1\315\2\323\5\211\1\101\21\211\1\323\2\211"+
    "\1\323\2\211\1\323\7\211\7\323\6\211\1\0\2\57"+
    "\1\0\1\57\1\0\4\57\2\0\1\32\7\57\2\0"+
    "\1\32\10\0\1\32\6\0\1\324\25\57\6\0\2\57"+
    "\1\0\1\57\1\0\4\57\2\0\1\32\7\57\2\0"+
    "\1\32\10\0\1\32\6\0\1\325\25\57\6\0\2\57"+
    "\1\0\1\57\1\0\4\57\2\0\1\32\7\57\2\0"+
    "\1\32\10\0\1\32\6\0\7\57\1\326\16\57\6\0"+
    "\2\57\1\0\1\57\1\0\2\57\1\327\1\57\2\0"+
    "\1\32\7\57\2\0\1\32\10\0\1\32\6\0\26\57"+
    "\6\0\2\57\1\0\1\57\1\0\4\57\2\0\1\32"+
    "\7\57\2\0\1\32\10\0\1\32\6\0\10\57\1\132"+
    "\15\57\6\0\2\57\1\0\1\57\1\0\4\57\2\0"+
    "\1\32\7\57\2\0\1\32\10\0\1\32\6\0\3\57"+
    "\1\330\22\57\6\0\2\57\1\0\1\57\1\0\4\57"+
    "\2\0\1\32\7\57\2\0\1\32\10\0\1\32\6\0"+
    "\1\57\1\232\24\57\6\0\2\57\1\0\1\57\1\0"+
    "\4\57\2\0\1\32\2\57\1\331\4\57\2\0\1\32"+
    "\10\0\1\32\6\0\26\57\6\0\2\57\1\0\1\57"+
    "\1\0\4\57\2\0\1\32\6\57\1\332\2\0\1\32"+
    "\10\0\1\32\6\0\26\57\6\0\2\57\1\0\1\57"+
    "\1\0\4\57\2\0\1\32\7\57\2\0\1\32\10\0"+
    "\1\32\6\0\1\57\1\132\24\57\6\0\2\57\1\0"+
    "\1\57\1\0\2\57\1\333\1\57\2\0\1\32\7\57"+
    "\2\0\1\32\10\0\1\32\6\0\26\57\6\0\2\57"+
    "\1\0\1\57\1\0\4\57\2\0\1\32\2\57\1\334"+
    "\4\57\2\0\1\32\10\0\1\32\6\0\26\57\6\0"+
    "\2\57\1\0\1\57\1\0\4\57\2\0\1\32\7\57"+
    "\2\0\1\32\10\0\1\32\6\0\14\57\1\132\11\57"+
    "\6\0\2\57\1\0\1\57\1\0\3\57\1\335\2\0"+
    "\1\32\7\57\2\0\1\32\10\0\1\32\6\0\26\57"+
    "\6\0\2\57\1\0\1\57\1\0\4\57\2\0\1\32"+
    "\4\57\1\336\2\57\2\0\1\32\10\0\1\32\6\0"+
    "\26\57\5\0\24\237\1\337\10\237\1\340\43\237\1\0"+
    "\2\57\1\0\1\57\1\0\4\57\2\0\1\32\3\57"+
    "\1\341\3\57\2\0\1\32\10\0\1\32\6\0\26\57"+
    "\6\0\2\57\1\0\1\57\1\0\4\57\2\0\1\32"+
    "\7\57\2\0\1\32\10\0\1\32\6\0\6\57\1\342"+
    "\17\57\6\0\2\57\1\0\1\57\1\0\4\57\2\0"+
    "\1\32\7\57\2\0\1\32\10\0\1\32\6\0\4\57"+
    "\1\343\21\57\6\0\2\57\1\0\1\57\1\0\4\57"+
    "\2\0\1\32\6\57\1\344\2\0\1\32\10\0\1\32"+
    "\6\0\5\57\1\345\20\57\6\0\2\57\1\0\1\57"+
    "\1\0\4\57\2\0\1\32\7\57\2\0\1\32\10\0"+
    "\1\32\6\0\5\57\1\346\20\57\6\0\2\57\1\0"+
    "\1\57\1\0\4\57\2\0\1\32\1\347\6\57\2\0"+
    "\1\32\10\0\1\32\6\0\26\57\6\0\2\57\1\0"+
    "\1\57\1\0\4\57\2\0\1\32\7\57\2\0\1\32"+
    "\10\0\1\32\6\0\7\57\1\350\16\57\6\0\2\57"+
    "\1\0\1\57\1\0\4\57\2\0\1\32\4\57\1\351"+
    "\2\57\2\0\1\32\10\0\1\32\6\0\1\57\1\352"+
    "\24\57\6\0\2\57\1\0\1\57\1\0\2\57\1\353"+
    "\1\57\2\0\1\32\7\57\2\0\1\32\10\0\1\32"+
    "\6\0\16\57\1\326\1\354\1\355\1\356\1\357\3\57"+
    "\6\0\2\57\1\0\1\57\1\0\4\57\2\0\1\32"+
    "\7\57\2\0\1\32\10\0\1\32\6\0\4\57\1\360"+
    "\21\57\6\0\2\57\1\0\1\57\1\0\2\57\1\361"+
    "\1\57\2\0\1\32\7\57\2\0\1\32\10\0\1\32"+
    "\6\0\26\57\6\0\2\57\1\0\1\57\1\0\4\57"+
    "\2\0\1\32\7\57\2\0\1\32\10\0\1\32\6\0"+
    "\1\57\1\266\24\57\6\0\2\57\1\0\1\57\1\0"+
    "\4\57\2\0\1\32\2\57\1\362\4\57\2\0\1\32"+
    "\10\0\1\32\6\0\26\57\6\0\2\57\1\0\1\57"+
    "\1\0\4\57\2\0\1\32\7\57\2\0\1\32\10\0"+
    "\1\32\6\0\11\57\1\363\14\57\6\0\2\57\1\0"+
    "\1\57\1\0\4\57\2\0\1\32\7\57\2\0\1\32"+
    "\10\0\1\32\6\0\5\57\1\364\20\57\6\0\2\57"+
    "\1\0\1\57\1\0\4\57\2\0\1\32\6\57\1\365"+
    "\2\0\1\32\10\0\1\32\6\0\26\57\6\0\2\57"+
    "\1\0\1\57\1\0\4\57\2\0\1\32\7\57\2\0"+
    "\1\32\10\0\1\32\6\0\12\57\1\366\13\57\6\0"+
    "\2\57\1\0\1\57\1\0\4\57\2\0\1\32\5\57"+
    "\1\367\1\57\2\0\1\32\10\0\1\32\6\0\26\57"+
    "\6\0\2\57\1\0\1\57\1\0\4\57\2\0\1\32"+
    "\7\57\2\0\1\32\10\0\1\32\6\0\7\57\1\370"+
    "\16\57\6\0\2\57\1\0\1\57\1\0\4\57\2\0"+
    "\1\32\7\57\2\0\1\32\10\0\1\32\6\0\1\371"+
    "\25\57\6\0\2\57\1\0\1\57\1\0\4\57\2\0"+
    "\1\32\7\57\2\0\1\32\10\0\1\32\6\0\7\57"+
    "\1\372\16\57\6\0\2\57\1\0\1\57\1\0\4\57"+
    "\2\0\1\32\7\57\2\0\1\32\10\0\1\32\6\0"+
    "\2\57\1\253\23\57\6\0\2\57\1\0\1\57\1\0"+
    "\4\57\2\0\1\32\7\57\2\0\1\32\10\0\1\32"+
    "\6\0\5\57\1\373\20\57\6\0\1\32\1\374\1\0"+
    "\1\374\1\71\4\32\2\0\10\32\2\0\1\32\10\0"+
    "\1\32\6\0\16\32\7\374\1\32\6\0\1\32\1\271"+
    "\1\0\1\271\1\71\4\32\2\0\10\32\2\0\1\32"+
    "\10\0\1\32\6\0\16\32\7\271\1\32\7\0\1\71"+
    "\1\0\1\71\1\276\56\0\7\71\10\0\1\273\1\0"+
    "\1\273\1\276\56\0\7\273\10\0\1\272\1\0\1\273"+
    "\1\274\56\0\7\273\10\0\1\172\1\0\1\172\1\276"+
    "\56\0\7\172\6\0\2\375\1\376\1\375\1\376\1\375"+
    "\1\376\1\375\1\376\4\375\2\376\27\375\1\376\2\375"+
    "\1\376\2\375\1\376\7\375\7\376\6\375\2\377\1\u0100"+
    "\1\377\1\u0100\1\377\1\u0100\1\377\1\u0100\4\377\2\u0100"+
    "\27\377\1\u0100\2\377\1\u0100\2\377\1\u0100\7\377\7\u0100"+
    "\6\377\1\0\2\57\1\0\1\57\1\0\4\57\2\0"+
    "\1\32\3\57\1\266\3\57\2\0\1\32\10\0\1\32"+
    "\6\0\26\57\16\0\1\u0101\11\203\1\u0102\55\0\2\203"+
    "\1\206\1\203\1\206\1\203\1\206\1\203\1\206\1\203"+
    "\1\101\1\203\1\306\2\206\5\203\1\101\21\203\1\206"+
    "\2\203\1\206\2\203\1\206\7\203\7\206\17\203\1\204"+
    "\2\206\1\u0103\6\206\1\210\55\203\2\76\1\u0104\1\76"+
    "\1\u0104\1\76\1\u0104\1\76\1\u0104\1\76\1\77\1\76"+
    "\1\100\2\u0104\5\76\1\101\21\76\1\u0104\2\76\1\u0104"+
    "\2\76\1\u0104\7\76\7\u0104\10\76\1\u0105\1\76\1\u0105"+
    "\1\76\1\u0105\1\76\1\u0105\1\76\1\77\1\76\1\100"+
    "\2\u0105\5\76\1\101\21\76\1\u0105\2\76\1\u0105\2\76"+
    "\1\u0105\7\76\7\u0105\6\76\2\203\1\204\1\203\1\204"+
    "\1\203\1\204\1\203\1\204\1\203\1\101\1\203\1\306"+
    "\2\204\5\203\1\101\21\203\1\204\2\203\1\204\2\203"+
    "\1\204\7\203\7\204\6\203\11\0\1\u0106\11\211\1\u0107"+
    "\55\0\2\211\1\213\1\211\1\213\1\211\1\213\1\211"+
    "\1\213\2\211\1\101\1\315\2\213\5\211\1\101\21\211"+
    "\1\213\2\211\1\213\2\211\1\213\7\211\7\213\17\211"+
    "\1\212\2\213\1\u0108\6\213\1\216\55\211\2\102\1\u0109"+
    "\1\102\1\u0109\1\102\1\u0109\1\102\1\u0109\2\102\1\77"+
    "\1\103\2\u0109\5\102\1\101\21\102\1\u0109\2\102\1\u0109"+
    "\2\102\1\u0109\7\102\7\u0109\10\102\1\u010a\1\102\1\u010a"+
    "\1\102\1\u010a\1\102\1\u010a\2\102\1\77\1\103\2\u010a"+
    "\5\102\1\101\21\102\1\u010a\2\102\1\u010a\2\102\1\u010a"+
    "\7\102\7\u010a\6\102\2\211\1\212\1\211\1\212\1\211"+
    "\1\212\1\211\1\212\2\211\1\101\1\315\2\212\5\211"+
    "\1\101\21\211\1\212\2\211\1\212\2\211\1\212\7\211"+
    "\7\212\6\211\1\0\2\57\1\0\1\57\1\0\4\57"+
    "\2\0\1\32\7\57\2\0\1\32\10\0\1\32\6\0"+
    "\2\57\1\132\23\57\6\0\2\57\1\0\1\57\1\0"+
    "\4\57\2\0\1\32\2\57\1\u010b\4\57\2\0\1\32"+
    "\10\0\1\32\6\0\26\57\6\0\2\57\1\0\1\57"+
    "\1\0\4\57\2\0\1\32\7\57\2\0\1\32\10\0"+
    "\1\32\6\0\1\57\1\336\24\57\6\0\2\57\1\0"+
    "\1\57\1\0\4\57\2\0\1\32\4\57\1\u010c\2\57"+
    "\2\0\1\32\10\0\1\32\6\0\26\57\6\0\2\57"+
    "\1\0\1\57\1\0\2\57\1\u010d\1\57\2\0\1\32"+
    "\7\57\2\0\1\32\10\0\1\32\6\0\26\57\6\0"+
    "\2\57\1\0\1\57\1\0\4\57\2\0\1\32\3\57"+
    "\1\u010e\3\57\2\0\1\32\10\0\1\32\6\0\26\57"+
    "\6\0\2\57\1\0\1\57\1\0\4\57\2\0\1\32"+
    "\7\57\2\0\1\32\10\0\1\32\6\0\1\57\1\u010f"+
    "\24\57\6\0\2\57\1\0\1\57\1\0\2\57\1\u0110"+
    "\1\57\2\0\1\32\7\57\2\0\1\32\10\0\1\32"+
    "\6\0\26\57\6\0\2\57\1\0\1\57\1\0\4\57"+
    "\2\0\1\32\7\57\2\0\1\32\10\0\1\32\6\0"+
    "\16\57\1\326\1\354\1\355\1\356\1\357\3\57\5\0"+
    "\24\u0111\1\u0112\3\u0111\1\u0113\3\u0111\1\0\1\340\43\u0111"+
    "\24\237\1\337\7\237\1\u0114\1\340\43\237\1\0\2\57"+
    "\1\0\1\57\1\0\2\57\1\u0115\1\57\2\0\1\32"+
    "\7\57\2\0\1\32\10\0\1\32\6\0\26\57\6\0"+
    "\2\57\1\0\1\57\1\0\4\57\2\0\1\32\2\57"+
    "\1\u0116\4\57\2\0\1\32\10\0\1\32\6\0\26\57"+
    "\6\0\2\57\1\0\1\57\1\0\4\57\2\0\1\32"+
    "\7\57\2\0\1\32\10\0\1\32\6\0\3\57\1\u0117"+
    "\22\57\6\0\2\57\1\0\1\57\1\0\4\57\2\0"+
    "\1\32\2\57\1\u0118\4\57\2\0\1\32\10\0\1\32"+
    "\6\0\26\57\6\0\2\57\1\0\1\57\1\0\4\57"+
    "\2\0\1\32\7\57\2\0\1\32\10\0\1\32\6\0"+
    "\6\57\1\u0119\17\57\6\0\2\57\1\0\1\57\1\0"+
    "\4\57\2\0\1\32\7\57\2\0\1\32\10\0\1\32"+
    "\6\0\4\57\1\266\21\57\6\0\2\57\1\0\1\57"+
    "\1\0\4\57\2\0\1\32\7\57\2\0\1\32\10\0"+
    "\1\32\6\0\3\57\1\u011a\22\57\6\0\2\57\1\0"+
    "\1\57\1\0\4\57\2\0\1\32\3\57\1\u011b\3\57"+
    "\2\0\1\32\10\0\1\32\6\0\5\57\1\u011c\20\57"+
    "\6\0\2\57\1\0\1\57\1\0\4\57\2\0\1\32"+
    "\4\57\1\u011d\2\57\2\0\1\32\10\0\1\32\6\0"+
    "\26\57\6\0\2\57\1\0\1\57\1\0\4\57\2\0"+
    "\1\32\3\57\1\u011e\3\57\2\0\1\32\10\0\1\32"+
    "\6\0\26\57\6\0\2\57\1\0\1\57\1\0\4\57"+
    "\2\0\1\32\7\57\2\0\1\32\10\0\1\32\6\0"+
    "\20\57\1\326\1\57\1\u011f\3\57\6\0\2\57\1\0"+
    "\1\57\1\0\4\57\2\0\1\32\7\57\2\0\1\32"+
    "\10\0\1\32\6\0\23\57\1\326\2\57\6\0\2\57"+
    "\1\0\1\57\1\0\4\57\2\0\1\32\7\57\2\0"+
    "\1\32\10\0\1\32\6\0\22\57\1\326\3\57\6\0"+
    "\2\57\1\0\1\57\1\0\4\57\2\0\1\32\7\57"+
    "\2\0\1\32\10\0\1\32\6\0\24\57\1\u0120\1\57"+
    "\6\0\2\57\1\0\1\57\1\0\4\57\2\0\1\32"+
    "\3\57\1\u0121\3\57\2\0\1\32\10\0\1\32\6\0"+
    "\26\57\6\0\2\57\1\0\1\57\1\0\4\57\2\0"+
    "\1\32\4\57\1\u0122\2\57\2\0\1\32\10\0\1\32"+
    "\6\0\12\57\1\u0123\13\57\6\0\2\57\1\0\1\57"+
    "\1\0\4\57\2\0\1\32\7\57\2\0\1\32\10\0"+
    "\1\32\6\0\5\57\1\u0124\20\57\6\0\2\57\1\0"+
    "\1\57\1\0\4\57\2\0\1\32\1\57\1\u0125\5\57"+
    "\2\0\1\32\10\0\1\32\6\0\26\57\6\0\2\57"+
    "\1\0\1\57\1\0\4\57\2\0\1\32\4\57\1\u0126"+
    "\2\57\2\0\1\32\10\0\1\32\6\0\26\57\6\0"+
    "\2\57\1\0\1\57\1\0\4\57\2\0\1\32\7\57"+
    "\2\0\1\32\10\0\1\32\6\0\10\57\1\u0127\15\57"+
    "\6\0\2\57\1\0\1\57\1\0\4\57\2\0\1\32"+
    "\7\57\2\0\1\32\10\0\1\32\6\0\1\u0128\25\57"+
    "\6\0\2\57\1\0\1\57\1\0\4\57\2\0\1\32"+
    "\7\57\2\0\1\32\10\0\1\32\6\0\5\57\1\u0129"+
    "\20\57\6\0\2\57\1\0\1\57\1\0\4\57\2\0"+
    "\1\32\1\u012a\6\57\2\0\1\32\10\0\1\32\6\0"+
    "\26\57\6\0\2\57\1\0\1\57\1\0\2\57\1\u012b"+
    "\1\57\2\0\1\32\7\57\2\0\1\32\10\0\1\32"+
    "\6\0\26\57\6\0\2\57\1\0\1\57\1\0\4\57"+
    "\2\0\1\32\2\57\1\u012c\4\57\2\0\1\32\10\0"+
    "\1\32\6\0\26\57\5\0\2\375\1\u012d\1\375\1\u012d"+
    "\1\375\1\u012d\1\375\1\u012d\1\375\1\u012e\2\375\2\u012d"+
    "\27\375\1\u012d\2\375\1\u012d\2\375\1\u012d\7\375\7\u012d"+
    "\10\375\1\376\1\375\1\376\1\375\1\376\1\375\1\376"+
    "\1\375\1\u012f\2\375\2\376\27\375\1\376\2\375\1\376"+
    "\2\375\1\376\7\375\7\376\6\375\2\377\1\u0130\1\377"+
    "\1\u0130\1\377\1\u0130\1\377\1\u0130\2\377\1\u0131\1\377"+
    "\2\u0130\27\377\1\u0130\2\377\1\u0130\2\377\1\u0130\7\377"+
    "\7\u0130\10\377\1\u0100\1\377\1\u0100\1\377\1\u0100\1\377"+
    "\1\u0100\2\377\1\u0132\1\377\2\u0100\27\377\1\u0100\2\377"+
    "\1\u0100\2\377\1\u0100\7\377\7\u0100\6\377\2\0\1\u0133"+
    "\1\0\1\u0133\1\0\1\u0133\1\0\1\u0133\4\0\2\u0133"+
    "\27\0\1\u0133\2\0\1\u0133\2\0\1\u0133\7\0\7\u0133"+
    "\10\0\1\u0134\1\0\1\u0134\1\0\1\u0134\1\0\1\u0134"+
    "\4\0\2\u0134\27\0\1\u0134\2\0\1\u0134\2\0\1\u0134"+
    "\7\0\7\u0134\6\0\12\206\1\312\1\206\1\310\7\206"+
    "\1\101\54\206\2\76\1\206\1\76\1\206\1\76\1\206"+
    "\1\76\1\206\1\76\1\77\1\76\1\100\2\206\5\76"+
    "\1\101\21\76\1\206\2\76\1\206\2\76\1\206\7\76"+
    "\7\206\10\76\1\311\1\76\1\311\1\76\1\311\1\76"+
    "\1\311\1\76\1\77\1\76\1\100\2\311\5\76\1\101"+
    "\21\76\1\311\2\76\1\311\2\76\1\311\7\76\7\311"+
    "\6\76\2\0\1\u0135\1\0\1\u0135\1\0\1\u0135\1\0"+
    "\1\u0135\4\0\2\u0135\27\0\1\u0135\2\0\1\u0135\2\0"+
    "\1\u0135\7\0\7\u0135\10\0\1\u0136\1\0\1\u0136\1\0"+
    "\1\u0136\1\0\1\u0136\4\0\2\u0136\27\0\1\u0136\2\0"+
    "\1\u0136\2\0\1\u0136\7\0\7\u0136\6\0\13\213\1\321"+
    "\1\317\7\213\1\101\54\213\2\102\1\213\1\102\1\213"+
    "\1\102\1\213\1\102\1\213\2\102\1\77\1\103\2\213"+
    "\5\102\1\101\21\102\1\213\2\102\1\213\2\102\1\213"+
    "\7\102\7\213\10\102\1\320\1\102\1\320\1\102\1\320"+
    "\1\102\1\320\2\102\1\77\1\103\2\320\5\102\1\101"+
    "\21\102\1\320\2\102\1\320\2\102\1\320\7\102\7\320"+
    "\6\102\1\0\2\57\1\0\1\57\1\0\4\57\2\0"+
    "\1\32\7\57\2\0\1\32\10\0\1\32\6\0\3\57"+
    "\1\u0137\22\57\6\0\2\57\1\0\1\57\1\0\4\57"+
    "\2\0\1\32\7\57\2\0\1\32\10\0\1\32\6\0"+
    "\5\57\1\u0138\20\57\6\0\2\57\1\0\1\57\1\0"+
    "\4\57\2\0\1\32\7\57\2\0\1\32\10\0\1\32"+
    "\6\0\13\57\1\266\12\57\6\0\2\57\1\0\1\57"+
    "\1\0\4\57\2\0\1\32\2\57\1\u0139\4\57\2\0"+
    "\1\32\10\0\1\32\6\0\26\57\6\0\2\57\1\0"+
    "\1\57\1\0\4\57\2\0\1\32\1\57\1\u013a\5\57"+
    "\2\0\1\32\10\0\1\32\6\0\26\57\6\0\2\57"+
    "\1\0\1\57\1\0\4\57\2\0\1\32\7\57\2\0"+
    "\1\32\10\0\1\32\6\0\6\57\1\326\17\57\5\0"+
    "\3\u0111\1\u013b\20\u0111\1\u0112\10\u0111\1\u0112\2\u013b\44\u0111"+
    "\1\u013b\20\u0111\1\u0112\7\u0111\1\u013c\1\u0112\2\u013b\65\u0111"+
    "\1\u0112\3\u0111\1\u0113\3\u0111\1\u013b\1\340\43\u0111\1\0"+
    "\2\57\1\0\1\57\1\0\4\57\2\0\1\32\7\57"+
    "\2\0\1\32\10\0\1\32\6\0\1\57\1\u013d\24\57"+
    "\6\0\2\57\1\0\1\57\1\0\4\57\2\0\1\32"+
    "\7\57\2\0\1\32\10\0\1\32\6\0\6\57\1\253"+
    "\17\57\6\0\2\57\1\0\1\57\1\0\4\57\2\0"+
    "\1\32\4\57\1\u013e\2\57\2\0\1\32\10\0\1\32"+
    "\6\0\26\57\6\0\2\57\1\0\1\57\1\0\4\57"+
    "\2\0\1\32\7\57\2\0\1\32\10\0\1\32\6\0"+
    "\12\57\1\326\13\57\6\0\2\57\1\0\1\57\1\0"+
    "\4\57\2\0\1\32\7\57\2\0\1\32\10\0\1\32"+
    "\6\0\5\57\1\u013f\20\57\6\0\2\57\1\0\1\57"+
    "\1\0\4\57\2\0\1\32\7\57\2\0\1\32\10\0"+
    "\1\32\6\0\4\57\1\u0140\21\57\6\0\2\57\1\0"+
    "\1\57\1\0\4\57\2\0\1\32\7\57\2\0\1\32"+
    "\10\0\1\32\6\0\1\u0141\25\57\6\0\2\57\1\0"+
    "\1\57\1\0\4\57\2\0\1\32\2\57\1\u0142\4\57"+
    "\2\0\1\32\10\0\1\32\6\0\26\57\6\0\2\57"+
    "\1\0\1\57\1\0\4\57\2\0\1\32\3\57\1\u0143"+
    "\3\57\2\0\1\32\10\0\1\32\6\0\26\57\6\0"+
    "\2\57\1\0\1\57\1\0\4\57\2\0\1\32\2\57"+
    "\1\u0144\4\57\2\0\1\32\10\0\1\32\6\0\26\57"+
    "\6\0\2\57\1\0\1\57\1\0\4\57\2\0\1\32"+
    "\7\57\2\0\1\32\10\0\1\32\6\0\16\57\1\326"+
    "\7\57\6\0\2\57\1\0\1\57\1\0\4\57\2\0"+
    "\1\32\7\57\2\0\1\32\10\0\1\32\6\0\20\57"+
    "\1\326\5\57\6\0\2\57\1\0\1\57\1\0\4\57"+
    "\2\0\1\32\4\57\1\132\2\57\2\0\1\32\10\0"+
    "\1\32\6\0\26\57\6\0\2\57\1\0\1\57\1\0"+
    "\2\57\1\132\1\57\2\0\1\32\7\57\2\0\1\32"+
    "\10\0\1\32\6\0\26\57\6\0\2\57\1\0\1\57"+
    "\1\0\4\57\2\0\1\32\7\57\2\0\1\32\10\0"+
    "\1\32\6\0\1\u0145\25\57\6\0\2\57\1\0\1\57"+
    "\1\0\4\57\2\0\1\32\2\57\1\u0146\4\57\2\0"+
    "\1\32\10\0\1\32\6\0\26\57\6\0\2\57\1\0"+
    "\1\57\1\0\4\57\2\0\1\32\7\57\2\0\1\32"+
    "\10\0\1\32\6\0\5\57\1\u0147\20\57\6\0\2\57"+
    "\1\0\1\57\1\0\2\57\1\253\1\57\2\0\1\32"+
    "\7\57\2\0\1\32\10\0\1\32\6\0\26\57\6\0"+
    "\2\57\1\0\1\57\1\0\4\57\2\0\1\32\7\57"+
    "\2\0\1\32\10\0\1\32\6\0\1\u0148\25\57\6\0"+
    "\2\57\1\0\1\57\1\0\4\57\2\0\1\32\4\57"+
    "\1\u0122\2\57\2\0\1\32\10\0\1\32\6\0\26\57"+
    "\6\0\2\57\1\0\1\57\1\0\4\57\2\0\1\32"+
    "\7\57\2\0\1\32\10\0\1\32\6\0\3\57\1\132"+
    "\22\57\6\0\2\57\1\0\1\57\1\0\4\57\2\0"+
    "\1\32\7\57\2\0\1\32\10\0\1\32\6\0\7\57"+
    "\1\u0149\16\57\6\0\2\57\1\0\1\57\1\0\4\57"+
    "\2\0\1\32\7\57\2\0\1\32\10\0\1\32\6\0"+
    "\12\57\1\u014a\13\57\7\0\1\u012d\1\0\1\u012d\1\0"+
    "\1\u012d\1\0\1\u012d\1\0\1\u014b\2\0\2\u012d\27\0"+
    "\1\u012d\2\0\1\u012d\2\0\1\u012d\7\0\7\u012d\10\0"+
    "\1\u0130\1\0\1\u0130\1\0\1\u0130\1\0\1\u0130\2\0"+
    "\1\u014b\1\0\2\u0130\27\0\1\u0130\2\0\1\u0130\2\0"+
    "\1\u0130\7\0\7\u0130\10\0\1\203\1\0\1\203\1\0"+
    "\1\203\1\0\1\203\4\0\2\203\27\0\1\203\2\0"+
    "\1\203\2\0\1\203\7\0\7\203\10\0\1\u0101\1\0"+
    "\1\u0101\1\0\1\u0101\1\0\1\u0101\4\0\2\u0101\27\0"+
    "\1\u0101\2\0\1\u0101\2\0\1\u0101\7\0\7\u0101\10\0"+
    "\1\211\1\0\1\211\1\0\1\211\1\0\1\211\4\0"+
    "\2\211\27\0\1\211\2\0\1\211\2\0\1\211\7\0"+
    "\7\211\10\0\1\u0106\1\0\1\u0106\1\0\1\u0106\1\0"+
    "\1\u0106\4\0\2\u0106\27\0\1\u0106\2\0\1\u0106\2\0"+
    "\1\u0106\7\0\7\u0106\7\0\2\57\1\0\1\57\1\0"+
    "\2\57\1\342\1\57\2\0\1\32\7\57\2\0\1\32"+
    "\10\0\1\32\6\0\26\57\6\0\2\57\1\0\1\57"+
    "\1\0\4\57\2\0\1\32\7\57\2\0\1\32\10\0"+
    "\1\32\6\0\4\57\1\u014c\21\57\6\0\2\57\1\0"+
    "\1\57\1\0\2\57\1\u014d\1\57\2\0\1\32\7\57"+
    "\2\0\1\32\10\0\1\32\6\0\26\57\5\0\24\u013b"+
    "\1\u014e\10\u013b\1\u014f\43\u013b\3\u013c\1\0\32\u013c\2\0"+
    "\41\u013c\1\0\2\57\1\0\1\57\1\0\4\57\2\0"+
    "\1\32\7\57\2\0\1\32\10\0\1\32\6\0\1\57"+
    "\1\326\24\57\6\0\2\57\1\0\1\57\1\0\4\57"+
    "\2\0\1\32\4\57\1\u0150\2\57\2\0\1\32\10\0"+
    "\1\32\6\0\26\57\6\0\2\57\1\0\1\57\1\0"+
    "\4\57\2\0\1\32\7\57\2\0\1\32\10\0\1\32"+
    "\6\0\6\57\1\u0137\17\57\6\0\2\57\1\0\1\57"+
    "\1\0\4\57\2\0\1\32\7\57\2\0\1\32\10\0"+
    "\1\32\6\0\3\57\1\u0151\22\57\6\0\2\57\1\0"+
    "\1\57\1\0\4\57\2\0\1\32\6\57\1\u0122\2\0"+
    "\1\32\10\0\1\32\6\0\26\57\6\0\2\57\1\0"+
    "\1\57\1\0\4\57\2\0\1\32\6\57\1\u0152\2\0"+
    "\1\32\10\0\1\32\6\0\26\57\6\0\2\57\1\0"+
    "\1\57\1\0\4\57\2\0\1\32\7\57\2\0\1\32"+
    "\10\0\1\32\6\0\1\u0153\25\57\6\0\2\57\1\0"+
    "\1\57\1\0\4\57\2\0\1\32\4\57\1\u0154\2\57"+
    "\2\0\1\32\10\0\1\32\6\0\26\57\6\0\2\57"+
    "\1\0\1\57\1\0\4\57\2\0\1\32\7\57\2\0"+
    "\1\32\10\0\1\32\6\0\12\57\1\132\13\57\6\0"+
    "\2\57\1\0\1\57\1\0\2\57\1\120\1\57\2\0"+
    "\1\32\7\57\2\0\1\32\10\0\1\32\6\0\26\57"+
    "\6\0\2\57\1\0\1\57\1\0\2\57\1\u0155\1\57"+
    "\2\0\1\32\7\57\2\0\1\32\10\0\1\32\6\0"+
    "\26\57\6\0\2\57\1\0\1\57\1\0\4\57\2\0"+
    "\1\32\2\57\1\u0156\4\57\2\0\1\32\10\0\1\32"+
    "\6\0\26\57\6\0\2\57\1\0\1\57\1\0\4\57"+
    "\2\0\1\32\3\57\1\342\3\57\2\0\1\32\10\0"+
    "\1\32\6\0\26\57\5\0\24\u013b\1\u014e\3\u013b\1\u0157"+
    "\3\u013b\1\0\1\u014f\67\u013b\1\u014e\7\u013b\1\0\1\u014f"+
    "\43\u013b\1\0\2\57\1\0\1\57\1\0\4\57\2\0"+
    "\1\32\7\57\2\0\1\32\10\0\1\32\6\0\13\57"+
    "\1\u0158\12\57\6\0\2\57\1\0\1\57\1\0\4\57"+
    "\2\0\1\32\4\57\1\u0159\2\57\2\0\1\32\10\0"+
    "\1\32\6\0\26\57\6\0\2\57\1\0\1\57\1\0"+
    "\4\57\2\0\1\32\7\57\2\0\1\32\10\0\1\32"+
    "\6\0\3\57\1\u015a\22\57\6\0\2\57\1\0\1\57"+
    "\1\0\4\57\2\0\1\32\7\57\2\0\1\32\10\0"+
    "\1\32\6\0\7\57\1\u0155\16\57\6\0\2\57\1\0"+
    "\1\57\1\0\2\57\1\u015b\1\57\2\0\1\32\7\57"+
    "\2\0\1\32\10\0\1\32\6\0\26\57\5\0\24\u013b"+
    "\1\u014e\3\u013b\1\u0157\4\u013b\1\u014f\43\u013b\1\0\2\57"+
    "\1\0\1\57\1\0\4\57\2\0\1\32\4\57\1\u015c"+
    "\2\57\2\0\1\32\10\0\1\32\6\0\26\57\6\0"+
    "\2\57\1\0\1\57\1\0\4\57\2\0\1\32\7\57"+
    "\2\0\1\32\10\0\1\32\6\0\3\57\1\u015d\22\57"+
    "\6\0\2\57\1\0\1\57\1\0\4\57\2\0\1\32"+
    "\7\57\2\0\1\32\10\0\1\32\6\0\4\57\1\120"+
    "\21\57\6\0\2\57\1\0\1\57\1\0\4\57\2\0"+
    "\1\32\7\57\2\0\1\32\10\0\1\32\6\0\1\u015e"+
    "\25\57\6\0\2\57\1\0\1\57\1\0\4\57\2\0"+
    "\1\32\7\57\2\0\1\32\10\0\1\32\6\0\7\57"+
    "\1\u015f\16\57\6\0\2\57\1\0\1\57\1\0\4\57"+
    "\2\0\1\32\7\57\2\0\1\32\10\0\1\32\6\0"+
    "\7\57\1\342\16\57\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19240];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\22\1\3\11\7\1\2\11\14\1\2\11"+
    "\15\1\1\0\1\1\1\0\1\11\1\1\1\11\1\0"+
    "\21\1\1\11\1\1\1\0\3\11\41\1\1\0\13\1"+
    "\1\0\5\1\1\0\56\1\1\0\3\1\2\0\2\1"+
    "\1\0\1\1\1\0\2\1\1\0\1\1\1\0\1\1"+
    "\1\0\2\1\1\0\1\1\1\0\52\1\6\0\1\1"+
    "\4\0\1\1\2\0\11\1\1\11\30\1\1\0\2\1"+
    "\1\0\2\1\4\0\4\1\1\0\17\1\1\11\24\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[351];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 202) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return new Symbol(sym.ERROR_CEROS_A_LA_IZQUIERDA, yychar, yyline, yytext());
            }
          case 50: break;
          case 2: 
            { return new Symbol(sym.ERROR, yychar, yyline, yytext());
            }
          case 51: break;
          case 3: 
            { /*Ignore*/
            }
          case 52: break;
          case 4: 
            { return new Symbol(sym.Comillas, yychar, yyline, yytext());
            }
          case 53: break;
          case 5: 
            { return new Symbol(sym.Op_Aritmetico, yychar, yyline, yytext());
            }
          case 54: break;
          case 6: 
            { return new Symbol(sym.Coma, yychar, yyline, yytext());
            }
          case 55: break;
          case 7: 
            { return new Symbol(sym.P_coma, yychar, yyline, yytext());
            }
          case 56: break;
          case 8: 
            { return new Symbol(sym.Parentesis_c, yychar, yyline, yytext());
            }
          case 57: break;
          case 9: 
            { return new Symbol(sym.Llave_c, yychar, yyline, yytext());
            }
          case 58: break;
          case 10: 
            { return new Symbol(sym.ERROR_CARACTERES_NO_VALIDOS, yychar, yyline, yytext());
            }
          case 59: break;
          case 11: 
            { return new Symbol(sym.Op_relacional, yychar, yyline, yytext());
            }
          case 60: break;
          case 12: 
            { return new Symbol(sym.Corchete_a, yychar, yyline, yytext());
            }
          case 61: break;
          case 13: 
            { return new Symbol(sym.Corchete_c, yychar, yyline, yytext());
            }
          case 62: break;
          case 14: 
            { return new Symbol(sym.Igual, yychar, yyline, yytext());
            }
          case 63: break;
          case 15: 
            { return new Symbol(sym.Op_logico, yychar, yyline, yytext());
            }
          case 64: break;
          case 16: 
            { return new Symbol(sym.Parentesis_a, yychar, yyline, yytext());
            }
          case 65: break;
          case 17: 
            { return new Symbol(sym.Llave_a, yychar, yyline, yytext());
            }
          case 66: break;
          case 18: 
            { return new Symbol(sym.Identificador, yychar, yyline, yytext());
            }
          case 67: break;
          case 19: 
            { return new Symbol(sym.ERROR_IDENTIFICADOR, yychar, yyline, yytext());
            }
          case 68: break;
          case 20: 
            { return new Symbol(sym.Numero, yychar, yyline, yytext());
            }
          case 69: break;
          case 21: 
            { return new Symbol(sym.ERROR_NOTACION_CIENTIFICA, yychar, yyline, yytext());
            }
          case 70: break;
          case 22: 
            { return new Symbol(sym.String, yychar, yyline, yytext());
            }
          case 71: break;
          case 23: 
            { return new Symbol(sym.ERROR_STRING, yychar, yyline, yytext());
            }
          case 72: break;
          case 24: 
            { return new Symbol(sym.Op_atribucion, yychar, yyline, yytext());
            }
          case 73: break;
          case 25: 
            { return new Symbol(sym.OPERADOR, yychar, yyline, yytext());
            }
          case 74: break;
          case 26: 
            { return new Symbol(sym.PALABRA_RESERVADA, yychar, yyline, yytext());
            }
          case 75: break;
          case 27: 
            { return new Symbol(sym.If, yychar, yyline, yytext());
            }
          case 76: break;
          case 28: 
            { return new Symbol(sym.Do, yychar, yyline, yytext());
            }
          case 77: break;
          case 29: 
            { return new Symbol(sym.For, yychar, yyline, yytext());
            }
          case 78: break;
          case 30: 
            { return new Symbol(sym.ERROR_COMENTARIO, yychar, yyline, yytext());
            }
          case 79: break;
          case 31: 
            { return new Symbol(sym.Int, yychar, yyline, yytext());
            }
          case 80: break;
          case 32: 
            { return new Symbol(sym.UNIDAD, yychar, yyline, yytext());
            }
          case 81: break;
          case 33: 
            { return new Symbol(sym.Enum, yychar, yyline, yytext());
            }
          case 82: break;
          case 34: 
            { return new Symbol(sym.Else, yychar, yyline, yytext());
            }
          case 83: break;
          case 35: 
            { return new Symbol(sym.T_dato, yychar, yyline, yytext());
            }
          case 84: break;
          case 36: 
            { return new Symbol(sym.Op_booleano, yychar, yyline, yytext());
            }
          case 85: break;
          case 37: 
            { return new Symbol(sym.TRANSAC, yychar, yyline, yytext());
            }
          case 86: break;
          case 38: 
            { return new Symbol(sym.Main, yychar, yyline, yytext());
            }
          case 87: break;
          case 39: 
            { /* ignore */
            }
          case 88: break;
          case 40: 
            { return new Symbol(sym.While, yychar, yyline, yytext());
            }
          case 89: break;
          case 41: 
            { return new Symbol(sym.ERROR_HEXADECIMAL, yychar, yyline, yytext());
            }
          case 90: break;
          case 42: 
            { return new Symbol(sym.Return, yychar, yyline, yytext());
            }
          case 91: break;
          case 43: 
            { return new Symbol(sym.Struct, yychar, yyline, yytext());
            }
          case 92: break;
          case 44: 
            { return new Symbol(sym.Pragma, yychar, yyline, yytext());
            }
          case 93: break;
          case 45: 
            { return new Symbol(sym.Cadena, yychar, yyline, yytext());
            }
          case 94: break;
          case 46: 
            { return new Symbol(sym.Modificador, yychar, yyline, yytext());
            }
          case 95: break;
          case 47: 
            { return new Symbol(sym.Function, yychar, yyline, yytext());
            }
          case 96: break;
          case 48: 
            { return new Symbol(sym.Solidity, yychar, yyline, yytext());
            }
          case 97: break;
          case 49: 
            { return new Symbol(sym.Contract, yychar, yyline, yytext());
            }
          case 98: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
