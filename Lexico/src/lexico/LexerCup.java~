/* The following code was generated by JFlex 1.6.1 */

package lexico;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/lexico/lexerCup.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\26\1\23\1\35\1\35\1\34\22\0\1\26\1\77\1\11"+
    "\2\25\1\100\1\42\1\12\1\101\1\30\1\33\1\100\1\73\1\24"+
    "\1\4\1\32\1\2\1\65\1\70\1\67\1\71\1\72\1\66\1\3"+
    "\1\64\1\3\1\74\1\27\1\40\1\76\1\41\1\31\1\25\6\5"+
    "\14\1\1\75\7\1\1\44\1\13\1\45\1\37\2\25\1\46\1\14"+
    "\1\51\1\54\1\7\1\15\1\60\1\6\1\53\1\1\1\50\1\55"+
    "\1\56\1\16\1\52\1\57\1\1\1\17\1\47\1\20\1\22\1\21"+
    "\1\62\1\10\1\61\1\63\1\102\1\43\1\103\1\37\6\25\1\36"+
    "\u1e6e\25\u0134\0\1\35\1\35\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\2\4\1\5\2\3\1\6\1\2"+
    "\1\7\6\3\1\10\1\11\1\12\1\13\1\14\2\11"+
    "\1\5\2\15\2\5\1\16\1\17\11\3\1\20\1\21"+
    "\1\3\1\22\1\23\1\24\1\25\1\26\1\27\1\1"+
    "\1\4\1\30\1\1\3\3\1\1\2\3\1\0\1\3"+
    "\1\0\1\31\2\32\1\0\1\32\20\3\1\33\1\10"+
    "\1\0\1\15\1\23\1\34\7\3\1\35\4\3\1\36"+
    "\12\3\1\1\1\27\1\30\2\4\1\1\1\30\2\1"+
    "\1\0\1\1\1\34\3\3\1\1\1\3\4\32\1\0"+
    "\5\32\1\0\1\32\7\3\1\37\10\3\1\40\10\3"+
    "\1\41\15\3\1\42\1\3\2\1\2\4\1\0\2\30"+
    "\1\4\2\0\1\43\1\3\1\0\1\44\1\0\2\32"+
    "\1\0\1\31\1\0\1\32\1\0\2\32\1\0\1\31"+
    "\1\0\1\32\2\3\2\41\3\3\1\45\2\3\1\41"+
    "\2\40\1\3\1\46\5\3\1\46\11\3\1\47\11\3"+
    "\1\7\6\0\1\32\4\0\1\32\2\0\6\3\3\40"+
    "\26\3\1\50\1\3\1\0\1\51\1\4\1\0\1\51"+
    "\1\4\4\0\2\3\1\52\1\3\1\0\1\40\1\3"+
    "\1\53\11\3\1\54\1\3\1\55\1\3\1\56\1\51"+
    "\2\3\2\40\5\3\1\57\1\60\1\40\1\61\1\62"+
    "\6\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[351];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc"+
    "\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0330\0\u0374\0\u03b8\0\u03fc"+
    "\0\u0440\0\104\0\u0484\0\104\0\104\0\104\0\u04c8\0\u050c"+
    "\0\104\0\u0550\0\u0594\0\u05d8\0\u061c\0\104\0\104\0\u0660"+
    "\0\u06a4\0\u06e8\0\u072c\0\u0770\0\u07b4\0\u07f8\0\u083c\0\u0880"+
    "\0\104\0\104\0\u08c4\0\u0908\0\u0908\0\104\0\104\0\104"+
    "\0\u094c\0\u0990\0\u09d4\0\u0a18\0\u0a5c\0\u0aa0\0\u0ae4\0\u0b28"+
    "\0\u0b6c\0\u0bb0\0\u0bf4\0\u0c38\0\u0c7c\0\u0220\0\104\0\u0cc0"+
    "\0\104\0\u0264\0\u0d04\0\u0d48\0\u0d8c\0\u0dd0\0\u0e14\0\u0e58"+
    "\0\u0e9c\0\u0ee0\0\u0f24\0\u0f68\0\u0fac\0\u0ff0\0\u1034\0\u1078"+
    "\0\u10bc\0\u1100\0\u1144\0\104\0\u1188\0\u11cc\0\104\0\104"+
    "\0\210\0\u1210\0\u1254\0\u1298\0\u12dc\0\u1320\0\u1364\0\u13a8"+
    "\0\210\0\u13ec\0\u1430\0\u1474\0\u14b8\0\210\0\u14fc\0\u1540"+
    "\0\u1584\0\u15c8\0\u160c\0\u1650\0\u1694\0\u16d8\0\u171c\0\u1760"+
    "\0\u17a4\0\u17e8\0\u182c\0\u1870\0\u18b4\0\u18f8\0\u193c\0\u1980"+
    "\0\u19c4\0\u0b6c\0\u1a08\0\u1a4c\0\u1a90\0\u1ad4\0\u1b18\0\u1b5c"+
    "\0\u1ba0\0\u1be4\0\u1c28\0\u0220\0\u1c6c\0\u1cb0\0\u1cf4\0\u1d38"+
    "\0\u1d7c\0\u1dc0\0\u0264\0\u1e04\0\u1e48\0\u1e8c\0\u1ed0\0\u1f14"+
    "\0\u1f58\0\u1f9c\0\u1fe0\0\u2024\0\210\0\u2068\0\u20ac\0\u20f0"+
    "\0\u2134\0\u2178\0\u21bc\0\u2200\0\u2244\0\u2288\0\u22cc\0\u2310"+
    "\0\u2354\0\u2398\0\u23dc\0\u2420\0\u2464\0\u24a8\0\u24ec\0\u2530"+
    "\0\u2574\0\u25b8\0\u25fc\0\u2640\0\u2684\0\u26c8\0\u270c\0\u2750"+
    "\0\u2794\0\u27d8\0\u281c\0\u2860\0\210\0\u28a4\0\u28e8\0\u292c"+
    "\0\u2970\0\u29b4\0\u18f8\0\u29f8\0\u18f8\0\u2a3c\0\u2a80\0\u2ac4"+
    "\0\210\0\u2b08\0\u1b5c\0\210\0\u2b4c\0\u2b90\0\u2bd4\0\u2c18"+
    "\0\u1be4\0\u2c5c\0\u2ca0\0\u2ce4\0\u2d28\0\u2d6c\0\u2db0\0\u1d38"+
    "\0\u2df4\0\u2e38\0\u2e7c\0\u2ec0\0\210\0\u2f04\0\u2f48\0\u2f8c"+
    "\0\u2fd0\0\210\0\u3014\0\u3058\0\u309c\0\u30e0\0\u3124\0\u3168"+
    "\0\210\0\u31ac\0\u31f0\0\u3234\0\u3278\0\u32bc\0\u3300\0\u3344"+
    "\0\u3388\0\u33cc\0\u3410\0\u3454\0\u3498\0\u34dc\0\u3520\0\u3564"+
    "\0\210\0\u35a8\0\u35ec\0\u3630\0\u3674\0\u36b8\0\u36fc\0\u3740"+
    "\0\u3784\0\u37c8\0\u28e8\0\u380c\0\u3850\0\u3894\0\u38d8\0\u391c"+
    "\0\u3960\0\u39a4\0\u39e8\0\u3a2c\0\u3a70\0\u3ab4\0\u3af8\0\u3b3c"+
    "\0\u3b80\0\u3bc4\0\u3c08\0\u3c4c\0\u3c90\0\u3cd4\0\u3d18\0\u3d5c"+
    "\0\u3da0\0\u3de4\0\u3e28\0\u3e6c\0\u3eb0\0\u3ef4\0\u3f38\0\u3f7c"+
    "\0\u3fc0\0\u4004\0\u4048\0\u408c\0\u40d0\0\u4114\0\u4158\0\u419c"+
    "\0\u41e0\0\u4224\0\u4268\0\u42ac\0\u42f0\0\u4334\0\u4378\0\u43bc"+
    "\0\210\0\u4400\0\u4444\0\u380c\0\u380c\0\u4488\0\u3894\0\u3894"+
    "\0\u44cc\0\u4510\0\u4554\0\u4598\0\u45dc\0\u4620\0\u20f0\0\u4664"+
    "\0\u46a8\0\u46ec\0\u4730\0\210\0\u4774\0\u47b8\0\u47fc\0\u4840"+
    "\0\u4884\0\u48c8\0\u490c\0\u4950\0\u4994\0\210\0\u49d8\0\210"+
    "\0\u4a1c\0\210\0\104\0\u4a60\0\u4aa4\0\u4ae8\0\u4b2c\0\u4b70"+
    "\0\u4bb4\0\u4bf8\0\u4c3c\0\u4c80\0\210\0\210\0\u4cc4\0\210"+
    "\0\210\0\u4d08\0\u4d4c\0\u4d90\0\u4dd4\0\u4e18\0\u4e5c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[351];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\3\1\7\1\10"+
    "\1\3\1\11\1\12\1\13\1\14\1\15\1\3\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\13\1\22\1\24"+
    "\1\25\1\26\1\27\1\30\1\22\1\0\1\13\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\3\1\42\1\3\1\43\1\44\1\3\1\45\1\46"+
    "\1\3\1\47\1\50\1\3\7\5\1\51\1\52\1\53"+
    "\1\54\1\55\1\23\1\56\1\57\1\60\105\0\3\3"+
    "\1\0\4\3\2\0\1\13\7\3\2\0\1\13\10\0"+
    "\1\13\7\0\25\3\2\0\1\3\7\0\1\61\2\62"+
    "\1\63\2\61\1\64\1\61\2\0\1\13\7\61\2\0"+
    "\1\13\10\0\1\13\7\0\16\61\7\62\2\0\1\61"+
    "\7\0\1\61\2\5\1\63\2\61\1\64\1\61\2\0"+
    "\1\13\7\61\2\0\1\13\10\0\1\13\7\0\16\61"+
    "\7\5\2\0\1\61\10\0\2\63\3\0\1\65\54\0"+
    "\7\63\12\0\3\3\1\0\2\3\1\66\1\3\2\0"+
    "\1\13\7\3\2\0\1\13\10\0\1\13\7\0\4\3"+
    "\1\67\20\3\2\0\1\3\7\0\1\3\2\70\1\71"+
    "\4\3\2\0\1\13\2\3\1\72\1\3\1\73\2\3"+
    "\1\0\1\74\1\13\10\0\1\13\7\0\7\3\1\75"+
    "\6\3\7\70\2\0\1\3\6\0\11\76\1\77\1\76"+
    "\1\100\7\76\1\101\60\76\12\102\1\77\1\103\7\102"+
    "\1\101\60\102\1\0\3\13\1\0\4\13\2\0\10\13"+
    "\2\0\1\13\10\0\1\13\7\0\25\13\2\0\1\13"+
    "\7\0\3\3\1\0\4\3\2\0\1\13\3\3\1\104"+
    "\3\3\2\0\1\13\10\0\1\13\7\0\1\105\3\3"+
    "\1\106\6\3\1\107\11\3\2\0\1\3\7\0\3\3"+
    "\1\0\4\3\2\0\1\13\3\3\1\110\2\3\1\111"+
    "\2\0\1\13\10\0\1\13\7\0\1\112\3\3\1\113"+
    "\1\114\17\3\2\0\1\3\7\0\3\3\1\0\2\3"+
    "\1\115\1\3\2\0\1\13\7\3\2\0\1\13\10\0"+
    "\1\13\7\0\25\3\2\0\1\3\7\0\3\3\1\0"+
    "\1\3\1\116\2\3\2\0\1\13\3\3\1\117\3\3"+
    "\2\0\1\13\10\0\1\13\7\0\25\3\2\0\1\3"+
    "\7\0\3\3\1\0\4\3\2\0\1\13\7\3\2\0"+
    "\1\13\10\0\1\13\7\0\1\120\4\3\1\121\17\3"+
    "\2\0\1\3\7\0\3\3\1\0\4\3\2\0\1\13"+
    "\1\3\1\122\5\3\2\0\1\13\10\0\1\13\7\0"+
    "\5\3\1\123\17\3\2\0\1\3\104\0\1\124\37\0"+
    "\1\125\1\126\42\0\1\124\40\0\1\31\42\0\1\124"+
    "\45\0\1\127\35\0\1\127\46\0\1\127\34\0\1\127"+
    "\47\0\1\130\104\0\1\130\41\0\3\3\1\0\4\3"+
    "\2\0\1\13\7\3\2\0\1\13\10\0\1\13\7\0"+
    "\1\3\1\131\4\3\1\132\16\3\2\0\1\3\7\0"+
    "\3\3\1\0\2\3\1\133\1\3\2\0\1\13\4\3"+
    "\1\134\2\3\2\0\1\13\10\0\1\13\7\0\4\3"+
    "\1\135\10\3\1\136\7\3\2\0\1\3\7\0\3\3"+
    "\1\0\4\3\2\0\1\13\7\3\2\0\1\13\10\0"+
    "\1\13\7\0\1\137\3\3\1\140\20\3\2\0\1\3"+
    "\7\0\3\3\1\0\4\3\2\0\1\13\1\3\1\141"+
    "\1\142\4\3\2\0\1\13\10\0\1\13\7\0\10\3"+
    "\1\143\14\3\2\0\1\3\7\0\3\3\1\0\2\3"+
    "\1\144\1\3\2\0\1\13\7\3\2\0\1\13\10\0"+
    "\1\13\7\0\1\145\3\3\1\146\20\3\2\0\1\3"+
    "\7\0\3\3\1\0\4\3\2\0\1\13\7\3\2\0"+
    "\1\13\10\0\1\13\7\0\1\147\3\3\1\150\1\151"+
    "\17\3\2\0\1\3\7\0\3\3\1\0\4\3\2\0"+
    "\1\13\3\3\1\152\2\3\1\153\2\0\1\13\10\0"+
    "\1\13\7\0\1\154\24\3\2\0\1\3\7\0\3\3"+
    "\1\0\2\3\1\155\1\3\2\0\1\13\7\3\2\0"+
    "\1\13\10\0\1\13\7\0\25\3\2\0\1\3\7\0"+
    "\3\3\1\0\1\3\1\156\1\157\1\3\2\0\1\13"+
    "\7\3\2\0\1\13\10\0\1\13\7\0\25\3\2\0"+
    "\1\3\7\0\3\3\1\0\4\3\2\0\1\13\4\3"+
    "\1\160\2\3\2\0\1\13\10\0\1\13\7\0\25\3"+
    "\2\0\1\3\104\0\1\127\6\0\1\61\2\13\1\0"+
    "\4\61\2\0\1\13\7\61\2\0\1\13\10\0\1\13"+
    "\7\0\16\61\7\13\2\0\1\61\7\0\1\61\2\62"+
    "\1\161\2\61\1\162\1\61\2\0\1\13\7\61\2\0"+
    "\1\13\10\0\1\13\7\0\16\61\7\62\2\0\1\61"+
    "\10\0\2\63\3\0\1\163\54\0\7\63\12\0\1\61"+
    "\1\164\1\165\1\166\4\61\2\0\1\13\7\61\1\0"+
    "\1\167\1\13\10\0\1\13\7\0\16\61\7\165\2\0"+
    "\1\61\10\0\1\170\1\171\1\172\17\0\1\173\37\0"+
    "\7\171\12\0\3\3\1\0\3\3\1\174\2\0\1\13"+
    "\7\3\2\0\1\13\10\0\1\13\7\0\25\3\2\0"+
    "\1\3\7\0\3\3\1\0\4\3\2\0\1\13\6\3"+
    "\1\175\2\0\1\13\10\0\1\13\7\0\25\3\2\0"+
    "\1\3\7\0\1\3\2\70\1\71\4\3\2\0\1\13"+
    "\7\3\2\0\1\13\10\0\1\13\7\0\16\3\7\70"+
    "\2\0\1\3\10\0\2\71\60\0\7\71\12\0\3\3"+
    "\1\0\4\3\2\0\1\13\6\3\1\176\2\0\1\13"+
    "\10\0\1\13\7\0\25\3\2\0\1\3\7\0\3\3"+
    "\1\0\1\3\1\177\2\3\2\0\1\13\7\3\2\0"+
    "\1\13\10\0\1\13\7\0\25\3\2\0\1\3\10\0"+
    "\1\200\1\171\1\71\57\0\7\171\12\0\3\3\1\0"+
    "\4\3\2\0\1\13\7\3\2\0\1\13\10\0\1\13"+
    "\7\0\1\3\1\201\23\3\2\0\1\3\6\0\10\202"+
    "\1\203\1\204\1\205\1\206\6\205\1\207\61\202\10\210"+
    "\1\211\1\212\1\213\1\214\6\212\1\215\61\210\1\0"+
    "\3\3\1\0\2\3\1\216\1\3\2\0\1\13\7\3"+
    "\2\0\1\13\10\0\1\13\7\0\25\3\2\0\1\3"+
    "\7\0\3\3\1\0\4\3\2\0\1\13\7\3\2\0"+
    "\1\13\10\0\1\13\7\0\7\3\1\217\15\3\2\0"+
    "\1\3\7\0\3\3\1\0\4\3\2\0\1\13\7\3"+
    "\2\0\1\13\10\0\1\13\7\0\4\3\1\220\20\3"+
    "\2\0\1\3\7\0\3\3\1\0\4\3\2\0\1\13"+
    "\4\3\1\221\2\3\2\0\1\13\10\0\1\13\7\0"+
    "\25\3\2\0\1\3\7\0\3\3\1\0\4\3\2\0"+
    "\1\13\7\3\2\0\1\13\10\0\1\13\7\0\4\3"+
    "\1\222\20\3\2\0\1\3\7\0\3\3\1\0\4\3"+
    "\2\0\1\13\2\3\1\223\4\3\2\0\1\13\10\0"+
    "\1\13\7\0\25\3\2\0\1\3\7\0\3\3\1\0"+
    "\4\3\2\0\1\13\7\3\2\0\1\13\10\0\1\13"+
    "\7\0\7\3\1\224\15\3\2\0\1\3\7\0\3\3"+
    "\1\0\4\3\2\0\1\13\3\3\1\225\3\3\2\0"+
    "\1\13\10\0\1\13\7\0\25\3\2\0\1\3\7\0"+
    "\3\3\1\0\4\3\2\0\1\13\2\3\1\226\4\3"+
    "\2\0\1\13\10\0\1\13\7\0\25\3\2\0\1\3"+
    "\7\0\3\3\1\0\4\3\2\0\1\13\4\3\1\227"+
    "\2\3\2\0\1\13\10\0\1\13\7\0\25\3\2\0"+
    "\1\3\7\0\3\3\1\0\4\3\2\0\1\13\7\3"+
    "\2\0\1\13\10\0\1\13\7\0\5\3\1\230\17\3"+
    "\2\0\1\3\7\0\3\3\1\0\4\3\2\0\1\13"+
    "\6\3\1\231\2\0\1\13\10\0\1\13\7\0\1\232"+
    "\24\3\2\0\1\3\7\0\3\3\1\0\4\3\2\0"+
    "\1\13\3\3\1\131\3\3\2\0\1\13\10\0\1\13"+
    "\7\0\25\3\2\0\1\3\7\0\3\3\1\0\2\3"+
    "\1\233\1\3\2\0\1\13\7\3\2\0\1\13\10\0"+
    "\1\13\7\0\25\3\2\0\1\3\7\0\3\3\1\0"+
    "\4\3\2\0\1\13\7\3\2\0\1\13\10\0\1\13"+
    "\7\0\5\3\1\234\17\3\2\0\1\3\7\0\3\3"+
    "\1\0\4\3\2\0\1\13\2\3\1\235\4\3\2\0"+
    "\1\13\10\0\1\13\7\0\25\3\2\0\1\3\6\0"+
    "\23\125\1\0\10\125\3\0\45\125\33\0\1\236\51\0"+
    "\3\3\1\0\4\3\2\0\1\13\7\3\2\0\1\13"+
    "\10\0\1\13\7\0\6\3\1\237\16\3\2\0\1\3"+
    "\7\0\3\3\1\0\4\3\2\0\1\13\2\3\1\240"+
    "\4\3\2\0\1\13\10\0\1\13\7\0\3\3\1\241"+
    "\21\3\2\0\1\3\7\0\3\3\1\0\4\3\2\0"+
    "\1\13\3\3\1\242\3\3\2\0\1\13\10\0\1\13"+
    "\7\0\25\3\2\0\1\3\7\0\3\3\1\0\4\3"+
    "\2\0\1\13\7\3\2\0\1\13\10\0\1\13\7\0"+
    "\7\3\1\243\15\3\2\0\1\3\7\0\3\3\1\0"+
    "\4\3\2\0\1\13\7\3\2\0\1\13\10\0\1\13"+
    "\7\0\1\244\24\3\2\0\1\3\7\0\3\3\1\0"+
    "\4\3\2\0\1\13\7\3\2\0\1\13\10\0\1\13"+
    "\7\0\7\3\1\245\15\3\2\0\1\3\7\0\3\3"+
    "\1\0\4\3\2\0\1\13\2\3\1\246\4\3\2\0"+
    "\1\13\10\0\1\13\7\0\25\3\2\0\1\3\7\0"+
    "\3\3\1\0\4\3\2\0\1\13\4\3\1\247\2\3"+
    "\2\0\1\13\10\0\1\13\7\0\25\3\2\0\1\3"+
    "\7\0\3\3\1\0\4\3\2\0\1\13\7\3\2\0"+
    "\1\13\10\0\1\13\7\0\11\3\1\250\13\3\2\0"+
    "\1\3\7\0\3\3\1\0\4\3\2\0\1\13\7\3"+
    "\2\0\1\13\10\0\1\13\7\0\7\3\1\251\15\3"+
    "\2\0\1\3\7\0\3\3\1\0\4\3\2\0\1\13"+
    "\7\3\2\0\1\13\10\0\1\13\7\0\13\3\1\252"+
    "\11\3\2\0\1\3\7\0\3\3\1\0\4\3\2\0"+
    "\1\13\7\3\2\0\1\13\10\0\1\13\7\0\5\3"+
    "\1\253\3\3\1\254\13\3\2\0\1\3\7\0\3\3"+
    "\1\0\4\3\2\0\1\13\7\3\2\0\1\13\10\0"+
    "\1\13\7\0\6\3\1\255\16\3\2\0\1\3\7\0"+
    "\3\3\1\0\4\3\2\0\1\13\2\3\1\256\4\3"+
    "\2\0\1\13\10\0\1\13\7\0\25\3\2\0\1\3"+
    "\7\0\3\3\1\0\4\3\2\0\1\13\7\3\2\0"+
    "\1\13\10\0\1\13\7\0\1\257\4\3\1\260\17\3"+
    "\2\0\1\3\7\0\3\3\1\0\4\3\2\0\1\13"+
    "\1\261\6\3\2\0\1\13\10\0\1\13\7\0\25\3"+
    "\2\0\1\3\7\0\3\3\1\0\4\3\2\0\1\13"+
    "\7\3\2\0\1\13\10\0\1\13\7\0\13\3\1\262"+
    "\11\3\2\0\1\3\7\0\3\3\1\0\4\3\2\0"+
    "\1\13\7\3\2\0\1\13\10\0\1\13\7\0\1\175"+
    "\24\3\2\0\1\3\7\0\3\3\1\0\4\3\2\0"+
    "\1\13\7\3\2\0\1\13\10\0\1\13\7\0\5\3"+
    "\1\263\17\3\2\0\1\3\7\0\3\3\1\0\2\3"+
    "\1\264\1\3\2\0\1\13\7\3\2\0\1\13\10\0"+
    "\1\13\7\0\5\3\1\265\17\3\2\0\1\3\7\0"+
    "\3\3\1\0\4\3\2\0\1\13\3\3\1\266\3\3"+
    "\2\0\1\13\10\0\1\13\7\0\25\3\2\0\1\3"+
    "\10\0\2\161\3\0\1\65\54\0\7\161\12\0\1\61"+
    "\1\267\1\270\1\71\4\61\2\0\1\13\7\61\1\0"+
    "\1\74\1\13\10\0\1\13\7\0\16\61\7\270\2\0"+
    "\1\61\10\0\1\271\1\272\1\273\17\0\1\274\37\0"+
    "\7\272\12\0\1\13\2\270\1\275\4\13\2\0\10\13"+
    "\2\0\1\13\10\0\1\13\7\0\16\13\7\270\2\0"+
    "\1\13\7\0\1\13\2\165\1\275\4\13\2\0\10\13"+
    "\2\0\1\13\10\0\1\13\7\0\16\13\7\165\2\0"+
    "\1\13\10\0\2\275\60\0\7\275\13\0\1\276\1\272"+
    "\1\166\57\0\7\272\13\0\3\71\57\0\7\71\13\0"+
    "\2\171\1\71\57\0\7\171\13\0\1\170\1\171\1\172"+
    "\57\0\7\171\12\0\3\3\1\0\4\3\1\277\1\300"+
    "\1\13\7\3\2\0\1\13\10\0\1\13\7\0\25\3"+
    "\2\0\1\3\7\0\3\3\1\0\4\3\2\0\1\13"+
    "\3\3\1\252\3\3\2\0\1\13\10\0\1\13\7\0"+
    "\25\3\2\0\1\3\7\0\3\3\1\0\4\3\2\0"+
    "\1\13\7\3\2\0\1\13\10\0\1\13\7\0\10\3"+
    "\1\301\14\3\2\0\1\3\7\0\3\3\1\0\2\3"+
    "\1\302\1\3\2\0\1\13\7\3\2\0\1\13\10\0"+
    "\1\13\7\0\25\3\2\0\1\3\10\0\2\303\1\71"+
    "\57\0\7\303\12\0\3\3\1\0\2\3\1\304\1\3"+
    "\2\0\1\13\7\3\2\0\1\13\10\0\1\13\7\0"+
    "\25\3\2\0\1\3\6\0\11\202\1\101\1\202\1\305"+
    "\7\202\1\101\62\202\2\306\1\202\1\306\1\202\1\306"+
    "\1\202\1\101\1\202\1\305\2\306\5\202\1\101\22\202"+
    "\1\306\2\202\1\306\2\202\1\306\7\202\7\306\11\202"+
    "\11\205\1\77\1\205\1\307\7\205\1\101\60\205\10\76"+
    "\1\310\1\311\1\205\1\100\6\205\1\312\1\101\60\76"+
    "\2\202\2\313\1\202\1\313\1\202\1\313\1\202\1\101"+
    "\1\202\1\305\2\313\5\202\1\101\22\202\1\313\2\202"+
    "\1\313\2\202\1\313\7\202\7\313\11\202\12\210\1\101"+
    "\1\314\7\210\1\101\62\210\2\315\1\210\1\315\1\210"+
    "\1\315\2\210\1\101\1\314\2\315\5\210\1\101\22\210"+
    "\1\315\2\210\1\315\2\210\1\315\7\210\7\315\11\210"+
    "\12\212\1\77\1\316\7\212\1\101\60\212\10\102\1\317"+
    "\1\212\1\320\1\103\6\212\1\321\1\101\60\102\2\210"+
    "\2\322\1\210\1\322\1\210\1\322\2\210\1\101\1\314"+
    "\2\322\5\210\1\101\22\210\1\322\2\210\1\322\2\210"+
    "\1\322\7\210\7\322\11\210\1\0\3\3\1\0\4\3"+
    "\2\0\1\13\7\3\2\0\1\13\10\0\1\13\7\0"+
    "\1\323\24\3\2\0\1\3\7\0\3\3\1\0\4\3"+
    "\2\0\1\13\7\3\2\0\1\13\10\0\1\13\7\0"+
    "\1\324\24\3\2\0\1\3\7\0\3\3\1\0\4\3"+
    "\2\0\1\13\7\3\2\0\1\13\10\0\1\13\7\0"+
    "\7\3\1\325\15\3\2\0\1\3\7\0\3\3\1\0"+
    "\2\3\1\326\1\3\2\0\1\13\7\3\2\0\1\13"+
    "\10\0\1\13\7\0\25\3\2\0\1\3\7\0\3\3"+
    "\1\0\4\3\2\0\1\13\7\3\2\0\1\13\10\0"+
    "\1\13\7\0\10\3\1\131\14\3\2\0\1\3\7\0"+
    "\3\3\1\0\4\3\2\0\1\13\7\3\2\0\1\13"+
    "\10\0\1\13\7\0\3\3\1\327\21\3\2\0\1\3"+
    "\7\0\3\3\1\0\4\3\2\0\1\13\7\3\2\0"+
    "\1\13\10\0\1\13\7\0\1\3\1\231\23\3\2\0"+
    "\1\3\7\0\3\3\1\0\4\3\2\0\1\13\2\3"+
    "\1\330\4\3\2\0\1\13\10\0\1\13\7\0\25\3"+
    "\2\0\1\3\7\0\3\3\1\0\4\3\2\0\1\13"+
    "\6\3\1\331\2\0\1\13\10\0\1\13\7\0\25\3"+
    "\2\0\1\3\7\0\3\3\1\0\4\3\2\0\1\13"+
    "\7\3\2\0\1\13\10\0\1\13\7\0\1\3\1\131"+
    "\23\3\2\0\1\3\7\0\3\3\1\0\2\3\1\332"+
    "\1\3\2\0\1\13\7\3\2\0\1\13\10\0\1\13"+
    "\7\0\25\3\2\0\1\3\7\0\3\3\1\0\4\3"+
    "\2\0\1\13\2\3\1\333\4\3\2\0\1\13\10\0"+
    "\1\13\7\0\25\3\2\0\1\3\7\0\3\3\1\0"+
    "\4\3\2\0\1\13\7\3\2\0\1\13\10\0\1\13"+
    "\7\0\14\3\1\131\10\3\2\0\1\3\7\0\3\3"+
    "\1\0\3\3\1\334\2\0\1\13\7\3\2\0\1\13"+
    "\10\0\1\13\7\0\25\3\2\0\1\3\7\0\3\3"+
    "\1\0\4\3\2\0\1\13\4\3\1\335\2\3\2\0"+
    "\1\13\10\0\1\13\7\0\25\3\2\0\1\3\6\0"+
    "\23\236\1\336\7\236\1\337\50\236\1\0\3\3\1\0"+
    "\4\3\2\0\1\13\3\3\1\340\3\3\2\0\1\13"+
    "\10\0\1\13\7\0\25\3\2\0\1\3\7\0\3\3"+
    "\1\0\4\3\2\0\1\13\7\3\2\0\1\13\10\0"+
    "\1\13\7\0\6\3\1\341\16\3\2\0\1\3\7\0"+
    "\3\3\1\0\4\3\2\0\1\13\7\3\2\0\1\13"+
    "\10\0\1\13\7\0\4\3\1\342\20\3\2\0\1\3"+
    "\7\0\3\3\1\0\4\3\2\0\1\13\6\3\1\343"+
    "\2\0\1\13\10\0\1\13\7\0\5\3\1\344\17\3"+
    "\2\0\1\3\7\0\3\3\1\0\4\3\2\0\1\13"+
    "\7\3\2\0\1\13\10\0\1\13\7\0\5\3\1\345"+
    "\17\3\2\0\1\3\7\0\3\3\1\0\4\3\2\0"+
    "\1\13\1\346\6\3\2\0\1\13\10\0\1\13\7\0"+
    "\25\3\2\0\1\3\7\0\3\3\1\0\4\3\2\0"+
    "\1\13\7\3\2\0\1\13\10\0\1\13\7\0\7\3"+
    "\1\347\15\3\2\0\1\3\7\0\3\3\1\0\4\3"+
    "\2\0\1\13\4\3\1\350\2\3\2\0\1\13\10\0"+
    "\1\13\7\0\1\3\1\351\23\3\2\0\1\3\7\0"+
    "\3\3\1\0\2\3\1\352\1\3\2\0\1\13\7\3"+
    "\2\0\1\13\10\0\1\13\7\0\16\3\1\325\1\353"+
    "\1\354\1\355\1\356\2\3\2\0\1\3\7\0\3\3"+
    "\1\0\4\3\2\0\1\13\7\3\2\0\1\13\10\0"+
    "\1\13\7\0\4\3\1\357\20\3\2\0\1\3\7\0"+
    "\3\3\1\0\2\3\1\360\1\3\2\0\1\13\7\3"+
    "\2\0\1\13\10\0\1\13\7\0\25\3\2\0\1\3"+
    "\7\0\3\3\1\0\4\3\2\0\1\13\7\3\2\0"+
    "\1\13\10\0\1\13\7\0\1\3\1\265\23\3\2\0"+
    "\1\3\7\0\3\3\1\0\4\3\2\0\1\13\2\3"+
    "\1\361\4\3\2\0\1\13\10\0\1\13\7\0\25\3"+
    "\2\0\1\3\7\0\3\3\1\0\4\3\2\0\1\13"+
    "\7\3\2\0\1\13\10\0\1\13\7\0\11\3\1\362"+
    "\13\3\2\0\1\3\7\0\3\3\1\0\4\3\2\0"+
    "\1\13\7\3\2\0\1\13\10\0\1\13\7\0\5\3"+
    "\1\363\17\3\2\0\1\3\7\0\3\3\1\0\4\3"+
    "\2\0\1\13\6\3\1\364\2\0\1\13\10\0\1\13"+
    "\7\0\25\3\2\0\1\3\7\0\3\3\1\0\4\3"+
    "\2\0\1\13\7\3\2\0\1\13\10\0\1\13\7\0"+
    "\12\3\1\365\12\3\2\0\1\3\7\0\3\3\1\0"+
    "\4\3\2\0\1\13\5\3\1\366\1\3\2\0\1\13"+
    "\10\0\1\13\7\0\25\3\2\0\1\3\7\0\3\3"+
    "\1\0\4\3\2\0\1\13\7\3\2\0\1\13\10\0"+
    "\1\13\7\0\7\3\1\367\15\3\2\0\1\3\7\0"+
    "\3\3\1\0\4\3\2\0\1\13\7\3\2\0\1\13"+
    "\10\0\1\13\7\0\1\370\24\3\2\0\1\3\7\0"+
    "\3\3\1\0\4\3\2\0\1\13\7\3\2\0\1\13"+
    "\10\0\1\13\7\0\7\3\1\371\15\3\2\0\1\3"+
    "\7\0\3\3\1\0\4\3\2\0\1\13\7\3\2\0"+
    "\1\13\10\0\1\13\7\0\2\3\1\252\22\3\2\0"+
    "\1\3\7\0\3\3\1\0\4\3\2\0\1\13\7\3"+
    "\2\0\1\13\10\0\1\13\7\0\5\3\1\372\17\3"+
    "\2\0\1\3\7\0\1\13\2\373\1\71\4\13\2\0"+
    "\10\13\2\0\1\13\10\0\1\13\7\0\16\13\7\373"+
    "\2\0\1\13\7\0\1\13\2\270\1\71\4\13\2\0"+
    "\10\13\2\0\1\13\10\0\1\13\7\0\16\13\7\270"+
    "\2\0\1\13\10\0\2\71\1\275\57\0\7\71\13\0"+
    "\2\272\1\275\57\0\7\272\13\0\1\271\1\272\1\273"+
    "\57\0\7\272\13\0\2\171\1\275\57\0\7\171\11\0"+
    "\2\374\2\375\1\374\1\375\1\374\1\375\4\374\2\375"+
    "\30\374\1\375\2\374\1\375\2\374\1\375\7\374\7\375"+
    "\11\374\2\376\2\377\1\376\1\377\1\376\1\377\4\376"+
    "\2\377\30\376\1\377\2\376\1\377\2\376\1\377\7\376"+
    "\7\377\11\376\1\0\3\3\1\0\4\3\2\0\1\13"+
    "\3\3\1\265\3\3\2\0\1\13\10\0\1\13\7\0"+
    "\25\3\2\0\1\3\16\0\1\u0100\11\202\1\u0101\61\0"+
    "\2\202\2\205\1\202\1\205\1\202\1\205\1\202\1\101"+
    "\1\202\1\305\2\205\5\202\1\101\22\202\1\205\2\202"+
    "\1\205\2\202\1\205\7\202\7\205\21\202\1\203\2\205"+
    "\1\u0102\6\205\1\207\61\202\2\76\2\u0103\1\76\1\u0103"+
    "\1\76\1\u0103\1\76\1\77\1\76\1\100\2\u0103\5\76"+
    "\1\101\22\76\1\u0103\2\76\1\u0103\2\76\1\u0103\7\76"+
    "\7\u0103\13\76\2\u0104\1\76\1\u0104\1\76\1\u0104\1\76"+
    "\1\77\1\76\1\100\2\u0104\5\76\1\101\22\76\1\u0104"+
    "\2\76\1\u0104\2\76\1\u0104\7\76\7\u0104\11\76\2\202"+
    "\2\203\1\202\1\203\1\202\1\203\1\202\1\101\1\202"+
    "\1\305\2\203\5\202\1\101\22\202\1\203\2\202\1\203"+
    "\2\202\1\203\7\202\7\203\11\202\10\0\1\u0105\11\210"+
    "\1\u0106\61\0\2\210\2\212\1\210\1\212\1\210\1\212"+
    "\2\210\1\101\1\314\2\212\5\210\1\101\22\210\1\212"+
    "\2\210\1\212\2\210\1\212\7\210\7\212\21\210\1\211"+
    "\2\212\1\u0107\6\212\1\215\61\210\2\102\2\u0108\1\102"+
    "\1\u0108\1\102\1\u0108\2\102\1\77\1\103\2\u0108\5\102"+
    "\1\101\22\102\1\u0108\2\102\1\u0108\2\102\1\u0108\7\102"+
    "\7\u0108\13\102\2\u0109\1\102\1\u0109\1\102\1\u0109\2\102"+
    "\1\77\1\103\2\u0109\5\102\1\101\22\102\1\u0109\2\102"+
    "\1\u0109\2\102\1\u0109\7\102\7\u0109\11\102\2\210\2\211"+
    "\1\210\1\211\1\210\1\211\2\210\1\101\1\314\2\211"+
    "\5\210\1\101\22\210\1\211\2\210\1\211\2\210\1\211"+
    "\7\210\7\211\11\210\1\0\3\3\1\0\4\3\2\0"+
    "\1\13\7\3\2\0\1\13\10\0\1\13\7\0\2\3"+
    "\1\131\22\3\2\0\1\3\7\0\3\3\1\0\4\3"+
    "\2\0\1\13\2\3\1\u010a\4\3\2\0\1\13\10\0"+
    "\1\13\7\0\25\3\2\0\1\3\7\0\3\3\1\0"+
    "\4\3\2\0\1\13\7\3\2\0\1\13\10\0\1\13"+
    "\7\0\1\3\1\335\23\3\2\0\1\3\7\0\3\3"+
    "\1\0\4\3\2\0\1\13\4\3\1\u010b\2\3\2\0"+
    "\1\13\10\0\1\13\7\0\25\3\2\0\1\3\7\0"+
    "\3\3\1\0\2\3\1\u010c\1\3\2\0\1\13\7\3"+
    "\2\0\1\13\10\0\1\13\7\0\25\3\2\0\1\3"+
    "\7\0\3\3\1\0\4\3\2\0\1\13\3\3\1\u010d"+
    "\3\3\2\0\1\13\10\0\1\13\7\0\25\3\2\0"+
    "\1\3\7\0\3\3\1\0\4\3\2\0\1\13\7\3"+
    "\2\0\1\13\10\0\1\13\7\0\1\3\1\u010e\23\3"+
    "\2\0\1\3\7\0\3\3\1\0\2\3\1\u010f\1\3"+
    "\2\0\1\13\7\3\2\0\1\13\10\0\1\13\7\0"+
    "\25\3\2\0\1\3\7\0\3\3\1\0\4\3\2\0"+
    "\1\13\7\3\2\0\1\13\10\0\1\13\7\0\16\3"+
    "\1\325\1\353\1\354\1\355\1\356\2\3\2\0\1\3"+
    "\6\0\23\u0110\1\u0111\2\u0110\1\u0112\3\u0110\1\0\1\337"+
    "\50\u0110\23\236\1\336\6\236\1\22\1\337\50\236\1\0"+
    "\3\3\1\0\2\3\1\u0113\1\3\2\0\1\13\7\3"+
    "\2\0\1\13\10\0\1\13\7\0\25\3\2\0\1\3"+
    "\7\0\3\3\1\0\4\3\2\0\1\13\2\3\1\u0114"+
    "\4\3\2\0\1\13\10\0\1\13\7\0\25\3\2\0"+
    "\1\3\7\0\3\3\1\0\4\3\2\0\1\13\7\3"+
    "\2\0\1\13\10\0\1\13\7\0\3\3\1\u0115\21\3"+
    "\2\0\1\3\7\0\3\3\1\0\4\3\2\0\1\13"+
    "\2\3\1\u0116\4\3\2\0\1\13\10\0\1\13\7\0"+
    "\25\3\2\0\1\3\7\0\3\3\1\0\4\3\2\0"+
    "\1\13\7\3\2\0\1\13\10\0\1\13\7\0\6\3"+
    "\1\u0117\16\3\2\0\1\3\7\0\3\3\1\0\4\3"+
    "\2\0\1\13\7\3\2\0\1\13\10\0\1\13\7\0"+
    "\4\3\1\265\20\3\2\0\1\3\7\0\3\3\1\0"+
    "\4\3\2\0\1\13\7\3\2\0\1\13\10\0\1\13"+
    "\7\0\3\3\1\u0118\21\3\2\0\1\3\7\0\3\3"+
    "\1\0\4\3\2\0\1\13\3\3\1\u0119\3\3\2\0"+
    "\1\13\10\0\1\13\7\0\5\3\1\u011a\17\3\2\0"+
    "\1\3\7\0\3\3\1\0\4\3\2\0\1\13\4\3"+
    "\1\u011b\2\3\2\0\1\13\10\0\1\13\7\0\25\3"+
    "\2\0\1\3\7\0\3\3\1\0\4\3\2\0\1\13"+
    "\3\3\1\u011c\3\3\2\0\1\13\10\0\1\13\7\0"+
    "\25\3\2\0\1\3\7\0\3\3\1\0\4\3\2\0"+
    "\1\13\7\3\2\0\1\13\10\0\1\13\7\0\20\3"+
    "\1\325\1\3\1\u011d\2\3\2\0\1\3\7\0\3\3"+
    "\1\0\4\3\2\0\1\13\7\3\2\0\1\13\10\0"+
    "\1\13\7\0\23\3\1\325\1\3\2\0\1\3\7\0"+
    "\3\3\1\0\4\3\2\0\1\13\7\3\2\0\1\13"+
    "\10\0\1\13\7\0\22\3\1\325\2\3\2\0\1\3"+
    "\7\0\3\3\1\0\4\3\2\0\1\13\7\3\2\0"+
    "\1\13\10\0\1\13\7\0\24\3\1\u011e\2\0\1\3"+
    "\7\0\3\3\1\0\4\3\2\0\1\13\3\3\1\u011f"+
    "\3\3\2\0\1\13\10\0\1\13\7\0\25\3\2\0"+
    "\1\3\7\0\3\3\1\0\4\3\2\0\1\13\4\3"+
    "\1\u0120\2\3\2\0\1\13\10\0\1\13\7\0\12\3"+
    "\1\u0121\12\3\2\0\1\3\7\0\3\3\1\0\4\3"+
    "\2\0\1\13\7\3\2\0\1\13\10\0\1\13\7\0"+
    "\5\3\1\u0122\17\3\2\0\1\3\7\0\3\3\1\0"+
    "\4\3\2\0\1\13\1\3\1\u0123\5\3\2\0\1\13"+
    "\10\0\1\13\7\0\25\3\2\0\1\3\7\0\3\3"+
    "\1\0\4\3\2\0\1\13\4\3\1\u0124\2\3\2\0"+
    "\1\13\10\0\1\13\7\0\25\3\2\0\1\3\7\0"+
    "\3\3\1\0\4\3\2\0\1\13\7\3\2\0\1\13"+
    "\10\0\1\13\7\0\10\3\1\u0125\14\3\2\0\1\3"+
    "\7\0\3\3\1\0\4\3\2\0\1\13\7\3\2\0"+
    "\1\13\10\0\1\13\7\0\1\u0126\24\3\2\0\1\3"+
    "\7\0\3\3\1\0\4\3\2\0\1\13\7\3\2\0"+
    "\1\13\10\0\1\13\7\0\5\3\1\u0127\17\3\2\0"+
    "\1\3\7\0\3\3\1\0\4\3\2\0\1\13\1\u0128"+
    "\6\3\2\0\1\13\10\0\1\13\7\0\25\3\2\0"+
    "\1\3\7\0\3\3\1\0\2\3\1\u0129\1\3\2\0"+
    "\1\13\7\3\2\0\1\13\10\0\1\13\7\0\25\3"+
    "\2\0\1\3\7\0\3\3\1\0\4\3\2\0\1\13"+
    "\2\3\1\u012a\4\3\2\0\1\13\10\0\1\13\7\0"+
    "\25\3\2\0\1\3\6\0\2\374\2\u012b\1\374\1\u012b"+
    "\1\374\1\u012b\1\374\1\u012c\2\374\2\u012b\30\374\1\u012b"+
    "\2\374\1\u012b\2\374\1\u012b\7\374\7\u012b\13\374\2\375"+
    "\1\374\1\375\1\374\1\375\1\374\1\u012d\2\374\2\375"+
    "\30\374\1\375\2\374\1\375\2\374\1\375\7\374\7\375"+
    "\11\374\2\376\2\u012e\1\376\1\u012e\1\376\1\u012e\2\376"+
    "\1\u012f\1\376\2\u012e\30\376\1\u012e\2\376\1\u012e\2\376"+
    "\1\u012e\7\376\7\u012e\13\376\2\377\1\376\1\377\1\376"+
    "\1\377\2\376\1\u0130\1\376\2\377\30\376\1\377\2\376"+
    "\1\377\2\376\1\377\7\376\7\377\11\376\2\0\2\u0131"+
    "\1\0\1\u0131\1\0\1\u0131\4\0\2\u0131\30\0\1\u0131"+
    "\2\0\1\u0131\2\0\1\u0131\7\0\7\u0131\13\0\2\u0132"+
    "\1\0\1\u0132\1\0\1\u0132\4\0\2\u0132\30\0\1\u0132"+
    "\2\0\1\u0132\2\0\1\u0132\7\0\7\u0132\11\0\11\205"+
    "\1\311\1\205\1\307\7\205\1\101\60\205\2\76\2\205"+
    "\1\76\1\205\1\76\1\205\1\76\1\77\1\76\1\100"+
    "\2\205\5\76\1\101\22\76\1\205\2\76\1\205\2\76"+
    "\1\205\7\76\7\205\13\76\2\310\1\76\1\310\1\76"+
    "\1\310\1\76\1\77\1\76\1\100\2\310\5\76\1\101"+
    "\22\76\1\310\2\76\1\310\2\76\1\310\7\76\7\310"+
    "\11\76\2\0\2\u0133\1\0\1\u0133\1\0\1\u0133\4\0"+
    "\2\u0133\30\0\1\u0133\2\0\1\u0133\2\0\1\u0133\7\0"+
    "\7\u0133\13\0\2\u0134\1\0\1\u0134\1\0\1\u0134\4\0"+
    "\2\u0134\30\0\1\u0134\2\0\1\u0134\2\0\1\u0134\7\0"+
    "\7\u0134\11\0\12\212\1\320\1\316\7\212\1\101\60\212"+
    "\2\102\2\212\1\102\1\212\1\102\1\212\2\102\1\77"+
    "\1\103\2\212\5\102\1\101\22\102\1\212\2\102\1\212"+
    "\2\102\1\212\7\102\7\212\13\102\2\317\1\102\1\317"+
    "\1\102\1\317\2\102\1\77\1\103\2\317\5\102\1\101"+
    "\22\102\1\317\2\102\1\317\2\102\1\317\7\102\7\317"+
    "\11\102\1\0\3\3\1\0\4\3\2\0\1\13\7\3"+
    "\2\0\1\13\10\0\1\13\7\0\3\3\1\u0135\21\3"+
    "\2\0\1\3\7\0\3\3\1\0\4\3\2\0\1\13"+
    "\7\3\2\0\1\13\10\0\1\13\7\0\5\3\1\u0136"+
    "\17\3\2\0\1\3\7\0\3\3\1\0\4\3\2\0"+
    "\1\13\7\3\2\0\1\13\10\0\1\13\7\0\13\3"+
    "\1\265\11\3\2\0\1\3\7\0\3\3\1\0\4\3"+
    "\2\0\1\13\2\3\1\u0137\4\3\2\0\1\13\10\0"+
    "\1\13\7\0\25\3\2\0\1\3\7\0\3\3\1\0"+
    "\4\3\2\0\1\13\1\3\1\u0138\5\3\2\0\1\13"+
    "\10\0\1\13\7\0\25\3\2\0\1\3\7\0\3\3"+
    "\1\0\4\3\2\0\1\13\7\3\2\0\1\13\10\0"+
    "\1\13\7\0\6\3\1\325\16\3\2\0\1\3\6\0"+
    "\23\u0110\1\u0111\7\u0110\1\u0111\3\u0139\70\u0110\1\u0111\6\u0110"+
    "\1\u013a\1\u0111\3\u0139\70\u0110\1\u0111\2\u0110\1\u0112\3\u0110"+
    "\1\u0139\1\337\50\u0110\1\0\3\3\1\0\4\3\2\0"+
    "\1\13\7\3\2\0\1\13\10\0\1\13\7\0\1\3"+
    "\1\u013b\23\3\2\0\1\3\7\0\3\3\1\0\4\3"+
    "\2\0\1\13\7\3\2\0\1\13\10\0\1\13\7\0"+
    "\6\3\1\252\16\3\2\0\1\3\7\0\3\3\1\0"+
    "\4\3\2\0\1\13\4\3\1\u013c\2\3\2\0\1\13"+
    "\10\0\1\13\7\0\25\3\2\0\1\3\7\0\3\3"+
    "\1\0\4\3\2\0\1\13\7\3\2\0\1\13\10\0"+
    "\1\13\7\0\12\3\1\325\12\3\2\0\1\3\7\0"+
    "\3\3\1\0\4\3\2\0\1\13\7\3\2\0\1\13"+
    "\10\0\1\13\7\0\5\3\1\u013d\17\3\2\0\1\3"+
    "\7\0\3\3\1\0\4\3\2\0\1\13\7\3\2\0"+
    "\1\13\10\0\1\13\7\0\4\3\1\u013e\20\3\2\0"+
    "\1\3\7\0\3\3\1\0\4\3\2\0\1\13\7\3"+
    "\2\0\1\13\10\0\1\13\7\0\1\u013f\24\3\2\0"+
    "\1\3\7\0\3\3\1\0\4\3\2\0\1\13\2\3"+
    "\1\u0140\4\3\2\0\1\13\10\0\1\13\7\0\25\3"+
    "\2\0\1\3\7\0\3\3\1\0\4\3\2\0\1\13"+
    "\3\3\1\u0141\3\3\2\0\1\13\10\0\1\13\7\0"+
    "\25\3\2\0\1\3\7\0\3\3\1\0\4\3\2\0"+
    "\1\13\2\3\1\u0142\4\3\2\0\1\13\10\0\1\13"+
    "\7\0\25\3\2\0\1\3\7\0\3\3\1\0\4\3"+
    "\2\0\1\13\7\3\2\0\1\13\10\0\1\13\7\0"+
    "\16\3\1\325\6\3\2\0\1\3\7\0\3\3\1\0"+
    "\4\3\2\0\1\13\7\3\2\0\1\13\10\0\1\13"+
    "\7\0\20\3\1\325\4\3\2\0\1\3\7\0\3\3"+
    "\1\0\4\3\2\0\1\13\4\3\1\131\2\3\2\0"+
    "\1\13\10\0\1\13\7\0\25\3\2\0\1\3\7\0"+
    "\3\3\1\0\2\3\1\131\1\3\2\0\1\13\7\3"+
    "\2\0\1\13\10\0\1\13\7\0\25\3\2\0\1\3"+
    "\7\0\3\3\1\0\4\3\2\0\1\13\7\3\2\0"+
    "\1\13\10\0\1\13\7\0\1\u0143\24\3\2\0\1\3"+
    "\7\0\3\3\1\0\4\3\2\0\1\13\2\3\1\u0144"+
    "\4\3\2\0\1\13\10\0\1\13\7\0\25\3\2\0"+
    "\1\3\7\0\3\3\1\0\4\3\2\0\1\13\7\3"+
    "\2\0\1\13\10\0\1\13\7\0\5\3\1\u0145\17\3"+
    "\2\0\1\3\7\0\3\3\1\0\2\3\1\252\1\3"+
    "\2\0\1\13\7\3\2\0\1\13\10\0\1\13\7\0"+
    "\25\3\2\0\1\3\7\0\3\3\1\0\4\3\2\0"+
    "\1\13\7\3\2\0\1\13\10\0\1\13\7\0\1\u0146"+
    "\24\3\2\0\1\3\7\0\3\3\1\0\4\3\2\0"+
    "\1\13\4\3\1\u0147\2\3\2\0\1\13\10\0\1\13"+
    "\7\0\25\3\2\0\1\3\7\0\3\3\1\0\4\3"+
    "\2\0\1\13\7\3\2\0\1\13\10\0\1\13\7\0"+
    "\3\3\1\u0148\21\3\2\0\1\3\7\0\3\3\1\0"+
    "\4\3\2\0\1\13\7\3\2\0\1\13\10\0\1\13"+
    "\7\0\7\3\1\u0149\15\3\2\0\1\3\7\0\3\3"+
    "\1\0\4\3\2\0\1\13\7\3\2\0\1\13\10\0"+
    "\1\13\7\0\12\3\1\u014a\12\3\2\0\1\3\10\0"+
    "\2\u012b\1\0\1\u012b\1\0\1\u012b\1\0\1\u014b\2\0"+
    "\2\u012b\30\0\1\u012b\2\0\1\u012b\2\0\1\u012b\7\0"+
    "\7\u012b\13\0\2\u012e\1\0\1\u012e\1\0\1\u012e\2\0"+
    "\1\u014b\1\0\2\u012e\30\0\1\u012e\2\0\1\u012e\2\0"+
    "\1\u012e\7\0\7\u012e\13\0\2\202\1\0\1\202\1\0"+
    "\1\202\4\0\2\202\30\0\1\202\2\0\1\202\2\0"+
    "\1\202\7\0\7\202\13\0\2\u0100\1\0\1\u0100\1\0"+
    "\1\u0100\4\0\2\u0100\30\0\1\u0100\2\0\1\u0100\2\0"+
    "\1\u0100\7\0\7\u0100\13\0\2\210\1\0\1\210\1\0"+
    "\1\210\4\0\2\210\30\0\1\210\2\0\1\210\2\0"+
    "\1\210\7\0\7\210\13\0\2\u0105\1\0\1\u0105\1\0"+
    "\1\u0105\4\0\2\u0105\30\0\1\u0105\2\0\1\u0105\2\0"+
    "\1\u0105\7\0\7\u0105\12\0\3\3\1\0\2\3\1\341"+
    "\1\3\2\0\1\13\7\3\2\0\1\13\10\0\1\13"+
    "\7\0\25\3\2\0\1\3\7\0\3\3\1\0\4\3"+
    "\2\0\1\13\7\3\2\0\1\13\10\0\1\13\7\0"+
    "\4\3\1\u014c\20\3\2\0\1\3\7\0\3\3\1\0"+
    "\2\3\1\u014d\1\3\2\0\1\13\7\3\2\0\1\13"+
    "\10\0\1\13\7\0\25\3\2\0\1\3\6\0\23\u0139"+
    "\1\u014e\7\u0139\1\u014f\50\u0139\34\u013a\3\0\45\u013a\1\0"+
    "\3\3\1\0\4\3\2\0\1\13\7\3\2\0\1\13"+
    "\10\0\1\13\7\0\1\3\1\325\23\3\2\0\1\3"+
    "\7\0\3\3\1\0\4\3\2\0\1\13\4\3\1\u0150"+
    "\2\3\2\0\1\13\10\0\1\13\7\0\25\3\2\0"+
    "\1\3\7\0\3\3\1\0\4\3\2\0\1\13\7\3"+
    "\2\0\1\13\10\0\1\13\7\0\6\3\1\u0135\16\3"+
    "\2\0\1\3\7\0\3\3\1\0\4\3\2\0\1\13"+
    "\7\3\2\0\1\13\10\0\1\13\7\0\3\3\1\u0151"+
    "\21\3\2\0\1\3\7\0\3\3\1\0\4\3\2\0"+
    "\1\13\6\3\1\u0120\2\0\1\13\10\0\1\13\7\0"+
    "\25\3\2\0\1\3\7\0\3\3\1\0\4\3\2\0"+
    "\1\13\6\3\1\u0152\2\0\1\13\10\0\1\13\7\0"+
    "\25\3\2\0\1\3\7\0\3\3\1\0\4\3\2\0"+
    "\1\13\7\3\2\0\1\13\10\0\1\13\7\0\1\u0153"+
    "\24\3\2\0\1\3\7\0\3\3\1\0\4\3\2\0"+
    "\1\13\4\3\1\u0154\2\3\2\0\1\13\10\0\1\13"+
    "\7\0\25\3\2\0\1\3\7\0\3\3\1\0\4\3"+
    "\2\0\1\13\7\3\2\0\1\13\10\0\1\13\7\0"+
    "\12\3\1\131\12\3\2\0\1\3\7\0\3\3\1\0"+
    "\2\3\1\120\1\3\2\0\1\13\7\3\2\0\1\13"+
    "\10\0\1\13\7\0\25\3\2\0\1\3\7\0\3\3"+
    "\1\0\2\3\1\u0148\1\3\2\0\1\13\7\3\2\0"+
    "\1\13\10\0\1\13\7\0\25\3\2\0\1\3\7\0"+
    "\3\3\1\0\2\3\1\u0155\1\3\2\0\1\13\7\3"+
    "\2\0\1\13\10\0\1\13\7\0\25\3\2\0\1\3"+
    "\7\0\3\3\1\0\4\3\2\0\1\13\2\3\1\u0156"+
    "\4\3\2\0\1\13\10\0\1\13\7\0\25\3\2\0"+
    "\1\3\7\0\3\3\1\0\4\3\2\0\1\13\3\3"+
    "\1\341\3\3\2\0\1\13\10\0\1\13\7\0\25\3"+
    "\2\0\1\3\6\0\23\u0139\1\u014e\2\u0139\1\u0157\3\u0139"+
    "\1\0\1\u014f\73\u0139\1\u014e\6\u0139\1\0\1\u014f\50\u0139"+
    "\1\0\3\3\1\0\4\3\2\0\1\13\7\3\2\0"+
    "\1\13\10\0\1\13\7\0\13\3\1\u0158\11\3\2\0"+
    "\1\3\7\0\3\3\1\0\4\3\2\0\1\13\4\3"+
    "\1\u0159\2\3\2\0\1\13\10\0\1\13\7\0\25\3"+
    "\2\0\1\3\7\0\3\3\1\0\4\3\2\0\1\13"+
    "\7\3\2\0\1\13\10\0\1\13\7\0\3\3\1\u015a"+
    "\21\3\2\0\1\3\7\0\3\3\1\0\4\3\2\0"+
    "\1\13\7\3\2\0\1\13\10\0\1\13\7\0\7\3"+
    "\1\u0155\15\3\2\0\1\3\7\0\3\3\1\0\2\3"+
    "\1\u015b\1\3\2\0\1\13\7\3\2\0\1\13\10\0"+
    "\1\13\7\0\25\3\2\0\1\3\6\0\23\u0139\1\u014e"+
    "\2\u0139\1\u0157\4\u0139\1\u014f\50\u0139\1\0\3\3\1\0"+
    "\4\3\2\0\1\13\4\3\1\u015c\2\3\2\0\1\13"+
    "\10\0\1\13\7\0\25\3\2\0\1\3\7\0\3\3"+
    "\1\0\4\3\2\0\1\13\7\3\2\0\1\13\10\0"+
    "\1\13\7\0\3\3\1\u015d\21\3\2\0\1\3\7\0"+
    "\3\3\1\0\4\3\2\0\1\13\7\3\2\0\1\13"+
    "\10\0\1\13\7\0\4\3\1\120\20\3\2\0\1\3"+
    "\7\0\3\3\1\0\4\3\2\0\1\13\7\3\2\0"+
    "\1\13\10\0\1\13\7\0\1\u015e\24\3\2\0\1\3"+
    "\7\0\3\3\1\0\4\3\2\0\1\13\7\3\2\0"+
    "\1\13\10\0\1\13\7\0\7\3\1\u015f\15\3\2\0"+
    "\1\3\7\0\3\3\1\0\4\3\2\0\1\13\7\3"+
    "\2\0\1\13\10\0\1\13\7\0\7\3\1\341\15\3"+
    "\2\0\1\3\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20128];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\17\1\1\11\1\1\3\11\2\1\1\11"+
    "\4\1\2\11\11\1\2\11\3\1\3\11\13\1\1\0"+
    "\1\1\1\0\1\11\1\1\1\11\1\0\21\1\1\11"+
    "\1\1\1\0\2\11\41\1\1\0\13\1\1\0\5\1"+
    "\1\0\56\1\1\0\3\1\2\0\2\1\1\0\1\1"+
    "\1\0\2\1\1\0\1\1\1\0\1\1\1\0\2\1"+
    "\1\0\1\1\1\0\52\1\6\0\1\1\4\0\1\1"+
    "\2\0\41\1\1\0\2\1\1\0\2\1\4\0\4\1"+
    "\1\0\21\1\1\11\24\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[351];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 202) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return new Symbol(sym.ERROR_CEROS_A_LA_IZQUIERDA, yychar, yyline, yytext());
            }
          case 51: break;
          case 2: 
            { return new Symbol(sym.ERROR, yychar, yyline, yytext());
            }
          case 52: break;
          case 3: 
            { return new Symbol(sym.Identificador, yychar, yyline, yytext());
            }
          case 53: break;
          case 4: 
            { return new Symbol(sym.Numero, yychar, yyline, yytext());
            }
          case 54: break;
          case 5: 
            { return new Symbol(sym.OPERADOR, yychar, yyline, yytext());
            }
          case 55: break;
          case 6: 
            { return new Symbol(sym.Comillas, yychar, yyline, yytext());
            }
          case 56: break;
          case 7: 
            { return new Symbol(sym.ERROR_CARACTERES_NO_VALIDOS, yychar, yyline, yytext());
            }
          case 57: break;
          case 8: 
            { /* ignore */
            }
          case 58: break;
          case 9: 
            { return new Symbol(sym.Op_Aritmetico, yychar, yyline, yytext());
            }
          case 59: break;
          case 10: 
            { return new Symbol(sym.P_coma, yychar, yyline, yytext());
            }
          case 60: break;
          case 11: 
            { return new Symbol(sym.Parentesis_c, yychar, yyline, yytext());
            }
          case 61: break;
          case 12: 
            { return new Symbol(sym.Pregunta, yychar, yyline, yytext());
            }
          case 62: break;
          case 13: 
            { return new Symbol(sym.Op_relacional, yychar, yyline, yytext());
            }
          case 63: break;
          case 14: 
            { return new Symbol(sym.Corchete_a, yychar, yyline, yytext());
            }
          case 64: break;
          case 15: 
            { return new Symbol(sym.Corchete_c, yychar, yyline, yytext());
            }
          case 65: break;
          case 16: 
            { return new Symbol(sym.Coma, yychar, yyline, yytext());
            }
          case 66: break;
          case 17: 
            { return new Symbol(sym.Dos_Puntos, yychar, yyline, yytext());
            }
          case 67: break;
          case 18: 
            { return new Symbol(sym.Igual, yychar, yyline, yytext());
            }
          case 68: break;
          case 19: 
            { return new Symbol(sym.Op_logico, yychar, yyline, yytext());
            }
          case 69: break;
          case 20: 
            { return new Symbol(sym.Parentesis_a, yychar, yyline, yytext());
            }
          case 70: break;
          case 21: 
            { return new Symbol(sym.Llave_a, yychar, yyline, yytext());
            }
          case 71: break;
          case 22: 
            { return new Symbol(sym.Llave_c, yychar, yyline, yytext());
            }
          case 72: break;
          case 23: 
            { return new Symbol(sym.ERROR_IDENTIFICADOR, yychar, yyline, yytext());
            }
          case 73: break;
          case 24: 
            { return new Symbol(sym.ERROR_NOTACION_CIENTIFICA, yychar, yyline, yytext());
            }
          case 74: break;
          case 25: 
            { return new Symbol(sym.String, yychar, yyline, yytext());
            }
          case 75: break;
          case 26: 
            { return new Symbol(sym.ERROR_STRING, yychar, yyline, yytext());
            }
          case 76: break;
          case 27: 
            { return new Symbol(sym.Op_atribucion, yychar, yyline, yytext());
            }
          case 77: break;
          case 28: 
            { return new Symbol(sym.PALABRA_RESERVADA, yychar, yyline, yytext());
            }
          case 78: break;
          case 29: 
            { return new Symbol(sym.If, yychar, yyline, yytext());
            }
          case 79: break;
          case 30: 
            { return new Symbol(sym.Do, yychar, yyline, yytext());
            }
          case 80: break;
          case 31: 
            { return new Symbol(sym.For, yychar, yyline, yytext());
            }
          case 81: break;
          case 32: 
            { return new Symbol(sym.ERROR_COMENTARIO, yychar, yyline, yytext());
            }
          case 82: break;
          case 33: 
            { return new Symbol(sym.T_dato, yychar, yyline, yytext());
            }
          case 83: break;
          case 34: 
            { return new Symbol(sym.UNIDAD, yychar, yyline, yytext());
            }
          case 84: break;
          case 35: 
            { return new Symbol(sym.Enum, yychar, yyline, yytext());
            }
          case 85: break;
          case 36: 
            { return new Symbol(sym.Else, yychar, yyline, yytext());
            }
          case 86: break;
          case 37: 
            { return new Symbol(sym.Op_booleano, yychar, yyline, yytext());
            }
          case 87: break;
          case 38: 
            { return new Symbol(sym.TRANSAC, yychar, yyline, yytext());
            }
          case 88: break;
          case 39: 
            { return new Symbol(sym.Main, yychar, yyline, yytext());
            }
          case 89: break;
          case 40: 
            { return new Symbol(sym.While, yychar, yyline, yytext());
            }
          case 90: break;
          case 41: 
            { return new Symbol(sym.ERROR_HEXADECIMAL, yychar, yyline, yytext());
            }
          case 91: break;
          case 42: 
            { return new Symbol(sym.Return, yychar, yyline, yytext());
            }
          case 92: break;
          case 43: 
            { return new Symbol(sym.Struct, yychar, yyline, yytext());
            }
          case 93: break;
          case 44: 
            { return new Symbol(sym.Pragma, yychar, yyline, yytext());
            }
          case 94: break;
          case 45: 
            { return new Symbol(sym.Visibilidad, yychar, yyline, yytext());
            }
          case 95: break;
          case 46: 
            { return new Symbol(sym.Cadena, yychar, yyline, yytext());
            }
          case 96: break;
          case 47: 
            { return new Symbol(sym.Modificador, yychar, yyline, yytext());
            }
          case 97: break;
          case 48: 
            { return new Symbol(sym.Function, yychar, yyline, yytext());
            }
          case 98: break;
          case 49: 
            { return new Symbol(sym.Solidity, yychar, yyline, yytext());
            }
          case 99: break;
          case 50: 
            { return new Symbol(sym.Contract, yychar, yyline, yytext());
            }
          case 100: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
