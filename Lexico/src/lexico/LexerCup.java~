/* The following code was generated by JFlex 1.6.1 */

package lexico;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/lexico/lexerCup.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\30\1\24\1\36\1\36\1\3\22\0\1\30\1\67\1\12"+
    "\2\26\1\70\1\42\1\13\1\71\1\32\1\35\1\66\1\27\1\25"+
    "\1\5\1\34\1\2\1\4\1\4\1\4\1\4\1\4\1\4\1\4"+
    "\1\4\1\4\1\0\1\31\1\40\1\65\1\41\1\0\1\26\6\6"+
    "\14\1\1\64\7\1\1\44\1\14\1\45\1\0\2\26\1\46\1\15"+
    "\1\51\1\54\1\10\1\16\1\60\1\7\1\53\1\1\1\50\1\55"+
    "\1\56\1\17\1\52\1\57\1\1\1\20\1\47\1\21\1\23\1\22"+
    "\1\62\1\11\1\61\1\63\1\72\1\43\1\33\1\0\6\26\1\37"+
    "\u1e6e\26\u0134\0\1\36\1\36\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\3\2\1\3\4\2\1\4\7\2\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\2\14\2\2\1\15"+
    "\1\16\13\2\1\17\1\20\2\2\1\21\1\22\1\23"+
    "\1\24\1\1\1\25\1\26\1\25\1\1\3\23\1\1"+
    "\1\23\1\0\1\23\1\0\1\27\2\30\1\0\1\30"+
    "\15\23\1\31\1\3\1\0\1\32\1\14\1\33\1\34"+
    "\6\23\1\35\4\23\1\36\13\23\1\1\1\24\1\26"+
    "\2\25\1\1\1\26\2\1\1\0\1\1\1\34\2\23"+
    "\1\1\1\23\4\30\1\0\5\30\1\0\1\30\5\23"+
    "\1\37\7\23\1\40\7\23\1\41\16\23\1\42\1\23"+
    "\2\1\2\25\1\0\2\26\1\25\2\0\1\23\1\0"+
    "\1\43\1\0\2\30\1\0\1\27\1\0\1\30\1\0"+
    "\2\30\1\0\1\27\1\0\1\30\2\23\1\44\3\23"+
    "\1\45\1\23\2\40\1\46\3\23\1\46\6\23\1\47"+
    "\7\23\1\13\6\0\1\30\4\0\1\30\2\0\4\23"+
    "\3\40\1\50\16\23\1\51\1\23\1\0\1\52\1\25"+
    "\1\0\1\52\1\25\4\0\2\23\1\0\1\40\6\23"+
    "\1\53\1\52\1\23\2\40\3\23\1\40\6\23";

  private static int [] zzUnpackAction() {
    int [] result = new int[306];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d"+
    "\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff\0\u033a\0\u0375"+
    "\0\u03b0\0\u03eb\0\73\0\73\0\73\0\u0426\0\u0461\0\u0289"+
    "\0\u049c\0\u04d7\0\u0512\0\u054d\0\73\0\73\0\u0588\0\u05c3"+
    "\0\u05fe\0\u0639\0\u0674\0\u06af\0\u06ea\0\u0725\0\u0760\0\u079b"+
    "\0\u07d6\0\u0811\0\u03eb\0\u0811\0\u03eb\0\73\0\73\0\166"+
    "\0\u084c\0\u0887\0\u08c2\0\u08fd\0\u0127\0\u0938\0\u0973\0\u09ae"+
    "\0\u09e9\0\u0a24\0\u0a5f\0\u0a9a\0\u0ad5\0\u0213\0\73\0\u0b10"+
    "\0\73\0\u024e\0\u0b4b\0\u0b86\0\u0bc1\0\u0bfc\0\u0c37\0\u0c72"+
    "\0\u0cad\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a"+
    "\0\73\0\u0e85\0\u0ec0\0\73\0\73\0\73\0\166\0\u0efb"+
    "\0\u0f36\0\u0f71\0\u0fac\0\u0fe7\0\u1022\0\166\0\u105d\0\u1098"+
    "\0\u10d3\0\u110e\0\u1149\0\u1184\0\u11bf\0\u11fa\0\u1235\0\u1270"+
    "\0\u12ab\0\u12e6\0\u1321\0\u135c\0\u1397\0\u13d2\0\u140d\0\u1448"+
    "\0\u1483\0\u14be\0\u14f9\0\u1534\0\u156f\0\u15aa\0\u15e5\0\u0a24"+
    "\0\u1620\0\u165b\0\u1696\0\u16d1\0\u170c\0\u1747\0\u1782\0\u17bd"+
    "\0\u0213\0\u17f8\0\u1833\0\u186e\0\u18a9\0\u18e4\0\u191f\0\u024e"+
    "\0\u195a\0\u1995\0\u19d0\0\u1a0b\0\u1a46\0\u1a81\0\u1abc\0\166"+
    "\0\u1af7\0\u1b32\0\u1b6d\0\u0588\0\u1ba8\0\u1be3\0\u1c1e\0\u1c59"+
    "\0\u1c94\0\u1ccf\0\u1d0a\0\u1d45\0\u1d80\0\u1dbb\0\u1df6\0\u1e31"+
    "\0\u1e6c\0\u1ea7\0\u1ee2\0\u1f1d\0\u1f58\0\u1f93\0\u1fce\0\u2009"+
    "\0\u2044\0\u207f\0\u20ba\0\u20f5\0\u2130\0\u216b\0\166\0\u21a6"+
    "\0\u21e1\0\u221c\0\u2257\0\u2292\0\u1534\0\u22cd\0\u1534\0\u2308"+
    "\0\u2343\0\u237e\0\u23b9\0\u170c\0\166\0\u23f4\0\u242f\0\u246a"+
    "\0\u24a5\0\u1782\0\u24e0\0\u251b\0\u2556\0\u2591\0\u25cc\0\u2607"+
    "\0\u18a9\0\u2642\0\u267d\0\u26b8\0\u26f3\0\166\0\u272e\0\u2769"+
    "\0\u27a4\0\166\0\u27df\0\u281a\0\u2855\0\166\0\u2890\0\u28cb"+
    "\0\u2906\0\u2941\0\u297c\0\u29b7\0\u29f2\0\u2a2d\0\u2a68\0\u2aa3"+
    "\0\166\0\u2ade\0\u2b19\0\u2b54\0\u2b8f\0\u2bca\0\u2c05\0\u2c40"+
    "\0\u21e1\0\u2c7b\0\u2cb6\0\u2cf1\0\u2d2c\0\u2d67\0\u2da2\0\u2ddd"+
    "\0\u2e18\0\u2e53\0\u2e8e\0\u2ec9\0\u2f04\0\u2f3f\0\u2f7a\0\u2fb5"+
    "\0\u2ff0\0\u302b\0\u3066\0\u30a1\0\u30dc\0\u3117\0\73\0\u3152"+
    "\0\u318d\0\u31c8\0\u3203\0\u323e\0\u3279\0\u32b4\0\u32ef\0\u332a"+
    "\0\u3365\0\u33a0\0\u33db\0\u3416\0\u3451\0\166\0\u348c\0\u34c7"+
    "\0\u2c7b\0\u2c7b\0\u3502\0\u2cf1\0\u2cf1\0\u353d\0\u3578\0\u35b3"+
    "\0\u35ee\0\u3629\0\u3664\0\u369f\0\u36da\0\u3715\0\u3750\0\u378b"+
    "\0\u37c6\0\u3801\0\u383c\0\166\0\73\0\u3877\0\u38b2\0\u38ed"+
    "\0\u3928\0\u3963\0\u399e\0\u39d9\0\u3a14\0\u3a4f\0\u3a8a\0\u3ac5"+
    "\0\u3b00\0\u3b3b";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[306];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\3\1\10"+
    "\1\11\1\3\1\12\1\13\1\14\1\15\1\16\1\3"+
    "\1\17\1\20\1\21\1\3\1\5\1\22\1\14\2\5"+
    "\1\23\1\24\1\25\1\26\1\27\1\0\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\3"+
    "\1\41\1\3\1\42\1\43\1\44\1\45\1\46\1\3"+
    "\1\47\1\50\1\3\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\74\0\2\60\1\0\1\60\1\0\4\60"+
    "\2\0\1\30\7\60\2\0\1\30\10\0\1\30\6\0"+
    "\17\60\7\0\1\61\1\62\1\0\1\62\1\63\2\61"+
    "\1\64\1\61\2\0\1\30\7\61\2\0\1\30\10\0"+
    "\1\30\6\0\17\61\11\0\1\5\20\0\1\5\2\0"+
    "\2\5\43\0\1\61\1\65\1\0\1\65\1\63\2\61"+
    "\1\64\1\61\2\0\1\30\7\61\2\0\1\30\10\0"+
    "\1\30\6\0\17\61\10\0\1\63\1\0\1\63\3\0"+
    "\1\66\63\0\2\60\1\0\1\60\1\0\2\60\1\67"+
    "\1\60\2\0\1\30\7\60\2\0\1\30\10\0\1\30"+
    "\6\0\4\60\1\70\12\60\7\0\1\60\1\71\1\0"+
    "\1\71\1\72\4\60\2\0\1\30\4\60\1\73\2\60"+
    "\1\0\1\74\1\30\10\0\1\30\6\0\7\60\1\75"+
    "\7\60\6\0\12\76\1\77\1\76\1\100\7\76\1\101"+
    "\46\76\13\102\1\77\1\103\7\102\1\101\46\102\1\0"+
    "\2\30\1\0\1\30\1\0\4\30\2\0\10\30\2\0"+
    "\1\30\10\0\1\30\6\0\17\30\7\0\2\60\1\0"+
    "\1\60\1\0\4\60\2\0\1\30\3\60\1\104\3\60"+
    "\2\0\1\30\10\0\1\30\6\0\1\105\12\60\1\106"+
    "\3\60\7\0\2\60\1\0\1\60\1\0\4\60\2\0"+
    "\1\30\3\60\1\107\3\60\2\0\1\30\10\0\1\30"+
    "\6\0\1\110\3\60\1\111\1\112\1\60\1\113\7\60"+
    "\7\0\2\60\1\0\1\60\1\0\2\60\1\114\1\60"+
    "\2\0\1\30\7\60\2\0\1\30\10\0\1\30\6\0"+
    "\17\60\7\0\2\60\1\0\1\60\1\0\1\60\1\115"+
    "\2\60\2\0\1\30\3\60\1\116\3\60\2\0\1\30"+
    "\10\0\1\30\6\0\17\60\7\0\2\60\1\0\1\60"+
    "\1\0\4\60\2\0\1\30\7\60\2\0\1\30\10\0"+
    "\1\30\6\0\1\117\4\60\1\120\11\60\73\0\1\121"+
    "\41\0\1\122\1\123\27\0\1\121\42\0\1\124\27\0"+
    "\1\121\45\0\1\125\24\0\1\125\46\0\1\125\23\0"+
    "\1\125\47\0\1\126\73\0\1\126\30\0\2\60\1\0"+
    "\1\60\1\0\4\60\2\0\1\30\7\60\2\0\1\30"+
    "\10\0\1\30\6\0\1\60\1\127\15\60\7\0\2\60"+
    "\1\0\1\60\1\0\2\60\1\130\1\60\2\0\1\30"+
    "\4\60\1\131\2\60\2\0\1\30\10\0\1\30\6\0"+
    "\15\60\1\132\1\60\7\0\2\60\1\0\1\60\1\0"+
    "\1\60\1\133\2\60\2\0\1\30\7\60\2\0\1\30"+
    "\10\0\1\30\6\0\1\134\3\60\1\135\12\60\7\0"+
    "\2\60\1\0\1\60\1\0\4\60\2\0\1\30\1\60"+
    "\1\136\1\137\4\60\2\0\1\30\10\0\1\30\6\0"+
    "\10\60\1\140\6\60\7\0\2\60\1\0\1\60\1\0"+
    "\2\60\1\141\1\60\2\0\1\30\7\60\2\0\1\30"+
    "\10\0\1\30\6\0\1\142\3\60\1\143\12\60\7\0"+
    "\2\60\1\0\1\60\1\0\4\60\2\0\1\30\7\60"+
    "\2\0\1\30\10\0\1\30\6\0\4\60\1\144\12\60"+
    "\7\0\2\60\1\0\1\60\1\0\4\60\2\0\1\30"+
    "\7\60\2\0\1\30\10\0\1\30\6\0\1\145\3\60"+
    "\1\146\1\147\11\60\7\0\2\60\1\0\1\60\1\0"+
    "\4\60\2\0\1\30\3\60\1\150\2\60\1\151\2\0"+
    "\1\30\10\0\1\30\6\0\1\152\16\60\7\0\2\60"+
    "\1\0\1\60\1\0\2\60\1\153\1\60\2\0\1\30"+
    "\7\60\2\0\1\30\10\0\1\30\6\0\17\60\7\0"+
    "\2\60\1\0\1\60\1\0\1\60\1\154\1\155\1\60"+
    "\2\0\1\30\7\60\2\0\1\30\10\0\1\30\6\0"+
    "\17\60\7\0\2\60\1\0\1\60\1\0\4\60\2\0"+
    "\1\30\4\60\1\156\2\60\2\0\1\30\10\0\1\30"+
    "\6\0\17\60\73\0\1\125\6\0\1\61\1\30\1\0"+
    "\1\30\1\0\4\61\2\0\1\30\7\61\2\0\1\30"+
    "\10\0\1\30\6\0\17\61\7\0\1\61\1\62\1\0"+
    "\1\62\1\157\2\61\1\160\1\61\2\0\1\30\7\61"+
    "\2\0\1\30\10\0\1\30\6\0\17\61\10\0\1\63"+
    "\1\0\1\63\3\0\1\161\63\0\1\61\1\162\1\0"+
    "\1\163\1\164\4\61\2\0\1\30\7\61\1\0\1\165"+
    "\1\30\10\0\1\30\6\0\17\61\10\0\1\166\1\0"+
    "\1\167\1\170\17\0\1\171\46\0\2\60\1\0\1\60"+
    "\1\0\3\60\1\172\2\0\1\30\7\60\2\0\1\30"+
    "\10\0\1\30\6\0\17\60\7\0\2\60\1\0\1\60"+
    "\1\0\4\60\2\0\1\30\6\60\1\173\2\0\1\30"+
    "\10\0\1\30\6\0\17\60\7\0\1\60\1\71\1\0"+
    "\1\71\1\72\4\60\2\0\1\30\7\60\2\0\1\30"+
    "\10\0\1\30\6\0\17\60\10\0\1\72\1\0\1\72"+
    "\67\0\2\60\1\0\1\60\1\0\1\60\1\174\2\60"+
    "\2\0\1\30\7\60\2\0\1\30\10\0\1\30\6\0"+
    "\17\60\10\0\1\175\1\0\1\167\1\72\66\0\2\60"+
    "\1\0\1\60\1\0\4\60\2\0\1\30\7\60\2\0"+
    "\1\30\10\0\1\30\6\0\1\60\1\176\15\60\6\0"+
    "\11\177\1\200\1\201\1\202\1\203\6\202\1\204\47\177"+
    "\11\205\1\206\1\207\1\210\1\211\6\207\1\212\47\205"+
    "\1\0\2\60\1\0\1\60\1\0\2\60\1\213\1\60"+
    "\2\0\1\30\7\60\2\0\1\30\10\0\1\30\6\0"+
    "\17\60\7\0\2\60\1\0\1\60\1\0\4\60\2\0"+
    "\1\30\7\60\2\0\1\30\10\0\1\30\6\0\7\60"+
    "\1\214\7\60\7\0\2\60\1\0\1\60\1\0\4\60"+
    "\2\0\1\30\4\60\1\215\2\60\2\0\1\30\10\0"+
    "\1\30\6\0\17\60\7\0\2\60\1\0\1\60\1\0"+
    "\4\60\2\0\1\30\7\60\2\0\1\30\10\0\1\30"+
    "\6\0\4\60\1\216\12\60\7\0\2\60\1\0\1\60"+
    "\1\0\4\60\2\0\1\30\7\60\2\0\1\30\10\0"+
    "\1\30\6\0\7\60\1\217\7\60\7\0\2\60\1\0"+
    "\1\60\1\0\4\60\2\0\1\30\3\60\1\220\3\60"+
    "\2\0\1\30\10\0\1\30\6\0\17\60\7\0\2\60"+
    "\1\0\1\60\1\0\4\60\2\0\1\30\2\60\1\221"+
    "\4\60\2\0\1\30\10\0\1\30\6\0\17\60\7\0"+
    "\2\60\1\0\1\60\1\0\4\60\2\0\1\30\7\60"+
    "\2\0\1\30\10\0\1\30\6\0\4\60\1\222\12\60"+
    "\7\0\2\60\1\0\1\60\1\0\4\60\2\0\1\30"+
    "\4\60\1\223\2\60\2\0\1\30\10\0\1\30\6\0"+
    "\17\60\7\0\2\60\1\0\1\60\1\0\4\60\2\0"+
    "\1\30\7\60\2\0\1\30\10\0\1\30\6\0\5\60"+
    "\1\224\11\60\7\0\2\60\1\0\1\60\1\0\4\60"+
    "\2\0\1\30\6\60\1\225\2\0\1\30\10\0\1\30"+
    "\6\0\1\226\16\60\7\0\2\60\1\0\1\60\1\0"+
    "\4\60\2\0\1\30\3\60\1\127\3\60\2\0\1\30"+
    "\10\0\1\30\6\0\17\60\7\0\2\60\1\0\1\60"+
    "\1\0\2\60\1\227\1\60\2\0\1\30\7\60\2\0"+
    "\1\30\10\0\1\30\6\0\17\60\6\0\3\122\1\0"+
    "\20\122\1\0\11\122\2\0\33\122\35\0\1\230\36\0"+
    "\2\60\1\0\1\60\1\0\4\60\2\0\1\30\2\60"+
    "\1\231\4\60\2\0\1\30\10\0\1\30\6\0\3\60"+
    "\1\232\13\60\7\0\2\60\1\0\1\60\1\0\4\60"+
    "\2\0\1\30\3\60\1\233\3\60\2\0\1\30\10\0"+
    "\1\30\6\0\17\60\7\0\2\60\1\0\1\60\1\0"+
    "\4\60\2\0\1\30\7\60\2\0\1\30\10\0\1\30"+
    "\6\0\1\234\16\60\7\0\2\60\1\0\1\60\1\0"+
    "\4\60\2\0\1\30\7\60\2\0\1\30\10\0\1\30"+
    "\6\0\1\235\16\60\7\0\2\60\1\0\1\60\1\0"+
    "\4\60\2\0\1\30\7\60\2\0\1\30\10\0\1\30"+
    "\6\0\7\60\1\236\7\60\7\0\2\60\1\0\1\60"+
    "\1\0\4\60\2\0\1\30\2\60\1\237\4\60\2\0"+
    "\1\30\10\0\1\30\6\0\17\60\7\0\2\60\1\0"+
    "\1\60\1\0\4\60\2\0\1\30\4\60\1\240\2\60"+
    "\2\0\1\30\10\0\1\30\6\0\17\60\7\0\2\60"+
    "\1\0\1\60\1\0\4\60\2\0\1\30\7\60\2\0"+
    "\1\30\10\0\1\30\6\0\11\60\1\241\5\60\7\0"+
    "\2\60\1\0\1\60\1\0\4\60\2\0\1\30\7\60"+
    "\2\0\1\30\10\0\1\30\6\0\7\60\1\242\7\60"+
    "\7\0\2\60\1\0\1\60\1\0\4\60\2\0\1\30"+
    "\7\60\2\0\1\30\10\0\1\30\6\0\13\60\1\243"+
    "\3\60\7\0\2\60\1\0\1\60\1\0\4\60\2\0"+
    "\1\30\6\60\1\244\2\0\1\30\10\0\1\30\6\0"+
    "\17\60\7\0\2\60\1\0\1\60\1\0\4\60\2\0"+
    "\1\30\2\60\1\245\4\60\2\0\1\30\10\0\1\30"+
    "\6\0\17\60\7\0\2\60\1\0\1\60\1\0\4\60"+
    "\2\0\1\30\7\60\2\0\1\30\10\0\1\30\6\0"+
    "\5\60\1\246\3\60\1\247\5\60\7\0\2\60\1\0"+
    "\1\60\1\0\4\60\2\0\1\30\7\60\2\0\1\30"+
    "\10\0\1\30\6\0\6\60\1\250\10\60\7\0\2\60"+
    "\1\0\1\60\1\0\4\60\2\0\1\30\2\60\1\251"+
    "\4\60\2\0\1\30\10\0\1\30\6\0\17\60\7\0"+
    "\2\60\1\0\1\60\1\0\4\60\2\0\1\30\7\60"+
    "\2\0\1\30\10\0\1\30\6\0\5\60\1\252\11\60"+
    "\7\0\2\60\1\0\1\60\1\0\4\60\2\0\1\30"+
    "\1\253\6\60\2\0\1\30\10\0\1\30\6\0\17\60"+
    "\7\0\2\60\1\0\1\60\1\0\4\60\2\0\1\30"+
    "\7\60\2\0\1\30\10\0\1\30\6\0\13\60\1\254"+
    "\3\60\7\0\2\60\1\0\1\60\1\0\4\60\2\0"+
    "\1\30\7\60\2\0\1\30\10\0\1\30\6\0\1\173"+
    "\16\60\7\0\2\60\1\0\1\60\1\0\4\60\2\0"+
    "\1\30\7\60\2\0\1\30\10\0\1\30\6\0\5\60"+
    "\1\255\11\60\7\0\2\60\1\0\1\60\1\0\2\60"+
    "\1\256\1\60\2\0\1\30\7\60\2\0\1\30\10\0"+
    "\1\30\6\0\5\60\1\257\11\60\7\0\2\60\1\0"+
    "\1\60\1\0\4\60\2\0\1\30\3\60\1\260\3\60"+
    "\2\0\1\30\10\0\1\30\6\0\17\60\10\0\1\157"+
    "\1\0\1\157\3\0\1\66\63\0\1\61\1\261\1\0"+
    "\1\262\1\72\4\61\2\0\1\30\7\61\1\0\1\74"+
    "\1\30\10\0\1\30\6\0\17\61\10\0\1\263\1\0"+
    "\1\264\1\265\17\0\1\266\46\0\1\30\1\262\1\0"+
    "\1\262\1\267\4\30\2\0\10\30\2\0\1\30\10\0"+
    "\1\30\6\0\17\30\7\0\1\30\1\163\1\0\1\163"+
    "\1\267\4\30\2\0\10\30\2\0\1\30\10\0\1\30"+
    "\6\0\17\30\10\0\1\267\1\0\1\267\70\0\1\270"+
    "\1\0\1\264\1\164\67\0\1\72\1\0\2\72\67\0"+
    "\1\167\1\0\1\167\1\72\67\0\1\166\1\0\1\167"+
    "\1\170\66\0\2\60\1\0\1\60\1\0\4\60\1\271"+
    "\1\272\1\30\7\60\2\0\1\30\10\0\1\30\6\0"+
    "\17\60\7\0\2\60\1\0\1\60\1\0\4\60\2\0"+
    "\1\30\3\60\1\243\3\60\2\0\1\30\10\0\1\30"+
    "\6\0\17\60\7\0\2\60\1\0\1\60\1\0\2\60"+
    "\1\273\1\60\2\0\1\30\7\60\2\0\1\30\10\0"+
    "\1\30\6\0\17\60\10\0\1\274\1\0\1\274\1\72"+
    "\66\0\2\60\1\0\1\60\1\0\2\60\1\275\1\60"+
    "\2\0\1\30\7\60\2\0\1\30\10\0\1\30\6\0"+
    "\17\60\6\0\12\177\1\101\1\177\1\276\7\177\1\101"+
    "\50\177\1\277\1\177\1\277\1\177\1\277\1\177\1\277"+
    "\1\177\1\101\1\177\1\276\2\277\5\177\1\101\21\177"+
    "\1\277\2\177\1\277\2\177\1\277\16\177\12\202\1\77"+
    "\1\202\1\300\7\202\1\101\46\202\11\76\1\301\1\302"+
    "\1\202\1\100\6\202\1\303\1\101\46\76\2\177\1\304"+
    "\1\177\1\304\1\177\1\304\1\177\1\304\1\177\1\101"+
    "\1\177\1\276\2\304\5\177\1\101\21\177\1\304\2\177"+
    "\1\304\2\177\1\304\16\177\13\205\1\101\1\305\7\205"+
    "\1\101\50\205\1\306\1\205\1\306\1\205\1\306\1\205"+
    "\1\306\2\205\1\101\1\305\2\306\5\205\1\101\21\205"+
    "\1\306\2\205\1\306\2\205\1\306\16\205\13\207\1\77"+
    "\1\307\7\207\1\101\46\207\11\102\1\310\1\207\1\311"+
    "\1\103\6\207\1\312\1\101\46\102\2\205\1\313\1\205"+
    "\1\313\1\205\1\313\1\205\1\313\2\205\1\101\1\305"+
    "\2\313\5\205\1\101\21\205\1\313\2\205\1\313\2\205"+
    "\1\313\16\205\1\0\2\60\1\0\1\60\1\0\4\60"+
    "\2\0\1\30\7\60\2\0\1\30\10\0\1\30\6\0"+
    "\1\314\16\60\7\0\2\60\1\0\1\60\1\0\4\60"+
    "\2\0\1\30\7\60\2\0\1\30\10\0\1\30\6\0"+
    "\1\315\16\60\7\0\2\60\1\0\1\60\1\0\2\60"+
    "\1\316\1\60\2\0\1\30\7\60\2\0\1\30\10\0"+
    "\1\30\6\0\17\60\7\0\2\60\1\0\1\60\1\0"+
    "\4\60\2\0\1\30\7\60\2\0\1\30\10\0\1\30"+
    "\6\0\10\60\1\127\6\60\7\0\2\60\1\0\1\60"+
    "\1\0\4\60\2\0\1\30\7\60\2\0\1\30\10\0"+
    "\1\30\6\0\1\60\1\225\15\60\7\0\2\60\1\0"+
    "\1\60\1\0\4\60\2\0\1\30\2\60\1\317\4\60"+
    "\2\0\1\30\10\0\1\30\6\0\17\60\7\0\2\60"+
    "\1\0\1\60\1\0\4\60\2\0\1\30\7\60\2\0"+
    "\1\30\10\0\1\30\6\0\1\320\16\60\7\0\2\60"+
    "\1\0\1\60\1\0\4\60\2\0\1\30\6\60\1\321"+
    "\2\0\1\30\10\0\1\30\6\0\17\60\7\0\2\60"+
    "\1\0\1\60\1\0\2\60\1\322\1\60\2\0\1\30"+
    "\7\60\2\0\1\30\10\0\1\30\6\0\17\60\7\0"+
    "\2\60\1\0\1\60\1\0\4\60\2\0\1\30\2\60"+
    "\1\323\4\60\2\0\1\30\10\0\1\30\6\0\17\60"+
    "\7\0\2\60\1\0\1\60\1\0\4\60\2\0\1\30"+
    "\7\60\2\0\1\30\10\0\1\30\6\0\14\60\1\127"+
    "\2\60\6\0\24\230\1\324\10\230\1\325\35\230\1\0"+
    "\2\60\1\0\1\60\1\0\4\60\2\0\1\30\7\60"+
    "\2\0\1\30\10\0\1\30\6\0\6\60\1\326\10\60"+
    "\7\0\2\60\1\0\1\60\1\0\4\60\2\0\1\30"+
    "\7\60\2\0\1\30\10\0\1\30\6\0\4\60\1\327"+
    "\12\60\7\0\2\60\1\0\1\60\1\0\4\60\2\0"+
    "\1\30\7\60\2\0\1\30\10\0\1\30\6\0\5\60"+
    "\1\330\11\60\7\0\2\60\1\0\1\60\1\0\4\60"+
    "\2\0\1\30\1\331\6\60\2\0\1\30\10\0\1\30"+
    "\6\0\17\60\7\0\2\60\1\0\1\60\1\0\4\60"+
    "\2\0\1\30\3\60\1\316\3\60\2\0\1\30\10\0"+
    "\1\30\6\0\17\60\7\0\2\60\1\0\1\60\1\0"+
    "\4\60\2\0\1\30\7\60\2\0\1\30\10\0\1\30"+
    "\6\0\7\60\1\332\7\60\7\0\2\60\1\0\1\60"+
    "\1\0\4\60\2\0\1\30\4\60\1\333\2\60\2\0"+
    "\1\30\10\0\1\30\6\0\1\60\1\334\15\60\7\0"+
    "\2\60\1\0\1\60\1\0\2\60\1\335\1\60\2\0"+
    "\1\30\7\60\2\0\1\30\10\0\1\30\6\0\17\60"+
    "\7\0\2\60\1\0\1\60\1\0\4\60\2\0\1\30"+
    "\7\60\2\0\1\30\10\0\1\30\6\0\4\60\1\336"+
    "\12\60\7\0\2\60\1\0\1\60\1\0\2\60\1\337"+
    "\1\60\2\0\1\30\7\60\2\0\1\30\10\0\1\30"+
    "\6\0\17\60\7\0\2\60\1\0\1\60\1\0\4\60"+
    "\2\0\1\30\7\60\2\0\1\30\10\0\1\30\6\0"+
    "\1\60\1\257\15\60\7\0\2\60\1\0\1\60\1\0"+
    "\4\60\2\0\1\30\1\340\6\60\2\0\1\30\10\0"+
    "\1\30\6\0\17\60\7\0\2\60\1\0\1\60\1\0"+
    "\4\60\2\0\1\30\7\60\2\0\1\30\10\0\1\30"+
    "\6\0\12\60\1\316\4\60\7\0\2\60\1\0\1\60"+
    "\1\0\4\60\2\0\1\30\2\60\1\341\4\60\2\0"+
    "\1\30\10\0\1\30\6\0\17\60\7\0\2\60\1\0"+
    "\1\60\1\0\4\60\2\0\1\30\7\60\2\0\1\30"+
    "\10\0\1\30\6\0\11\60\1\233\5\60\7\0\2\60"+
    "\1\0\1\60\1\0\4\60\2\0\1\30\7\60\2\0"+
    "\1\30\10\0\1\30\6\0\5\60\1\342\11\60\7\0"+
    "\2\60\1\0\1\60\1\0\4\60\2\0\1\30\6\60"+
    "\1\343\2\0\1\30\10\0\1\30\6\0\17\60\7\0"+
    "\2\60\1\0\1\60\1\0\4\60\2\0\1\30\5\60"+
    "\1\344\1\60\2\0\1\30\10\0\1\30\6\0\17\60"+
    "\7\0\2\60\1\0\1\60\1\0\4\60\2\0\1\30"+
    "\7\60\2\0\1\30\10\0\1\30\6\0\7\60\1\345"+
    "\7\60\7\0\2\60\1\0\1\60\1\0\4\60\2\0"+
    "\1\30\7\60\2\0\1\30\10\0\1\30\6\0\1\346"+
    "\16\60\7\0\2\60\1\0\1\60\1\0\4\60\2\0"+
    "\1\30\7\60\2\0\1\30\10\0\1\30\6\0\7\60"+
    "\1\347\7\60\7\0\2\60\1\0\1\60\1\0\4\60"+
    "\2\0\1\30\7\60\2\0\1\30\10\0\1\30\6\0"+
    "\2\60\1\243\14\60\7\0\2\60\1\0\1\60\1\0"+
    "\4\60\2\0\1\30\7\60\2\0\1\30\10\0\1\30"+
    "\6\0\5\60\1\350\11\60\7\0\1\30\1\351\1\0"+
    "\1\351\1\72\4\30\2\0\10\30\2\0\1\30\10\0"+
    "\1\30\6\0\17\30\7\0\1\30\1\262\1\0\1\262"+
    "\1\72\4\30\2\0\10\30\2\0\1\30\10\0\1\30"+
    "\6\0\17\30\10\0\1\72\1\0\1\72\1\267\67\0"+
    "\1\264\1\0\1\264\1\267\67\0\1\263\1\0\1\264"+
    "\1\265\67\0\1\167\1\0\1\167\1\267\65\0\2\352"+
    "\1\353\1\352\1\353\1\352\1\353\1\352\1\353\4\352"+
    "\2\353\27\352\1\353\2\352\1\353\2\352\1\353\16\352"+
    "\2\354\1\355\1\354\1\355\1\354\1\355\1\354\1\355"+
    "\4\354\2\355\27\354\1\355\2\354\1\355\2\354\1\355"+
    "\16\354\1\0\2\60\1\0\1\60\1\0\4\60\2\0"+
    "\1\30\3\60\1\257\3\60\2\0\1\30\10\0\1\30"+
    "\6\0\17\60\17\0\1\356\11\177\1\357\47\0\2\177"+
    "\1\202\1\177\1\202\1\177\1\202\1\177\1\202\1\177"+
    "\1\101\1\177\1\276\2\202\5\177\1\101\21\177\1\202"+
    "\2\177\1\202\2\177\1\202\27\177\1\200\2\202\1\360"+
    "\6\202\1\204\47\177\2\76\1\361\1\76\1\361\1\76"+
    "\1\361\1\76\1\361\1\76\1\77\1\76\1\100\2\361"+
    "\5\76\1\101\21\76\1\361\2\76\1\361\2\76\1\361"+
    "\20\76\1\362\1\76\1\362\1\76\1\362\1\76\1\362"+
    "\1\76\1\77\1\76\1\100\2\362\5\76\1\101\21\76"+
    "\1\362\2\76\1\362\2\76\1\362\16\76\2\177\1\200"+
    "\1\177\1\200\1\177\1\200\1\177\1\200\1\177\1\101"+
    "\1\177\1\276\2\200\5\177\1\101\21\177\1\200\2\177"+
    "\1\200\2\177\1\200\16\177\11\0\1\363\11\205\1\364"+
    "\47\0\2\205\1\207\1\205\1\207\1\205\1\207\1\205"+
    "\1\207\2\205\1\101\1\305\2\207\5\205\1\101\21\205"+
    "\1\207\2\205\1\207\2\205\1\207\27\205\1\206\2\207"+
    "\1\365\6\207\1\212\47\205\2\102\1\366\1\102\1\366"+
    "\1\102\1\366\1\102\1\366\2\102\1\77\1\103\2\366"+
    "\5\102\1\101\21\102\1\366\2\102\1\366\2\102\1\366"+
    "\20\102\1\367\1\102\1\367\1\102\1\367\1\102\1\367"+
    "\2\102\1\77\1\103\2\367\5\102\1\101\21\102\1\367"+
    "\2\102\1\367\2\102\1\367\16\102\2\205\1\206\1\205"+
    "\1\206\1\205\1\206\1\205\1\206\2\205\1\101\1\305"+
    "\2\206\5\205\1\101\21\205\1\206\2\205\1\206\2\205"+
    "\1\206\16\205\1\0\2\60\1\0\1\60\1\0\4\60"+
    "\2\0\1\30\7\60\2\0\1\30\10\0\1\30\6\0"+
    "\2\60\1\127\14\60\7\0\2\60\1\0\1\60\1\0"+
    "\4\60\2\0\1\30\2\60\1\370\4\60\2\0\1\30"+
    "\10\0\1\30\6\0\17\60\7\0\2\60\1\0\1\60"+
    "\1\0\2\60\1\371\1\60\2\0\1\30\7\60\2\0"+
    "\1\30\10\0\1\30\6\0\17\60\7\0\2\60\1\0"+
    "\1\60\1\0\4\60\2\0\1\30\4\60\1\316\2\60"+
    "\2\0\1\30\10\0\1\30\6\0\17\60\7\0\2\60"+
    "\1\0\1\60\1\0\4\60\2\0\1\30\3\60\1\372"+
    "\3\60\2\0\1\30\10\0\1\30\6\0\17\60\7\0"+
    "\2\60\1\0\1\60\1\0\4\60\2\0\1\30\7\60"+
    "\2\0\1\30\10\0\1\30\6\0\1\60\1\373\15\60"+
    "\6\0\24\374\1\375\3\374\1\376\3\374\1\0\1\325"+
    "\35\374\24\230\1\324\7\230\1\377\1\325\35\230\1\0"+
    "\2\60\1\0\1\60\1\0\4\60\2\0\1\30\2\60"+
    "\1\u0100\4\60\2\0\1\30\10\0\1\30\6\0\17\60"+
    "\7\0\2\60\1\0\1\60\1\0\4\60\2\0\1\30"+
    "\2\60\1\u0101\4\60\2\0\1\30\10\0\1\30\6\0"+
    "\17\60\7\0\2\60\1\0\1\60\1\0\4\60\2\0"+
    "\1\30\7\60\2\0\1\30\10\0\1\30\6\0\4\60"+
    "\1\257\12\60\7\0\2\60\1\0\1\60\1\0\4\60"+
    "\2\0\1\30\7\60\2\0\1\30\10\0\1\30\6\0"+
    "\3\60\1\u0102\13\60\7\0\2\60\1\0\1\60\1\0"+
    "\4\60\2\0\1\30\7\60\2\0\1\30\10\0\1\30"+
    "\6\0\5\60\1\u0103\11\60\7\0\2\60\1\0\1\60"+
    "\1\0\4\60\2\0\1\30\4\60\1\u0104\2\60\2\0"+
    "\1\30\10\0\1\30\6\0\17\60\7\0\2\60\1\0"+
    "\1\60\1\0\4\60\2\0\1\30\3\60\1\u0105\3\60"+
    "\2\0\1\30\10\0\1\30\6\0\17\60\7\0\2\60"+
    "\1\0\1\60\1\0\4\60\2\0\1\30\3\60\1\u0106"+
    "\3\60\2\0\1\30\10\0\1\30\6\0\17\60\7\0"+
    "\2\60\1\0\1\60\1\0\4\60\2\0\1\30\4\60"+
    "\1\u0107\2\60\2\0\1\30\10\0\1\30\6\0\12\60"+
    "\1\u0108\4\60\7\0\2\60\1\0\1\60\1\0\4\60"+
    "\2\0\1\30\7\60\2\0\1\30\10\0\1\30\6\0"+
    "\7\60\1\215\7\60\7\0\2\60\1\0\1\60\1\0"+
    "\4\60\2\0\1\30\1\60\1\u0109\5\60\2\0\1\30"+
    "\10\0\1\30\6\0\17\60\7\0\2\60\1\0\1\60"+
    "\1\0\4\60\2\0\1\30\4\60\1\u010a\2\60\2\0"+
    "\1\30\10\0\1\30\6\0\17\60\7\0\2\60\1\0"+
    "\1\60\1\0\4\60\2\0\1\30\7\60\2\0\1\30"+
    "\10\0\1\30\6\0\1\u010b\16\60\7\0\2\60\1\0"+
    "\1\60\1\0\4\60\2\0\1\30\7\60\2\0\1\30"+
    "\10\0\1\30\6\0\5\60\1\u010c\11\60\7\0\2\60"+
    "\1\0\1\60\1\0\4\60\2\0\1\30\1\u010d\6\60"+
    "\2\0\1\30\10\0\1\30\6\0\17\60\7\0\2\60"+
    "\1\0\1\60\1\0\2\60\1\u010e\1\60\2\0\1\30"+
    "\7\60\2\0\1\30\10\0\1\30\6\0\17\60\7\0"+
    "\2\60\1\0\1\60\1\0\4\60\2\0\1\30\2\60"+
    "\1\u010f\4\60\2\0\1\30\10\0\1\30\6\0\17\60"+
    "\6\0\2\352\1\u0110\1\352\1\u0110\1\352\1\u0110\1\352"+
    "\1\u0110\1\352\1\u0111\2\352\2\u0110\27\352\1\u0110\2\352"+
    "\1\u0110\2\352\1\u0110\20\352\1\353\1\352\1\353\1\352"+
    "\1\353\1\352\1\353\1\352\1\u0112\2\352\2\353\27\352"+
    "\1\353\2\352\1\353\2\352\1\353\16\352\2\354\1\u0113"+
    "\1\354\1\u0113\1\354\1\u0113\1\354\1\u0113\2\354\1\u0114"+
    "\1\354\2\u0113\27\354\1\u0113\2\354\1\u0113\2\354\1\u0113"+
    "\20\354\1\355\1\354\1\355\1\354\1\355\1\354\1\355"+
    "\2\354\1\u0115\1\354\2\355\27\354\1\355\2\354\1\355"+
    "\2\354\1\355\16\354\2\0\1\u0116\1\0\1\u0116\1\0"+
    "\1\u0116\1\0\1\u0116\4\0\2\u0116\27\0\1\u0116\2\0"+
    "\1\u0116\2\0\1\u0116\20\0\1\u0117\1\0\1\u0117\1\0"+
    "\1\u0117\1\0\1\u0117\4\0\2\u0117\27\0\1\u0117\2\0"+
    "\1\u0117\2\0\1\u0117\16\0\12\202\1\302\1\202\1\300"+
    "\7\202\1\101\46\202\2\76\1\202\1\76\1\202\1\76"+
    "\1\202\1\76\1\202\1\76\1\77\1\76\1\100\2\202"+
    "\5\76\1\101\21\76\1\202\2\76\1\202\2\76\1\202"+
    "\20\76\1\301\1\76\1\301\1\76\1\301\1\76\1\301"+
    "\1\76\1\77\1\76\1\100\2\301\5\76\1\101\21\76"+
    "\1\301\2\76\1\301\2\76\1\301\16\76\2\0\1\u0118"+
    "\1\0\1\u0118\1\0\1\u0118\1\0\1\u0118\4\0\2\u0118"+
    "\27\0\1\u0118\2\0\1\u0118\2\0\1\u0118\20\0\1\u0119"+
    "\1\0\1\u0119\1\0\1\u0119\1\0\1\u0119\4\0\2\u0119"+
    "\27\0\1\u0119\2\0\1\u0119\2\0\1\u0119\16\0\13\207"+
    "\1\311\1\307\7\207\1\101\46\207\2\102\1\207\1\102"+
    "\1\207\1\102\1\207\1\102\1\207\2\102\1\77\1\103"+
    "\2\207\5\102\1\101\21\102\1\207\2\102\1\207\2\102"+
    "\1\207\20\102\1\310\1\102\1\310\1\102\1\310\1\102"+
    "\1\310\2\102\1\77\1\103\2\310\5\102\1\101\21\102"+
    "\1\310\2\102\1\310\2\102\1\310\16\102\1\0\2\60"+
    "\1\0\1\60\1\0\4\60\2\0\1\30\7\60\2\0"+
    "\1\30\10\0\1\30\6\0\3\60\1\u011a\13\60\7\0"+
    "\2\60\1\0\1\60\1\0\4\60\2\0\1\30\7\60"+
    "\2\0\1\30\10\0\1\30\6\0\13\60\1\257\3\60"+
    "\7\0\2\60\1\0\1\60\1\0\4\60\2\0\1\30"+
    "\2\60\1\224\4\60\2\0\1\30\10\0\1\30\6\0"+
    "\17\60\7\0\2\60\1\0\1\60\1\0\4\60\2\0"+
    "\1\30\1\60\1\u011b\5\60\2\0\1\30\10\0\1\30"+
    "\6\0\17\60\6\0\3\374\1\u011c\20\374\1\375\10\374"+
    "\1\375\2\u011c\36\374\1\u011c\20\374\1\375\7\374\1\u011d"+
    "\1\375\2\u011c\57\374\1\375\3\374\1\376\3\374\1\u011c"+
    "\1\325\35\374\1\0\2\60\1\0\1\60\1\0\4\60"+
    "\2\0\1\30\7\60\2\0\1\30\10\0\1\30\6\0"+
    "\6\60\1\243\10\60\7\0\2\60\1\0\1\60\1\0"+
    "\4\60\2\0\1\30\7\60\2\0\1\30\10\0\1\30"+
    "\6\0\12\60\1\127\4\60\7\0\2\60\1\0\1\60"+
    "\1\0\4\60\2\0\1\30\7\60\2\0\1\30\10\0"+
    "\1\30\6\0\4\60\1\u011e\12\60\7\0\2\60\1\0"+
    "\1\60\1\0\4\60\2\0\1\30\2\60\1\u011f\4\60"+
    "\2\0\1\30\10\0\1\30\6\0\17\60\7\0\2\60"+
    "\1\0\1\60\1\0\4\60\2\0\1\30\3\60\1\u0120"+
    "\3\60\2\0\1\30\10\0\1\30\6\0\17\60\7\0"+
    "\2\60\1\0\1\60\1\0\4\60\2\0\1\30\2\60"+
    "\1\u0121\4\60\2\0\1\30\10\0\1\30\6\0\17\60"+
    "\7\0\2\60\1\0\1\60\1\0\4\60\2\0\1\30"+
    "\4\60\1\127\2\60\2\0\1\30\10\0\1\30\6\0"+
    "\17\60\7\0\2\60\1\0\1\60\1\0\2\60\1\127"+
    "\1\60\2\0\1\30\7\60\2\0\1\30\10\0\1\30"+
    "\6\0\17\60\7\0\2\60\1\0\1\60\1\0\4\60"+
    "\2\0\1\30\7\60\2\0\1\30\10\0\1\30\6\0"+
    "\1\u0122\16\60\7\0\2\60\1\0\1\60\1\0\4\60"+
    "\2\0\1\30\7\60\2\0\1\30\10\0\1\30\6\0"+
    "\5\60\1\u0123\11\60\7\0\2\60\1\0\1\60\1\0"+
    "\2\60\1\243\1\60\2\0\1\30\7\60\2\0\1\30"+
    "\10\0\1\30\6\0\17\60\7\0\2\60\1\0\1\60"+
    "\1\0\4\60\2\0\1\30\4\60\1\u0107\2\60\2\0"+
    "\1\30\10\0\1\30\6\0\17\60\7\0\2\60\1\0"+
    "\1\60\1\0\4\60\2\0\1\30\7\60\2\0\1\30"+
    "\10\0\1\30\6\0\3\60\1\127\13\60\7\0\2\60"+
    "\1\0\1\60\1\0\4\60\2\0\1\30\7\60\2\0"+
    "\1\30\10\0\1\30\6\0\7\60\1\u0107\7\60\7\0"+
    "\2\60\1\0\1\60\1\0\4\60\2\0\1\30\7\60"+
    "\2\0\1\30\10\0\1\30\6\0\12\60\1\u0124\4\60"+
    "\10\0\1\u0110\1\0\1\u0110\1\0\1\u0110\1\0\1\u0110"+
    "\1\0\1\u0125\2\0\2\u0110\27\0\1\u0110\2\0\1\u0110"+
    "\2\0\1\u0110\20\0\1\u0113\1\0\1\u0113\1\0\1\u0113"+
    "\1\0\1\u0113\2\0\1\u0125\1\0\2\u0113\27\0\1\u0113"+
    "\2\0\1\u0113\2\0\1\u0113\20\0\1\177\1\0\1\177"+
    "\1\0\1\177\1\0\1\177\4\0\2\177\27\0\1\177"+
    "\2\0\1\177\2\0\1\177\20\0\1\356\1\0\1\356"+
    "\1\0\1\356\1\0\1\356\4\0\2\356\27\0\1\356"+
    "\2\0\1\356\2\0\1\356\20\0\1\205\1\0\1\205"+
    "\1\0\1\205\1\0\1\205\4\0\2\205\27\0\1\205"+
    "\2\0\1\205\2\0\1\205\20\0\1\363\1\0\1\363"+
    "\1\0\1\363\1\0\1\363\4\0\2\363\27\0\1\363"+
    "\2\0\1\363\2\0\1\363\17\0\2\60\1\0\1\60"+
    "\1\0\2\60\1\326\1\60\2\0\1\30\7\60\2\0"+
    "\1\30\10\0\1\30\6\0\17\60\7\0\2\60\1\0"+
    "\1\60\1\0\2\60\1\u0126\1\60\2\0\1\30\7\60"+
    "\2\0\1\30\10\0\1\30\6\0\17\60\6\0\24\u011c"+
    "\1\u0127\10\u011c\1\u0128\35\u011c\3\u011d\1\0\32\u011d\2\0"+
    "\33\u011d\1\0\2\60\1\0\1\60\1\0\4\60\2\0"+
    "\1\30\7\60\2\0\1\30\10\0\1\30\6\0\6\60"+
    "\1\u011a\10\60\7\0\2\60\1\0\1\60\1\0\4\60"+
    "\2\0\1\30\6\60\1\u0107\2\0\1\30\10\0\1\30"+
    "\6\0\17\60\7\0\2\60\1\0\1\60\1\0\4\60"+
    "\2\0\1\30\6\60\1\u0129\2\0\1\30\10\0\1\30"+
    "\6\0\17\60\7\0\2\60\1\0\1\60\1\0\4\60"+
    "\2\0\1\30\7\60\2\0\1\30\10\0\1\30\6\0"+
    "\1\u012a\16\60\7\0\2\60\1\0\1\60\1\0\4\60"+
    "\2\0\1\30\4\60\1\u012b\2\60\2\0\1\30\10\0"+
    "\1\30\6\0\17\60\7\0\2\60\1\0\1\60\1\0"+
    "\2\60\1\117\1\60\2\0\1\30\7\60\2\0\1\30"+
    "\10\0\1\30\6\0\17\60\7\0\2\60\1\0\1\60"+
    "\1\0\4\60\2\0\1\30\3\60\1\326\3\60\2\0"+
    "\1\30\10\0\1\30\6\0\17\60\6\0\24\u011c\1\u0127"+
    "\3\u011c\1\u012c\3\u011c\1\0\1\u0128\61\u011c\1\u0127\7\u011c"+
    "\1\0\1\u0128\35\u011c\1\0\2\60\1\0\1\60\1\0"+
    "\4\60\2\0\1\30\7\60\2\0\1\30\10\0\1\30"+
    "\6\0\3\60\1\u012d\13\60\7\0\2\60\1\0\1\60"+
    "\1\0\4\60\2\0\1\30\7\60\2\0\1\30\10\0"+
    "\1\30\6\0\7\60\1\127\7\60\7\0\2\60\1\0"+
    "\1\60\1\0\2\60\1\u012e\1\60\2\0\1\30\7\60"+
    "\2\0\1\30\10\0\1\30\6\0\17\60\6\0\24\u011c"+
    "\1\u0127\3\u011c\1\u012c\4\u011c\1\u0128\35\u011c\1\0\2\60"+
    "\1\0\1\60\1\0\4\60\2\0\1\30\4\60\1\u012f"+
    "\2\60\2\0\1\30\10\0\1\30\6\0\17\60\7\0"+
    "\2\60\1\0\1\60\1\0\4\60\2\0\1\30\7\60"+
    "\2\0\1\30\10\0\1\30\6\0\3\60\1\u0130\13\60"+
    "\7\0\2\60\1\0\1\60\1\0\4\60\2\0\1\30"+
    "\7\60\2\0\1\30\10\0\1\30\6\0\4\60\1\117"+
    "\12\60\7\0\2\60\1\0\1\60\1\0\4\60\2\0"+
    "\1\30\7\60\2\0\1\30\10\0\1\30\6\0\1\u0131"+
    "\16\60\7\0\2\60\1\0\1\60\1\0\4\60\2\0"+
    "\1\30\7\60\2\0\1\30\10\0\1\30\6\0\7\60"+
    "\1\u0132\7\60\7\0\2\60\1\0\1\60\1\0\4\60"+
    "\2\0\1\30\7\60\2\0\1\30\10\0\1\30\6\0"+
    "\7\60\1\326\7\60\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15222];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\20\1\3\11\7\1\2\11\17\1\2\11"+
    "\14\1\1\0\1\1\1\0\1\11\1\1\1\11\1\0"+
    "\16\1\1\11\1\1\1\0\3\11\41\1\1\0\12\1"+
    "\1\0\5\1\1\0\53\1\1\0\3\1\2\0\1\1"+
    "\1\0\1\1\1\0\2\1\1\0\1\1\1\0\1\1"+
    "\1\0\2\1\1\0\1\1\1\0\37\1\6\0\1\1"+
    "\4\0\1\1\2\0\7\1\1\11\20\1\1\0\2\1"+
    "\1\0\2\1\4\0\2\1\1\0\10\1\1\11\15\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[306];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 202) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return new Symbol(sym.ERROR_CEROS_A_LA_IZQUIERDA, yychar, yyline, yytext());
            }
          case 44: break;
          case 2: 
            { return new Symbol(sym.ERROR, yychar, yyline, yytext());
            }
          case 45: break;
          case 3: 
            { /*Ignore*/
            }
          case 46: break;
          case 4: 
            { return new Symbol(sym.Comillas, yychar, yyline, yytext());
            }
          case 47: break;
          case 5: 
            { return new Symbol(sym.Resta, yychar, yyline, yytext());
            }
          case 48: break;
          case 6: 
            { return new Symbol(sym.P_coma, yychar, yyline, yytext());
            }
          case 49: break;
          case 7: 
            { return new Symbol(sym.Parentesis_c, yychar, yyline, yytext());
            }
          case 50: break;
          case 8: 
            { return new Symbol(sym.Llave_c, yychar, yyline, yytext());
            }
          case 51: break;
          case 9: 
            { return new Symbol(sym.Division, yychar, yyline, yytext());
            }
          case 52: break;
          case 10: 
            { return new Symbol(sym.Multiplicacion, yychar, yyline, yytext());
            }
          case 53: break;
          case 11: 
            { return new Symbol(sym.ERROR_CARACTERES_NO_VALIDOS, yychar, yyline, yytext());
            }
          case 54: break;
          case 12: 
            { return new Symbol(sym.Op_relacional, yychar, yyline, yytext());
            }
          case 55: break;
          case 13: 
            { return new Symbol(sym.Corchete_a, yychar, yyline, yytext());
            }
          case 56: break;
          case 14: 
            { return new Symbol(sym.Corchete_c, yychar, yyline, yytext());
            }
          case 57: break;
          case 15: 
            { return new Symbol(sym.Igual, yychar, yyline, yytext());
            }
          case 58: break;
          case 16: 
            { return new Symbol(sym.Suma, yychar, yyline, yytext());
            }
          case 59: break;
          case 17: 
            { return new Symbol(sym.Parentesis_a, yychar, yyline, yytext());
            }
          case 60: break;
          case 18: 
            { return new Symbol(sym.Llave_a, yychar, yyline, yytext());
            }
          case 61: break;
          case 19: 
            { return new Symbol(sym.Identificador, yychar, yyline, yytext());
            }
          case 62: break;
          case 20: 
            { return new Symbol(sym.ERROR_IDENTIFICADOR, yychar, yyline, yytext());
            }
          case 63: break;
          case 21: 
            { return new Symbol(sym.Numero, yychar, yyline, yytext());
            }
          case 64: break;
          case 22: 
            { return new Symbol(sym.ERROR_NOTACION_CIENTIFICA, yychar, yyline, yytext());
            }
          case 65: break;
          case 23: 
            { return new Symbol(sym.STRING, yychar, yyline, yytext());
            }
          case 66: break;
          case 24: 
            { return new Symbol(sym.ERROR_STRING, yychar, yyline, yytext());
            }
          case 67: break;
          case 25: 
            { return new Symbol(sym.Op_atribucion, yychar, yyline, yytext());
            }
          case 68: break;
          case 26: 
            { return new Symbol(sym.OPERADOR, yychar, yyline, yytext());
            }
          case 69: break;
          case 27: 
            { return new Symbol(sym.Op_logico, yychar, yyline, yytext());
            }
          case 70: break;
          case 28: 
            { return new Symbol(sym.PALABRA_RESERVADA, yychar, yyline, yytext());
            }
          case 71: break;
          case 29: 
            { return new Symbol(sym.If, yychar, yyline, yytext());
            }
          case 72: break;
          case 30: 
            { return new Symbol(sym.Do, yychar, yyline, yytext());
            }
          case 73: break;
          case 31: 
            { return new Symbol(sym.For, yychar, yyline, yytext());
            }
          case 74: break;
          case 32: 
            { return new Symbol(sym.ERROR_COMENTARIO, yychar, yyline, yytext());
            }
          case 75: break;
          case 33: 
            { return new Symbol(sym.Int, yychar, yyline, yytext());
            }
          case 76: break;
          case 34: 
            { return new Symbol(sym.UNIDAD, yychar, yyline, yytext());
            }
          case 77: break;
          case 35: 
            { return new Symbol(sym.Else, yychar, yyline, yytext());
            }
          case 78: break;
          case 36: 
            { return new Symbol(sym.T_dato, yychar, yyline, yytext());
            }
          case 79: break;
          case 37: 
            { return new Symbol(sym.Op_booleano, yychar, yyline, yytext());
            }
          case 80: break;
          case 38: 
            { return new Symbol(sym.TRANSAC, yychar, yyline, yytext());
            }
          case 81: break;
          case 39: 
            { return new Symbol(sym.Main, yychar, yyline, yytext());
            }
          case 82: break;
          case 40: 
            { /* ignore */
            }
          case 83: break;
          case 41: 
            { return new Symbol(sym.While, yychar, yyline, yytext());
            }
          case 84: break;
          case 42: 
            { return new Symbol(sym.ERROR_HEXADECIMAL, yychar, yyline, yytext());
            }
          case 85: break;
          case 43: 
            { return new Symbol(sym.Cadena, yychar, yyline, yytext());
            }
          case 86: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
