/* The following code was generated by JFlex 1.6.1 */

package lexico;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/lexico/lexerCup.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\26\1\23\1\35\1\35\1\34\22\0\1\26\1\76\1\11"+
    "\2\25\1\77\1\41\1\12\1\100\1\30\1\33\1\77\1\72\1\24"+
    "\1\4\1\32\1\2\1\64\1\67\1\66\1\70\1\71\1\65\1\3"+
    "\1\63\1\3\1\73\1\27\1\37\1\75\1\40\1\31\1\25\6\5"+
    "\14\1\1\74\7\1\1\43\1\13\1\44\1\0\2\25\1\45\1\14"+
    "\1\50\1\53\1\7\1\15\1\57\1\6\1\52\1\1\1\47\1\54"+
    "\1\55\1\16\1\51\1\56\1\1\1\17\1\46\1\20\1\22\1\21"+
    "\1\61\1\10\1\60\1\62\1\101\1\42\1\102\1\0\6\25\1\36"+
    "\u1e6e\25\u0134\0\1\35\1\35\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\7\2\1\3\10\2\1\4\1\5\1\6\1\7"+
    "\1\10\2\5\1\11\2\12\2\2\1\13\1\14\11\2"+
    "\1\15\1\16\1\2\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\1\1\26\1\27\1\26\1\1\3\24"+
    "\1\1\2\24\1\0\1\24\1\0\1\30\2\31\1\0"+
    "\1\31\20\24\1\32\1\4\1\0\1\33\1\12\1\20"+
    "\1\34\7\24\1\35\4\24\1\36\12\24\1\1\1\25"+
    "\1\27\2\26\1\1\1\27\2\1\1\0\1\1\1\34"+
    "\3\24\1\1\1\24\4\31\1\0\5\31\1\0\1\31"+
    "\7\24\1\37\10\24\1\40\10\24\1\41\15\24\1\42"+
    "\1\24\2\1\2\26\1\0\2\27\1\26\2\0\1\43"+
    "\1\24\1\0\1\44\1\0\2\31\1\0\1\30\1\0"+
    "\1\31\1\0\2\31\1\0\1\30\1\0\1\31\2\24"+
    "\2\41\3\24\1\45\2\24\1\41\2\40\1\24\1\46"+
    "\5\24\1\46\11\24\1\47\11\24\1\11\6\0\1\31"+
    "\4\0\1\31\2\0\6\24\3\40\26\24\1\50\1\24"+
    "\1\0\1\51\1\26\1\0\1\51\1\26\4\0\2\24"+
    "\1\52\1\24\1\0\1\40\1\24\1\53\11\24\1\54"+
    "\1\24\1\55\1\24\1\56\1\51\2\24\2\40\5\24"+
    "\1\57\1\60\1\40\1\61\1\62\6\24";

  private static int [] zzUnpackAction() {
    int [] result = new int[354];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa\0\u03ed"+
    "\0\u0430\0\103\0\u0473\0\103\0\103\0\103\0\u04b6\0\u04f9"+
    "\0\u029e\0\u053c\0\u057f\0\u05c2\0\u0605\0\103\0\103\0\u0648"+
    "\0\u068b\0\u06ce\0\u0711\0\u0754\0\u0797\0\u07da\0\u081d\0\u0860"+
    "\0\103\0\103\0\u08a3\0\u08e6\0\u08e6\0\103\0\103\0\103"+
    "\0\206\0\u0929\0\u096c\0\u09af\0\u09f2\0\u010c\0\u0a35\0\u0a78"+
    "\0\u0abb\0\u0afe\0\u0b41\0\u0b84\0\u0bc7\0\u0c0a\0\u0c4d\0\u0218"+
    "\0\103\0\u0c90\0\103\0\u025b\0\u0cd3\0\u0d16\0\u0d59\0\u0d9c"+
    "\0\u0ddf\0\u0e22\0\u0e65\0\u0ea8\0\u0eeb\0\u0f2e\0\u0f71\0\u0fb4"+
    "\0\u0ff7\0\u103a\0\u107d\0\u10c0\0\u1103\0\103\0\u1146\0\u1189"+
    "\0\103\0\103\0\103\0\206\0\u11cc\0\u120f\0\u1252\0\u1295"+
    "\0\u12d8\0\u131b\0\u135e\0\206\0\u13a1\0\u13e4\0\u1427\0\u146a"+
    "\0\206\0\u14ad\0\u14f0\0\u1533\0\u1576\0\u15b9\0\u15fc\0\u163f"+
    "\0\u1682\0\u16c5\0\u1708\0\u174b\0\u178e\0\u17d1\0\u1814\0\u1857"+
    "\0\u189a\0\u18dd\0\u1920\0\u1963\0\u0b41\0\u19a6\0\u19e9\0\u1a2c"+
    "\0\u1a6f\0\u1ab2\0\u1af5\0\u1b38\0\u1b7b\0\u1bbe\0\u0218\0\u1c01"+
    "\0\u1c44\0\u1c87\0\u1cca\0\u1d0d\0\u1d50\0\u025b\0\u1d93\0\u1dd6"+
    "\0\u1e19\0\u1e5c\0\u1e9f\0\u1ee2\0\u1f25\0\u1f68\0\u1fab\0\206"+
    "\0\u1fee\0\u2031\0\u2074\0\u20b7\0\u20fa\0\u213d\0\u2180\0\u21c3"+
    "\0\u2206\0\u2249\0\u228c\0\u22cf\0\u2312\0\u2355\0\u2398\0\u23db"+
    "\0\u241e\0\u2461\0\u24a4\0\u24e7\0\u252a\0\u256d\0\u25b0\0\u25f3"+
    "\0\u2636\0\u2679\0\u26bc\0\u26ff\0\u2742\0\u2785\0\u27c8\0\206"+
    "\0\u280b\0\u284e\0\u2891\0\u28d4\0\u2917\0\u189a\0\u295a\0\u189a"+
    "\0\u299d\0\u29e0\0\u2a23\0\206\0\u2a66\0\u1af5\0\206\0\u2aa9"+
    "\0\u2aec\0\u2b2f\0\u2b72\0\u1b7b\0\u2bb5\0\u2bf8\0\u2c3b\0\u2c7e"+
    "\0\u2cc1\0\u2d04\0\u1cca\0\u2d47\0\u2d8a\0\u2dcd\0\u2e10\0\206"+
    "\0\u2e53\0\u2e96\0\u2ed9\0\u2f1c\0\206\0\u2f5f\0\u2fa2\0\u2fe5"+
    "\0\u3028\0\u306b\0\u30ae\0\206\0\u30f1\0\u3134\0\u3177\0\u31ba"+
    "\0\u31fd\0\u3240\0\u3283\0\u32c6\0\u3309\0\u334c\0\u338f\0\u33d2"+
    "\0\u3415\0\u3458\0\u349b\0\206\0\u34de\0\u3521\0\u3564\0\u35a7"+
    "\0\u35ea\0\u362d\0\u3670\0\u36b3\0\u36f6\0\u284e\0\u3739\0\u377c"+
    "\0\u37bf\0\u3802\0\u3845\0\u3888\0\u38cb\0\u390e\0\u3951\0\u3994"+
    "\0\u39d7\0\u3a1a\0\u3a5d\0\u3aa0\0\u3ae3\0\u3b26\0\u3b69\0\u3bac"+
    "\0\u3bef\0\u3c32\0\u3c75\0\u3cb8\0\u3cfb\0\u3d3e\0\u3d81\0\u3dc4"+
    "\0\u3e07\0\u3e4a\0\u3e8d\0\u3ed0\0\u3f13\0\u3f56\0\u3f99\0\u3fdc"+
    "\0\u401f\0\u4062\0\u40a5\0\u40e8\0\u412b\0\u416e\0\u41b1\0\u41f4"+
    "\0\u4237\0\u427a\0\u42bd\0\206\0\u4300\0\u4343\0\u3739\0\u3739"+
    "\0\u4386\0\u37bf\0\u37bf\0\u43c9\0\u440c\0\u444f\0\u4492\0\u44d5"+
    "\0\u4518\0\u2074\0\u455b\0\u459e\0\u45e1\0\u4624\0\206\0\u4667"+
    "\0\u46aa\0\u46ed\0\u4730\0\u4773\0\u47b6\0\u47f9\0\u483c\0\u487f"+
    "\0\206\0\u48c2\0\206\0\u4905\0\206\0\103\0\u4948\0\u498b"+
    "\0\u49ce\0\u4a11\0\u4a54\0\u4a97\0\u4ada\0\u4b1d\0\u4b60\0\206"+
    "\0\206\0\u4ba3\0\206\0\206\0\u4be6\0\u4c29\0\u4c6c\0\u4caf"+
    "\0\u4cf2\0\u4d35";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[354];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\3\1\7\1\10"+
    "\1\3\1\11\1\12\1\13\1\14\1\15\1\3\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\13\1\22\1\24"+
    "\1\25\1\26\1\27\1\30\1\22\1\0\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\3"+
    "\1\42\1\3\1\43\1\44\1\3\1\45\1\46\1\3"+
    "\1\47\1\50\1\3\7\5\1\51\1\52\1\53\1\54"+
    "\1\55\1\23\1\56\1\57\1\60\104\0\3\61\1\0"+
    "\4\61\2\0\1\31\7\61\2\0\1\31\10\0\1\31"+
    "\6\0\25\61\2\0\1\61\7\0\1\62\2\63\1\64"+
    "\2\62\1\65\1\62\2\0\1\31\7\62\2\0\1\31"+
    "\10\0\1\31\6\0\16\62\7\63\2\0\1\62\7\0"+
    "\1\62\2\66\1\64\2\62\1\65\1\62\2\0\1\31"+
    "\7\62\2\0\1\31\10\0\1\31\6\0\16\62\7\66"+
    "\2\0\1\62\10\0\2\64\3\0\1\67\53\0\7\64"+
    "\12\0\3\61\1\0\2\61\1\70\1\61\2\0\1\31"+
    "\7\61\2\0\1\31\10\0\1\31\6\0\4\61\1\71"+
    "\20\61\2\0\1\61\7\0\1\61\2\72\1\73\4\61"+
    "\2\0\1\31\2\61\1\74\1\61\1\75\2\61\1\0"+
    "\1\76\1\31\10\0\1\31\6\0\7\61\1\77\6\61"+
    "\7\72\2\0\1\61\6\0\11\100\1\101\1\100\1\102"+
    "\7\100\1\103\57\100\12\104\1\101\1\105\7\104\1\103"+
    "\57\104\1\0\3\31\1\0\4\31\2\0\10\31\2\0"+
    "\1\31\10\0\1\31\6\0\25\31\2\0\1\31\7\0"+
    "\3\61\1\0\4\61\2\0\1\31\3\61\1\106\3\61"+
    "\2\0\1\31\10\0\1\31\6\0\1\107\3\61\1\110"+
    "\6\61\1\111\11\61\2\0\1\61\7\0\3\61\1\0"+
    "\4\61\2\0\1\31\3\61\1\112\2\61\1\113\2\0"+
    "\1\31\10\0\1\31\6\0\1\114\3\61\1\115\1\116"+
    "\17\61\2\0\1\61\7\0\3\61\1\0\2\61\1\117"+
    "\1\61\2\0\1\31\7\61\2\0\1\31\10\0\1\31"+
    "\6\0\25\61\2\0\1\61\7\0\3\61\1\0\1\61"+
    "\1\120\2\61\2\0\1\31\3\61\1\121\3\61\2\0"+
    "\1\31\10\0\1\31\6\0\25\61\2\0\1\61\7\0"+
    "\3\61\1\0\4\61\2\0\1\31\7\61\2\0\1\31"+
    "\10\0\1\31\6\0\1\122\4\61\1\123\17\61\2\0"+
    "\1\61\7\0\3\61\1\0\4\61\2\0\1\31\1\61"+
    "\1\124\5\61\2\0\1\31\10\0\1\31\6\0\5\61"+
    "\1\125\17\61\2\0\1\61\103\0\1\126\37\0\1\127"+
    "\1\130\41\0\1\126\40\0\1\131\41\0\1\126\44\0"+
    "\1\132\35\0\1\132\45\0\1\132\34\0\1\132\46\0"+
    "\1\133\103\0\1\133\41\0\3\61\1\0\4\61\2\0"+
    "\1\31\7\61\2\0\1\31\10\0\1\31\6\0\1\61"+
    "\1\134\4\61\1\135\16\61\2\0\1\61\7\0\3\61"+
    "\1\0\2\61\1\136\1\61\2\0\1\31\4\61\1\137"+
    "\2\61\2\0\1\31\10\0\1\31\6\0\4\61\1\140"+
    "\10\61\1\141\7\61\2\0\1\61\7\0\3\61\1\0"+
    "\4\61\2\0\1\31\7\61\2\0\1\31\10\0\1\31"+
    "\6\0\1\142\3\61\1\143\20\61\2\0\1\61\7\0"+
    "\3\61\1\0\4\61\2\0\1\31\1\61\1\144\1\145"+
    "\4\61\2\0\1\31\10\0\1\31\6\0\10\61\1\146"+
    "\14\61\2\0\1\61\7\0\3\61\1\0\2\61\1\147"+
    "\1\61\2\0\1\31\7\61\2\0\1\31\10\0\1\31"+
    "\6\0\1\150\3\61\1\151\20\61\2\0\1\61\7\0"+
    "\3\61\1\0\4\61\2\0\1\31\7\61\2\0\1\31"+
    "\10\0\1\31\6\0\1\152\3\61\1\153\1\154\17\61"+
    "\2\0\1\61\7\0\3\61\1\0\4\61\2\0\1\31"+
    "\3\61\1\155\2\61\1\156\2\0\1\31\10\0\1\31"+
    "\6\0\1\157\24\61\2\0\1\61\7\0\3\61\1\0"+
    "\2\61\1\160\1\61\2\0\1\31\7\61\2\0\1\31"+
    "\10\0\1\31\6\0\25\61\2\0\1\61\7\0\3\61"+
    "\1\0\1\61\1\161\1\162\1\61\2\0\1\31\7\61"+
    "\2\0\1\31\10\0\1\31\6\0\25\61\2\0\1\61"+
    "\7\0\3\61\1\0\4\61\2\0\1\31\4\61\1\163"+
    "\2\61\2\0\1\31\10\0\1\31\6\0\25\61\2\0"+
    "\1\61\103\0\1\132\6\0\1\62\2\31\1\0\4\62"+
    "\2\0\1\31\7\62\2\0\1\31\10\0\1\31\6\0"+
    "\16\62\7\31\2\0\1\62\7\0\1\62\2\63\1\164"+
    "\2\62\1\165\1\62\2\0\1\31\7\62\2\0\1\31"+
    "\10\0\1\31\6\0\16\62\7\63\2\0\1\62\10\0"+
    "\2\64\3\0\1\166\53\0\7\64\12\0\1\62\1\167"+
    "\1\170\1\171\4\62\2\0\1\31\7\62\1\0\1\172"+
    "\1\31\10\0\1\31\6\0\16\62\7\170\2\0\1\62"+
    "\10\0\1\173\1\174\1\175\17\0\1\176\36\0\7\174"+
    "\12\0\3\61\1\0\3\61\1\177\2\0\1\31\7\61"+
    "\2\0\1\31\10\0\1\31\6\0\25\61\2\0\1\61"+
    "\7\0\3\61\1\0\4\61\2\0\1\31\6\61\1\200"+
    "\2\0\1\31\10\0\1\31\6\0\25\61\2\0\1\61"+
    "\7\0\1\61\2\72\1\73\4\61\2\0\1\31\7\61"+
    "\2\0\1\31\10\0\1\31\6\0\16\61\7\72\2\0"+
    "\1\61\10\0\2\73\57\0\7\73\12\0\3\61\1\0"+
    "\4\61\2\0\1\31\6\61\1\201\2\0\1\31\10\0"+
    "\1\31\6\0\25\61\2\0\1\61\7\0\3\61\1\0"+
    "\1\61\1\202\2\61\2\0\1\31\7\61\2\0\1\31"+
    "\10\0\1\31\6\0\25\61\2\0\1\61\10\0\1\203"+
    "\1\174\1\73\56\0\7\174\12\0\3\61\1\0\4\61"+
    "\2\0\1\31\7\61\2\0\1\31\10\0\1\31\6\0"+
    "\1\61\1\204\23\61\2\0\1\61\6\0\10\205\1\206"+
    "\1\207\1\210\1\211\6\210\1\212\60\205\10\213\1\214"+
    "\1\215\1\216\1\217\6\215\1\220\60\213\1\0\3\61"+
    "\1\0\2\61\1\221\1\61\2\0\1\31\7\61\2\0"+
    "\1\31\10\0\1\31\6\0\25\61\2\0\1\61\7\0"+
    "\3\61\1\0\4\61\2\0\1\31\7\61\2\0\1\31"+
    "\10\0\1\31\6\0\7\61\1\222\15\61\2\0\1\61"+
    "\7\0\3\61\1\0\4\61\2\0\1\31\7\61\2\0"+
    "\1\31\10\0\1\31\6\0\4\61\1\223\20\61\2\0"+
    "\1\61\7\0\3\61\1\0\4\61\2\0\1\31\4\61"+
    "\1\224\2\61\2\0\1\31\10\0\1\31\6\0\25\61"+
    "\2\0\1\61\7\0\3\61\1\0\4\61\2\0\1\31"+
    "\7\61\2\0\1\31\10\0\1\31\6\0\4\61\1\225"+
    "\20\61\2\0\1\61\7\0\3\61\1\0\4\61\2\0"+
    "\1\31\2\61\1\226\4\61\2\0\1\31\10\0\1\31"+
    "\6\0\25\61\2\0\1\61\7\0\3\61\1\0\4\61"+
    "\2\0\1\31\7\61\2\0\1\31\10\0\1\31\6\0"+
    "\7\61\1\227\15\61\2\0\1\61\7\0\3\61\1\0"+
    "\4\61\2\0\1\31\3\61\1\230\3\61\2\0\1\31"+
    "\10\0\1\31\6\0\25\61\2\0\1\61\7\0\3\61"+
    "\1\0\4\61\2\0\1\31\2\61\1\231\4\61\2\0"+
    "\1\31\10\0\1\31\6\0\25\61\2\0\1\61\7\0"+
    "\3\61\1\0\4\61\2\0\1\31\4\61\1\232\2\61"+
    "\2\0\1\31\10\0\1\31\6\0\25\61\2\0\1\61"+
    "\7\0\3\61\1\0\4\61\2\0\1\31\7\61\2\0"+
    "\1\31\10\0\1\31\6\0\5\61\1\233\17\61\2\0"+
    "\1\61\7\0\3\61\1\0\4\61\2\0\1\31\6\61"+
    "\1\234\2\0\1\31\10\0\1\31\6\0\1\235\24\61"+
    "\2\0\1\61\7\0\3\61\1\0\4\61\2\0\1\31"+
    "\3\61\1\134\3\61\2\0\1\31\10\0\1\31\6\0"+
    "\25\61\2\0\1\61\7\0\3\61\1\0\2\61\1\236"+
    "\1\61\2\0\1\31\7\61\2\0\1\31\10\0\1\31"+
    "\6\0\25\61\2\0\1\61\7\0\3\61\1\0\4\61"+
    "\2\0\1\31\7\61\2\0\1\31\10\0\1\31\6\0"+
    "\5\61\1\237\17\61\2\0\1\61\7\0\3\61\1\0"+
    "\4\61\2\0\1\31\2\61\1\240\4\61\2\0\1\31"+
    "\10\0\1\31\6\0\25\61\2\0\1\61\6\0\23\127"+
    "\1\0\10\127\3\0\44\127\33\0\1\241\50\0\3\61"+
    "\1\0\4\61\2\0\1\31\7\61\2\0\1\31\10\0"+
    "\1\31\6\0\6\61\1\242\16\61\2\0\1\61\7\0"+
    "\3\61\1\0\4\61\2\0\1\31\2\61\1\243\4\61"+
    "\2\0\1\31\10\0\1\31\6\0\3\61\1\244\21\61"+
    "\2\0\1\61\7\0\3\61\1\0\4\61\2\0\1\31"+
    "\3\61\1\245\3\61\2\0\1\31\10\0\1\31\6\0"+
    "\25\61\2\0\1\61\7\0\3\61\1\0\4\61\2\0"+
    "\1\31\7\61\2\0\1\31\10\0\1\31\6\0\7\61"+
    "\1\246\15\61\2\0\1\61\7\0\3\61\1\0\4\61"+
    "\2\0\1\31\7\61\2\0\1\31\10\0\1\31\6\0"+
    "\1\247\24\61\2\0\1\61\7\0\3\61\1\0\4\61"+
    "\2\0\1\31\7\61\2\0\1\31\10\0\1\31\6\0"+
    "\7\61\1\250\15\61\2\0\1\61\7\0\3\61\1\0"+
    "\4\61\2\0\1\31\2\61\1\251\4\61\2\0\1\31"+
    "\10\0\1\31\6\0\25\61\2\0\1\61\7\0\3\61"+
    "\1\0\4\61\2\0\1\31\4\61\1\252\2\61\2\0"+
    "\1\31\10\0\1\31\6\0\25\61\2\0\1\61\7\0"+
    "\3\61\1\0\4\61\2\0\1\31\7\61\2\0\1\31"+
    "\10\0\1\31\6\0\11\61\1\253\13\61\2\0\1\61"+
    "\7\0\3\61\1\0\4\61\2\0\1\31\7\61\2\0"+
    "\1\31\10\0\1\31\6\0\7\61\1\254\15\61\2\0"+
    "\1\61\7\0\3\61\1\0\4\61\2\0\1\31\7\61"+
    "\2\0\1\31\10\0\1\31\6\0\13\61\1\255\11\61"+
    "\2\0\1\61\7\0\3\61\1\0\4\61\2\0\1\31"+
    "\7\61\2\0\1\31\10\0\1\31\6\0\5\61\1\256"+
    "\3\61\1\257\13\61\2\0\1\61\7\0\3\61\1\0"+
    "\4\61\2\0\1\31\7\61\2\0\1\31\10\0\1\31"+
    "\6\0\6\61\1\260\16\61\2\0\1\61\7\0\3\61"+
    "\1\0\4\61\2\0\1\31\2\61\1\261\4\61\2\0"+
    "\1\31\10\0\1\31\6\0\25\61\2\0\1\61\7\0"+
    "\3\61\1\0\4\61\2\0\1\31\7\61\2\0\1\31"+
    "\10\0\1\31\6\0\1\262\4\61\1\263\17\61\2\0"+
    "\1\61\7\0\3\61\1\0\4\61\2\0\1\31\1\264"+
    "\6\61\2\0\1\31\10\0\1\31\6\0\25\61\2\0"+
    "\1\61\7\0\3\61\1\0\4\61\2\0\1\31\7\61"+
    "\2\0\1\31\10\0\1\31\6\0\13\61\1\265\11\61"+
    "\2\0\1\61\7\0\3\61\1\0\4\61\2\0\1\31"+
    "\7\61\2\0\1\31\10\0\1\31\6\0\1\200\24\61"+
    "\2\0\1\61\7\0\3\61\1\0\4\61\2\0\1\31"+
    "\7\61\2\0\1\31\10\0\1\31\6\0\5\61\1\266"+
    "\17\61\2\0\1\61\7\0\3\61\1\0\2\61\1\267"+
    "\1\61\2\0\1\31\7\61\2\0\1\31\10\0\1\31"+
    "\6\0\5\61\1\270\17\61\2\0\1\61\7\0\3\61"+
    "\1\0\4\61\2\0\1\31\3\61\1\271\3\61\2\0"+
    "\1\31\10\0\1\31\6\0\25\61\2\0\1\61\10\0"+
    "\2\164\3\0\1\67\53\0\7\164\12\0\1\62\1\272"+
    "\1\273\1\73\4\62\2\0\1\31\7\62\1\0\1\76"+
    "\1\31\10\0\1\31\6\0\16\62\7\273\2\0\1\62"+
    "\10\0\1\274\1\275\1\276\17\0\1\277\36\0\7\275"+
    "\12\0\1\31\2\273\1\300\4\31\2\0\10\31\2\0"+
    "\1\31\10\0\1\31\6\0\16\31\7\273\2\0\1\31"+
    "\7\0\1\31\2\170\1\300\4\31\2\0\10\31\2\0"+
    "\1\31\10\0\1\31\6\0\16\31\7\170\2\0\1\31"+
    "\10\0\2\300\57\0\7\300\13\0\1\301\1\275\1\171"+
    "\56\0\7\275\13\0\3\73\56\0\7\73\13\0\2\174"+
    "\1\73\56\0\7\174\13\0\1\173\1\174\1\175\56\0"+
    "\7\174\12\0\3\61\1\0\4\61\1\302\1\303\1\31"+
    "\7\61\2\0\1\31\10\0\1\31\6\0\25\61\2\0"+
    "\1\61\7\0\3\61\1\0\4\61\2\0\1\31\3\61"+
    "\1\255\3\61\2\0\1\31\10\0\1\31\6\0\25\61"+
    "\2\0\1\61\7\0\3\61\1\0\4\61\2\0\1\31"+
    "\7\61\2\0\1\31\10\0\1\31\6\0\10\61\1\304"+
    "\14\61\2\0\1\61\7\0\3\61\1\0\2\61\1\305"+
    "\1\61\2\0\1\31\7\61\2\0\1\31\10\0\1\31"+
    "\6\0\25\61\2\0\1\61\10\0\2\306\1\73\56\0"+
    "\7\306\12\0\3\61\1\0\2\61\1\307\1\61\2\0"+
    "\1\31\7\61\2\0\1\31\10\0\1\31\6\0\25\61"+
    "\2\0\1\61\6\0\11\205\1\103\1\205\1\310\7\205"+
    "\1\103\61\205\2\311\1\205\1\311\1\205\1\311\1\205"+
    "\1\103\1\205\1\310\2\311\5\205\1\103\21\205\1\311"+
    "\2\205\1\311\2\205\1\311\7\205\7\311\11\205\11\210"+
    "\1\101\1\210\1\312\7\210\1\103\57\210\10\100\1\313"+
    "\1\314\1\210\1\102\6\210\1\315\1\103\57\100\2\205"+
    "\2\316\1\205\1\316\1\205\1\316\1\205\1\103\1\205"+
    "\1\310\2\316\5\205\1\103\21\205\1\316\2\205\1\316"+
    "\2\205\1\316\7\205\7\316\11\205\12\213\1\103\1\317"+
    "\7\213\1\103\61\213\2\320\1\213\1\320\1\213\1\320"+
    "\2\213\1\103\1\317\2\320\5\213\1\103\21\213\1\320"+
    "\2\213\1\320\2\213\1\320\7\213\7\320\11\213\12\215"+
    "\1\101\1\321\7\215\1\103\57\215\10\104\1\322\1\215"+
    "\1\323\1\105\6\215\1\324\1\103\57\104\2\213\2\325"+
    "\1\213\1\325\1\213\1\325\2\213\1\103\1\317\2\325"+
    "\5\213\1\103\21\213\1\325\2\213\1\325\2\213\1\325"+
    "\7\213\7\325\11\213\1\0\3\61\1\0\4\61\2\0"+
    "\1\31\7\61\2\0\1\31\10\0\1\31\6\0\1\326"+
    "\24\61\2\0\1\61\7\0\3\61\1\0\4\61\2\0"+
    "\1\31\7\61\2\0\1\31\10\0\1\31\6\0\1\327"+
    "\24\61\2\0\1\61\7\0\3\61\1\0\4\61\2\0"+
    "\1\31\7\61\2\0\1\31\10\0\1\31\6\0\7\61"+
    "\1\330\15\61\2\0\1\61\7\0\3\61\1\0\2\61"+
    "\1\331\1\61\2\0\1\31\7\61\2\0\1\31\10\0"+
    "\1\31\6\0\25\61\2\0\1\61\7\0\3\61\1\0"+
    "\4\61\2\0\1\31\7\61\2\0\1\31\10\0\1\31"+
    "\6\0\10\61\1\134\14\61\2\0\1\61\7\0\3\61"+
    "\1\0\4\61\2\0\1\31\7\61\2\0\1\31\10\0"+
    "\1\31\6\0\3\61\1\332\21\61\2\0\1\61\7\0"+
    "\3\61\1\0\4\61\2\0\1\31\7\61\2\0\1\31"+
    "\10\0\1\31\6\0\1\61\1\234\23\61\2\0\1\61"+
    "\7\0\3\61\1\0\4\61\2\0\1\31\2\61\1\333"+
    "\4\61\2\0\1\31\10\0\1\31\6\0\25\61\2\0"+
    "\1\61\7\0\3\61\1\0\4\61\2\0\1\31\6\61"+
    "\1\334\2\0\1\31\10\0\1\31\6\0\25\61\2\0"+
    "\1\61\7\0\3\61\1\0\4\61\2\0\1\31\7\61"+
    "\2\0\1\31\10\0\1\31\6\0\1\61\1\134\23\61"+
    "\2\0\1\61\7\0\3\61\1\0\2\61\1\335\1\61"+
    "\2\0\1\31\7\61\2\0\1\31\10\0\1\31\6\0"+
    "\25\61\2\0\1\61\7\0\3\61\1\0\4\61\2\0"+
    "\1\31\2\61\1\336\4\61\2\0\1\31\10\0\1\31"+
    "\6\0\25\61\2\0\1\61\7\0\3\61\1\0\4\61"+
    "\2\0\1\31\7\61\2\0\1\31\10\0\1\31\6\0"+
    "\14\61\1\134\10\61\2\0\1\61\7\0\3\61\1\0"+
    "\3\61\1\337\2\0\1\31\7\61\2\0\1\31\10\0"+
    "\1\31\6\0\25\61\2\0\1\61\7\0\3\61\1\0"+
    "\4\61\2\0\1\31\4\61\1\340\2\61\2\0\1\31"+
    "\10\0\1\31\6\0\25\61\2\0\1\61\6\0\23\241"+
    "\1\341\7\241\1\342\47\241\1\0\3\61\1\0\4\61"+
    "\2\0\1\31\3\61\1\343\3\61\2\0\1\31\10\0"+
    "\1\31\6\0\25\61\2\0\1\61\7\0\3\61\1\0"+
    "\4\61\2\0\1\31\7\61\2\0\1\31\10\0\1\31"+
    "\6\0\6\61\1\344\16\61\2\0\1\61\7\0\3\61"+
    "\1\0\4\61\2\0\1\31\7\61\2\0\1\31\10\0"+
    "\1\31\6\0\4\61\1\345\20\61\2\0\1\61\7\0"+
    "\3\61\1\0\4\61\2\0\1\31\6\61\1\346\2\0"+
    "\1\31\10\0\1\31\6\0\5\61\1\347\17\61\2\0"+
    "\1\61\7\0\3\61\1\0\4\61\2\0\1\31\7\61"+
    "\2\0\1\31\10\0\1\31\6\0\5\61\1\350\17\61"+
    "\2\0\1\61\7\0\3\61\1\0\4\61\2\0\1\31"+
    "\1\351\6\61\2\0\1\31\10\0\1\31\6\0\25\61"+
    "\2\0\1\61\7\0\3\61\1\0\4\61\2\0\1\31"+
    "\7\61\2\0\1\31\10\0\1\31\6\0\7\61\1\352"+
    "\15\61\2\0\1\61\7\0\3\61\1\0\4\61\2\0"+
    "\1\31\4\61\1\353\2\61\2\0\1\31\10\0\1\31"+
    "\6\0\1\61\1\354\23\61\2\0\1\61\7\0\3\61"+
    "\1\0\2\61\1\355\1\61\2\0\1\31\7\61\2\0"+
    "\1\31\10\0\1\31\6\0\16\61\1\330\1\356\1\357"+
    "\1\360\1\361\2\61\2\0\1\61\7\0\3\61\1\0"+
    "\4\61\2\0\1\31\7\61\2\0\1\31\10\0\1\31"+
    "\6\0\4\61\1\362\20\61\2\0\1\61\7\0\3\61"+
    "\1\0\2\61\1\363\1\61\2\0\1\31\7\61\2\0"+
    "\1\31\10\0\1\31\6\0\25\61\2\0\1\61\7\0"+
    "\3\61\1\0\4\61\2\0\1\31\7\61\2\0\1\31"+
    "\10\0\1\31\6\0\1\61\1\270\23\61\2\0\1\61"+
    "\7\0\3\61\1\0\4\61\2\0\1\31\2\61\1\364"+
    "\4\61\2\0\1\31\10\0\1\31\6\0\25\61\2\0"+
    "\1\61\7\0\3\61\1\0\4\61\2\0\1\31\7\61"+
    "\2\0\1\31\10\0\1\31\6\0\11\61\1\365\13\61"+
    "\2\0\1\61\7\0\3\61\1\0\4\61\2\0\1\31"+
    "\7\61\2\0\1\31\10\0\1\31\6\0\5\61\1\366"+
    "\17\61\2\0\1\61\7\0\3\61\1\0\4\61\2\0"+
    "\1\31\6\61\1\367\2\0\1\31\10\0\1\31\6\0"+
    "\25\61\2\0\1\61\7\0\3\61\1\0\4\61\2\0"+
    "\1\31\7\61\2\0\1\31\10\0\1\31\6\0\12\61"+
    "\1\370\12\61\2\0\1\61\7\0\3\61\1\0\4\61"+
    "\2\0\1\31\5\61\1\371\1\61\2\0\1\31\10\0"+
    "\1\31\6\0\25\61\2\0\1\61\7\0\3\61\1\0"+
    "\4\61\2\0\1\31\7\61\2\0\1\31\10\0\1\31"+
    "\6\0\7\61\1\372\15\61\2\0\1\61\7\0\3\61"+
    "\1\0\4\61\2\0\1\31\7\61\2\0\1\31\10\0"+
    "\1\31\6\0\1\373\24\61\2\0\1\61\7\0\3\61"+
    "\1\0\4\61\2\0\1\31\7\61\2\0\1\31\10\0"+
    "\1\31\6\0\7\61\1\374\15\61\2\0\1\61\7\0"+
    "\3\61\1\0\4\61\2\0\1\31\7\61\2\0\1\31"+
    "\10\0\1\31\6\0\2\61\1\255\22\61\2\0\1\61"+
    "\7\0\3\61\1\0\4\61\2\0\1\31\7\61\2\0"+
    "\1\31\10\0\1\31\6\0\5\61\1\375\17\61\2\0"+
    "\1\61\7\0\1\31\2\376\1\73\4\31\2\0\10\31"+
    "\2\0\1\31\10\0\1\31\6\0\16\31\7\376\2\0"+
    "\1\31\7\0\1\31\2\273\1\73\4\31\2\0\10\31"+
    "\2\0\1\31\10\0\1\31\6\0\16\31\7\273\2\0"+
    "\1\31\10\0\2\73\1\300\56\0\7\73\13\0\2\275"+
    "\1\300\56\0\7\275\13\0\1\274\1\275\1\276\56\0"+
    "\7\275\13\0\2\174\1\300\56\0\7\174\11\0\2\377"+
    "\2\u0100\1\377\1\u0100\1\377\1\u0100\4\377\2\u0100\27\377"+
    "\1\u0100\2\377\1\u0100\2\377\1\u0100\7\377\7\u0100\11\377"+
    "\2\u0101\2\u0102\1\u0101\1\u0102\1\u0101\1\u0102\4\u0101\2\u0102"+
    "\27\u0101\1\u0102\2\u0101\1\u0102\2\u0101\1\u0102\7\u0101\7\u0102"+
    "\11\u0101\1\0\3\61\1\0\4\61\2\0\1\31\3\61"+
    "\1\270\3\61\2\0\1\31\10\0\1\31\6\0\25\61"+
    "\2\0\1\61\16\0\1\u0103\11\205\1\u0104\60\0\2\205"+
    "\2\210\1\205\1\210\1\205\1\210\1\205\1\103\1\205"+
    "\1\310\2\210\5\205\1\103\21\205\1\210\2\205\1\210"+
    "\2\205\1\210\7\205\7\210\21\205\1\206\2\210\1\u0105"+
    "\6\210\1\212\60\205\2\100\2\u0106\1\100\1\u0106\1\100"+
    "\1\u0106\1\100\1\101\1\100\1\102\2\u0106\5\100\1\103"+
    "\21\100\1\u0106\2\100\1\u0106\2\100\1\u0106\7\100\7\u0106"+
    "\13\100\2\u0107\1\100\1\u0107\1\100\1\u0107\1\100\1\101"+
    "\1\100\1\102\2\u0107\5\100\1\103\21\100\1\u0107\2\100"+
    "\1\u0107\2\100\1\u0107\7\100\7\u0107\11\100\2\205\2\206"+
    "\1\205\1\206\1\205\1\206\1\205\1\103\1\205\1\310"+
    "\2\206\5\205\1\103\21\205\1\206\2\205\1\206\2\205"+
    "\1\206\7\205\7\206\11\205\10\0\1\u0108\11\213\1\u0109"+
    "\60\0\2\213\2\215\1\213\1\215\1\213\1\215\2\213"+
    "\1\103\1\317\2\215\5\213\1\103\21\213\1\215\2\213"+
    "\1\215\2\213\1\215\7\213\7\215\21\213\1\214\2\215"+
    "\1\u010a\6\215\1\220\60\213\2\104\2\u010b\1\104\1\u010b"+
    "\1\104\1\u010b\2\104\1\101\1\105\2\u010b\5\104\1\103"+
    "\21\104\1\u010b\2\104\1\u010b\2\104\1\u010b\7\104\7\u010b"+
    "\13\104\2\u010c\1\104\1\u010c\1\104\1\u010c\2\104\1\101"+
    "\1\105\2\u010c\5\104\1\103\21\104\1\u010c\2\104\1\u010c"+
    "\2\104\1\u010c\7\104\7\u010c\11\104\2\213\2\214\1\213"+
    "\1\214\1\213\1\214\2\213\1\103\1\317\2\214\5\213"+
    "\1\103\21\213\1\214\2\213\1\214\2\213\1\214\7\213"+
    "\7\214\11\213\1\0\3\61\1\0\4\61\2\0\1\31"+
    "\7\61\2\0\1\31\10\0\1\31\6\0\2\61\1\134"+
    "\22\61\2\0\1\61\7\0\3\61\1\0\4\61\2\0"+
    "\1\31\2\61\1\u010d\4\61\2\0\1\31\10\0\1\31"+
    "\6\0\25\61\2\0\1\61\7\0\3\61\1\0\4\61"+
    "\2\0\1\31\7\61\2\0\1\31\10\0\1\31\6\0"+
    "\1\61\1\340\23\61\2\0\1\61\7\0\3\61\1\0"+
    "\4\61\2\0\1\31\4\61\1\u010e\2\61\2\0\1\31"+
    "\10\0\1\31\6\0\25\61\2\0\1\61\7\0\3\61"+
    "\1\0\2\61\1\u010f\1\61\2\0\1\31\7\61\2\0"+
    "\1\31\10\0\1\31\6\0\25\61\2\0\1\61\7\0"+
    "\3\61\1\0\4\61\2\0\1\31\3\61\1\u0110\3\61"+
    "\2\0\1\31\10\0\1\31\6\0\25\61\2\0\1\61"+
    "\7\0\3\61\1\0\4\61\2\0\1\31\7\61\2\0"+
    "\1\31\10\0\1\31\6\0\1\61\1\u0111\23\61\2\0"+
    "\1\61\7\0\3\61\1\0\2\61\1\u0112\1\61\2\0"+
    "\1\31\7\61\2\0\1\31\10\0\1\31\6\0\25\61"+
    "\2\0\1\61\7\0\3\61\1\0\4\61\2\0\1\31"+
    "\7\61\2\0\1\31\10\0\1\31\6\0\16\61\1\330"+
    "\1\356\1\357\1\360\1\361\2\61\2\0\1\61\6\0"+
    "\23\u0113\1\u0114\2\u0113\1\u0115\3\u0113\1\0\1\342\47\u0113"+
    "\23\241\1\341\6\241\1\22\1\342\47\241\1\0\3\61"+
    "\1\0\2\61\1\u0116\1\61\2\0\1\31\7\61\2\0"+
    "\1\31\10\0\1\31\6\0\25\61\2\0\1\61\7\0"+
    "\3\61\1\0\4\61\2\0\1\31\2\61\1\u0117\4\61"+
    "\2\0\1\31\10\0\1\31\6\0\25\61\2\0\1\61"+
    "\7\0\3\61\1\0\4\61\2\0\1\31\7\61\2\0"+
    "\1\31\10\0\1\31\6\0\3\61\1\u0118\21\61\2\0"+
    "\1\61\7\0\3\61\1\0\4\61\2\0\1\31\2\61"+
    "\1\u0119\4\61\2\0\1\31\10\0\1\31\6\0\25\61"+
    "\2\0\1\61\7\0\3\61\1\0\4\61\2\0\1\31"+
    "\7\61\2\0\1\31\10\0\1\31\6\0\6\61\1\u011a"+
    "\16\61\2\0\1\61\7\0\3\61\1\0\4\61\2\0"+
    "\1\31\7\61\2\0\1\31\10\0\1\31\6\0\4\61"+
    "\1\270\20\61\2\0\1\61\7\0\3\61\1\0\4\61"+
    "\2\0\1\31\7\61\2\0\1\31\10\0\1\31\6\0"+
    "\3\61\1\u011b\21\61\2\0\1\61\7\0\3\61\1\0"+
    "\4\61\2\0\1\31\3\61\1\u011c\3\61\2\0\1\31"+
    "\10\0\1\31\6\0\5\61\1\u011d\17\61\2\0\1\61"+
    "\7\0\3\61\1\0\4\61\2\0\1\31\4\61\1\u011e"+
    "\2\61\2\0\1\31\10\0\1\31\6\0\25\61\2\0"+
    "\1\61\7\0\3\61\1\0\4\61\2\0\1\31\3\61"+
    "\1\u011f\3\61\2\0\1\31\10\0\1\31\6\0\25\61"+
    "\2\0\1\61\7\0\3\61\1\0\4\61\2\0\1\31"+
    "\7\61\2\0\1\31\10\0\1\31\6\0\20\61\1\330"+
    "\1\61\1\u0120\2\61\2\0\1\61\7\0\3\61\1\0"+
    "\4\61\2\0\1\31\7\61\2\0\1\31\10\0\1\31"+
    "\6\0\23\61\1\330\1\61\2\0\1\61\7\0\3\61"+
    "\1\0\4\61\2\0\1\31\7\61\2\0\1\31\10\0"+
    "\1\31\6\0\22\61\1\330\2\61\2\0\1\61\7\0"+
    "\3\61\1\0\4\61\2\0\1\31\7\61\2\0\1\31"+
    "\10\0\1\31\6\0\24\61\1\u0121\2\0\1\61\7\0"+
    "\3\61\1\0\4\61\2\0\1\31\3\61\1\u0122\3\61"+
    "\2\0\1\31\10\0\1\31\6\0\25\61\2\0\1\61"+
    "\7\0\3\61\1\0\4\61\2\0\1\31\4\61\1\u0123"+
    "\2\61\2\0\1\31\10\0\1\31\6\0\12\61\1\u0124"+
    "\12\61\2\0\1\61\7\0\3\61\1\0\4\61\2\0"+
    "\1\31\7\61\2\0\1\31\10\0\1\31\6\0\5\61"+
    "\1\u0125\17\61\2\0\1\61\7\0\3\61\1\0\4\61"+
    "\2\0\1\31\1\61\1\u0126\5\61\2\0\1\31\10\0"+
    "\1\31\6\0\25\61\2\0\1\61\7\0\3\61\1\0"+
    "\4\61\2\0\1\31\4\61\1\u0127\2\61\2\0\1\31"+
    "\10\0\1\31\6\0\25\61\2\0\1\61\7\0\3\61"+
    "\1\0\4\61\2\0\1\31\7\61\2\0\1\31\10\0"+
    "\1\31\6\0\10\61\1\u0128\14\61\2\0\1\61\7\0"+
    "\3\61\1\0\4\61\2\0\1\31\7\61\2\0\1\31"+
    "\10\0\1\31\6\0\1\u0129\24\61\2\0\1\61\7\0"+
    "\3\61\1\0\4\61\2\0\1\31\7\61\2\0\1\31"+
    "\10\0\1\31\6\0\5\61\1\u012a\17\61\2\0\1\61"+
    "\7\0\3\61\1\0\4\61\2\0\1\31\1\u012b\6\61"+
    "\2\0\1\31\10\0\1\31\6\0\25\61\2\0\1\61"+
    "\7\0\3\61\1\0\2\61\1\u012c\1\61\2\0\1\31"+
    "\7\61\2\0\1\31\10\0\1\31\6\0\25\61\2\0"+
    "\1\61\7\0\3\61\1\0\4\61\2\0\1\31\2\61"+
    "\1\u012d\4\61\2\0\1\31\10\0\1\31\6\0\25\61"+
    "\2\0\1\61\6\0\2\377\2\u012e\1\377\1\u012e\1\377"+
    "\1\u012e\1\377\1\u012f\2\377\2\u012e\27\377\1\u012e\2\377"+
    "\1\u012e\2\377\1\u012e\7\377\7\u012e\13\377\2\u0100\1\377"+
    "\1\u0100\1\377\1\u0100\1\377\1\u0130\2\377\2\u0100\27\377"+
    "\1\u0100\2\377\1\u0100\2\377\1\u0100\7\377\7\u0100\11\377"+
    "\2\u0101\2\u0131\1\u0101\1\u0131\1\u0101\1\u0131\2\u0101\1\u0132"+
    "\1\u0101\2\u0131\27\u0101\1\u0131\2\u0101\1\u0131\2\u0101\1\u0131"+
    "\7\u0101\7\u0131\13\u0101\2\u0102\1\u0101\1\u0102\1\u0101\1\u0102"+
    "\2\u0101\1\u0133\1\u0101\2\u0102\27\u0101\1\u0102\2\u0101\1\u0102"+
    "\2\u0101\1\u0102\7\u0101\7\u0102\11\u0101\2\0\2\u0134\1\0"+
    "\1\u0134\1\0\1\u0134\4\0\2\u0134\27\0\1\u0134\2\0"+
    "\1\u0134\2\0\1\u0134\7\0\7\u0134\13\0\2\u0135\1\0"+
    "\1\u0135\1\0\1\u0135\4\0\2\u0135\27\0\1\u0135\2\0"+
    "\1\u0135\2\0\1\u0135\7\0\7\u0135\11\0\11\210\1\314"+
    "\1\210\1\312\7\210\1\103\57\210\2\100\2\210\1\100"+
    "\1\210\1\100\1\210\1\100\1\101\1\100\1\102\2\210"+
    "\5\100\1\103\21\100\1\210\2\100\1\210\2\100\1\210"+
    "\7\100\7\210\13\100\2\313\1\100\1\313\1\100\1\313"+
    "\1\100\1\101\1\100\1\102\2\313\5\100\1\103\21\100"+
    "\1\313\2\100\1\313\2\100\1\313\7\100\7\313\11\100"+
    "\2\0\2\u0136\1\0\1\u0136\1\0\1\u0136\4\0\2\u0136"+
    "\27\0\1\u0136\2\0\1\u0136\2\0\1\u0136\7\0\7\u0136"+
    "\13\0\2\u0137\1\0\1\u0137\1\0\1\u0137\4\0\2\u0137"+
    "\27\0\1\u0137\2\0\1\u0137\2\0\1\u0137\7\0\7\u0137"+
    "\11\0\12\215\1\323\1\321\7\215\1\103\57\215\2\104"+
    "\2\215\1\104\1\215\1\104\1\215\2\104\1\101\1\105"+
    "\2\215\5\104\1\103\21\104\1\215\2\104\1\215\2\104"+
    "\1\215\7\104\7\215\13\104\2\322\1\104\1\322\1\104"+
    "\1\322\2\104\1\101\1\105\2\322\5\104\1\103\21\104"+
    "\1\322\2\104\1\322\2\104\1\322\7\104\7\322\11\104"+
    "\1\0\3\61\1\0\4\61\2\0\1\31\7\61\2\0"+
    "\1\31\10\0\1\31\6\0\3\61\1\u0138\21\61\2\0"+
    "\1\61\7\0\3\61\1\0\4\61\2\0\1\31\7\61"+
    "\2\0\1\31\10\0\1\31\6\0\5\61\1\u0139\17\61"+
    "\2\0\1\61\7\0\3\61\1\0\4\61\2\0\1\31"+
    "\7\61\2\0\1\31\10\0\1\31\6\0\13\61\1\270"+
    "\11\61\2\0\1\61\7\0\3\61\1\0\4\61\2\0"+
    "\1\31\2\61\1\u013a\4\61\2\0\1\31\10\0\1\31"+
    "\6\0\25\61\2\0\1\61\7\0\3\61\1\0\4\61"+
    "\2\0\1\31\1\61\1\u013b\5\61\2\0\1\31\10\0"+
    "\1\31\6\0\25\61\2\0\1\61\7\0\3\61\1\0"+
    "\4\61\2\0\1\31\7\61\2\0\1\31\10\0\1\31"+
    "\6\0\6\61\1\330\16\61\2\0\1\61\6\0\23\u0113"+
    "\1\u0114\7\u0113\1\u0114\3\u013c\67\u0113\1\u0114\6\u0113\1\u013d"+
    "\1\u0114\3\u013c\67\u0113\1\u0114\2\u0113\1\u0115\3\u0113\1\u013c"+
    "\1\342\47\u0113\1\0\3\61\1\0\4\61\2\0\1\31"+
    "\7\61\2\0\1\31\10\0\1\31\6\0\1\61\1\u013e"+
    "\23\61\2\0\1\61\7\0\3\61\1\0\4\61\2\0"+
    "\1\31\7\61\2\0\1\31\10\0\1\31\6\0\6\61"+
    "\1\255\16\61\2\0\1\61\7\0\3\61\1\0\4\61"+
    "\2\0\1\31\4\61\1\u013f\2\61\2\0\1\31\10\0"+
    "\1\31\6\0\25\61\2\0\1\61\7\0\3\61\1\0"+
    "\4\61\2\0\1\31\7\61\2\0\1\31\10\0\1\31"+
    "\6\0\12\61\1\330\12\61\2\0\1\61\7\0\3\61"+
    "\1\0\4\61\2\0\1\31\7\61\2\0\1\31\10\0"+
    "\1\31\6\0\5\61\1\u0140\17\61\2\0\1\61\7\0"+
    "\3\61\1\0\4\61\2\0\1\31\7\61\2\0\1\31"+
    "\10\0\1\31\6\0\4\61\1\u0141\20\61\2\0\1\61"+
    "\7\0\3\61\1\0\4\61\2\0\1\31\7\61\2\0"+
    "\1\31\10\0\1\31\6\0\1\u0142\24\61\2\0\1\61"+
    "\7\0\3\61\1\0\4\61\2\0\1\31\2\61\1\u0143"+
    "\4\61\2\0\1\31\10\0\1\31\6\0\25\61\2\0"+
    "\1\61\7\0\3\61\1\0\4\61\2\0\1\31\3\61"+
    "\1\u0144\3\61\2\0\1\31\10\0\1\31\6\0\25\61"+
    "\2\0\1\61\7\0\3\61\1\0\4\61\2\0\1\31"+
    "\2\61\1\u0145\4\61\2\0\1\31\10\0\1\31\6\0"+
    "\25\61\2\0\1\61\7\0\3\61\1\0\4\61\2\0"+
    "\1\31\7\61\2\0\1\31\10\0\1\31\6\0\16\61"+
    "\1\330\6\61\2\0\1\61\7\0\3\61\1\0\4\61"+
    "\2\0\1\31\7\61\2\0\1\31\10\0\1\31\6\0"+
    "\20\61\1\330\4\61\2\0\1\61\7\0\3\61\1\0"+
    "\4\61\2\0\1\31\4\61\1\134\2\61\2\0\1\31"+
    "\10\0\1\31\6\0\25\61\2\0\1\61\7\0\3\61"+
    "\1\0\2\61\1\134\1\61\2\0\1\31\7\61\2\0"+
    "\1\31\10\0\1\31\6\0\25\61\2\0\1\61\7\0"+
    "\3\61\1\0\4\61\2\0\1\31\7\61\2\0\1\31"+
    "\10\0\1\31\6\0\1\u0146\24\61\2\0\1\61\7\0"+
    "\3\61\1\0\4\61\2\0\1\31\2\61\1\u0147\4\61"+
    "\2\0\1\31\10\0\1\31\6\0\25\61\2\0\1\61"+
    "\7\0\3\61\1\0\4\61\2\0\1\31\7\61\2\0"+
    "\1\31\10\0\1\31\6\0\5\61\1\u0148\17\61\2\0"+
    "\1\61\7\0\3\61\1\0\2\61\1\255\1\61\2\0"+
    "\1\31\7\61\2\0\1\31\10\0\1\31\6\0\25\61"+
    "\2\0\1\61\7\0\3\61\1\0\4\61\2\0\1\31"+
    "\7\61\2\0\1\31\10\0\1\31\6\0\1\u0149\24\61"+
    "\2\0\1\61\7\0\3\61\1\0\4\61\2\0\1\31"+
    "\4\61\1\u014a\2\61\2\0\1\31\10\0\1\31\6\0"+
    "\25\61\2\0\1\61\7\0\3\61\1\0\4\61\2\0"+
    "\1\31\7\61\2\0\1\31\10\0\1\31\6\0\3\61"+
    "\1\u014b\21\61\2\0\1\61\7\0\3\61\1\0\4\61"+
    "\2\0\1\31\7\61\2\0\1\31\10\0\1\31\6\0"+
    "\7\61\1\u014c\15\61\2\0\1\61\7\0\3\61\1\0"+
    "\4\61\2\0\1\31\7\61\2\0\1\31\10\0\1\31"+
    "\6\0\12\61\1\u014d\12\61\2\0\1\61\10\0\2\u012e"+
    "\1\0\1\u012e\1\0\1\u012e\1\0\1\u014e\2\0\2\u012e"+
    "\27\0\1\u012e\2\0\1\u012e\2\0\1\u012e\7\0\7\u012e"+
    "\13\0\2\u0131\1\0\1\u0131\1\0\1\u0131\2\0\1\u014e"+
    "\1\0\2\u0131\27\0\1\u0131\2\0\1\u0131\2\0\1\u0131"+
    "\7\0\7\u0131\13\0\2\205\1\0\1\205\1\0\1\205"+
    "\4\0\2\205\27\0\1\205\2\0\1\205\2\0\1\205"+
    "\7\0\7\205\13\0\2\u0103\1\0\1\u0103\1\0\1\u0103"+
    "\4\0\2\u0103\27\0\1\u0103\2\0\1\u0103\2\0\1\u0103"+
    "\7\0\7\u0103\13\0\2\213\1\0\1\213\1\0\1\213"+
    "\4\0\2\213\27\0\1\213\2\0\1\213\2\0\1\213"+
    "\7\0\7\213\13\0\2\u0108\1\0\1\u0108\1\0\1\u0108"+
    "\4\0\2\u0108\27\0\1\u0108\2\0\1\u0108\2\0\1\u0108"+
    "\7\0\7\u0108\12\0\3\61\1\0\2\61\1\344\1\61"+
    "\2\0\1\31\7\61\2\0\1\31\10\0\1\31\6\0"+
    "\25\61\2\0\1\61\7\0\3\61\1\0\4\61\2\0"+
    "\1\31\7\61\2\0\1\31\10\0\1\31\6\0\4\61"+
    "\1\u014f\20\61\2\0\1\61\7\0\3\61\1\0\2\61"+
    "\1\u0150\1\61\2\0\1\31\7\61\2\0\1\31\10\0"+
    "\1\31\6\0\25\61\2\0\1\61\6\0\23\u013c\1\u0151"+
    "\7\u013c\1\u0152\47\u013c\34\u013d\3\0\44\u013d\1\0\3\61"+
    "\1\0\4\61\2\0\1\31\7\61\2\0\1\31\10\0"+
    "\1\31\6\0\1\61\1\330\23\61\2\0\1\61\7\0"+
    "\3\61\1\0\4\61\2\0\1\31\4\61\1\u0153\2\61"+
    "\2\0\1\31\10\0\1\31\6\0\25\61\2\0\1\61"+
    "\7\0\3\61\1\0\4\61\2\0\1\31\7\61\2\0"+
    "\1\31\10\0\1\31\6\0\6\61\1\u0138\16\61\2\0"+
    "\1\61\7\0\3\61\1\0\4\61\2\0\1\31\7\61"+
    "\2\0\1\31\10\0\1\31\6\0\3\61\1\u0154\21\61"+
    "\2\0\1\61\7\0\3\61\1\0\4\61\2\0\1\31"+
    "\6\61\1\u0123\2\0\1\31\10\0\1\31\6\0\25\61"+
    "\2\0\1\61\7\0\3\61\1\0\4\61\2\0\1\31"+
    "\6\61\1\u0155\2\0\1\31\10\0\1\31\6\0\25\61"+
    "\2\0\1\61\7\0\3\61\1\0\4\61\2\0\1\31"+
    "\7\61\2\0\1\31\10\0\1\31\6\0\1\u0156\24\61"+
    "\2\0\1\61\7\0\3\61\1\0\4\61\2\0\1\31"+
    "\4\61\1\u0157\2\61\2\0\1\31\10\0\1\31\6\0"+
    "\25\61\2\0\1\61\7\0\3\61\1\0\4\61\2\0"+
    "\1\31\7\61\2\0\1\31\10\0\1\31\6\0\12\61"+
    "\1\134\12\61\2\0\1\61\7\0\3\61\1\0\2\61"+
    "\1\122\1\61\2\0\1\31\7\61\2\0\1\31\10\0"+
    "\1\31\6\0\25\61\2\0\1\61\7\0\3\61\1\0"+
    "\2\61\1\u014b\1\61\2\0\1\31\7\61\2\0\1\31"+
    "\10\0\1\31\6\0\25\61\2\0\1\61\7\0\3\61"+
    "\1\0\2\61\1\u0158\1\61\2\0\1\31\7\61\2\0"+
    "\1\31\10\0\1\31\6\0\25\61\2\0\1\61\7\0"+
    "\3\61\1\0\4\61\2\0\1\31\2\61\1\u0159\4\61"+
    "\2\0\1\31\10\0\1\31\6\0\25\61\2\0\1\61"+
    "\7\0\3\61\1\0\4\61\2\0\1\31\3\61\1\344"+
    "\3\61\2\0\1\31\10\0\1\31\6\0\25\61\2\0"+
    "\1\61\6\0\23\u013c\1\u0151\2\u013c\1\u015a\3\u013c\1\0"+
    "\1\u0152\72\u013c\1\u0151\6\u013c\1\0\1\u0152\47\u013c\1\0"+
    "\3\61\1\0\4\61\2\0\1\31\7\61\2\0\1\31"+
    "\10\0\1\31\6\0\13\61\1\u015b\11\61\2\0\1\61"+
    "\7\0\3\61\1\0\4\61\2\0\1\31\4\61\1\u015c"+
    "\2\61\2\0\1\31\10\0\1\31\6\0\25\61\2\0"+
    "\1\61\7\0\3\61\1\0\4\61\2\0\1\31\7\61"+
    "\2\0\1\31\10\0\1\31\6\0\3\61\1\u015d\21\61"+
    "\2\0\1\61\7\0\3\61\1\0\4\61\2\0\1\31"+
    "\7\61\2\0\1\31\10\0\1\31\6\0\7\61\1\u0158"+
    "\15\61\2\0\1\61\7\0\3\61\1\0\2\61\1\u015e"+
    "\1\61\2\0\1\31\7\61\2\0\1\31\10\0\1\31"+
    "\6\0\25\61\2\0\1\61\6\0\23\u013c\1\u0151\2\u013c"+
    "\1\u015a\4\u013c\1\u0152\47\u013c\1\0\3\61\1\0\4\61"+
    "\2\0\1\31\4\61\1\u015f\2\61\2\0\1\31\10\0"+
    "\1\31\6\0\25\61\2\0\1\61\7\0\3\61\1\0"+
    "\4\61\2\0\1\31\7\61\2\0\1\31\10\0\1\31"+
    "\6\0\3\61\1\u0160\21\61\2\0\1\61\7\0\3\61"+
    "\1\0\4\61\2\0\1\31\7\61\2\0\1\31\10\0"+
    "\1\31\6\0\4\61\1\122\20\61\2\0\1\61\7\0"+
    "\3\61\1\0\4\61\2\0\1\31\7\61\2\0\1\31"+
    "\10\0\1\31\6\0\1\u0161\24\61\2\0\1\61\7\0"+
    "\3\61\1\0\4\61\2\0\1\31\7\61\2\0\1\31"+
    "\10\0\1\31\6\0\7\61\1\u0162\15\61\2\0\1\61"+
    "\7\0\3\61\1\0\4\61\2\0\1\31\7\61\2\0"+
    "\1\31\10\0\1\31\6\0\7\61\1\344\15\61\2\0"+
    "\1\61\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19832];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\17\1\1\11\1\1\3\11\7\1\2\11"+
    "\11\1\2\11\3\1\3\11\15\1\1\0\1\1\1\0"+
    "\1\11\1\1\1\11\1\0\21\1\1\11\1\1\1\0"+
    "\3\11\41\1\1\0\13\1\1\0\5\1\1\0\56\1"+
    "\1\0\3\1\2\0\2\1\1\0\1\1\1\0\2\1"+
    "\1\0\1\1\1\0\1\1\1\0\2\1\1\0\1\1"+
    "\1\0\52\1\6\0\1\1\4\0\1\1\2\0\41\1"+
    "\1\0\2\1\1\0\2\1\4\0\4\1\1\0\21\1"+
    "\1\11\24\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[354];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 202) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return new Symbol(sym.ERROR_CEROS_A_LA_IZQUIERDA, yychar, yyline, yytext());
            }
          case 51: break;
          case 2: 
            { return new Symbol(sym.ERROR, yychar, yyline, yytext());
            }
          case 52: break;
          case 3: 
            { return new Symbol(sym.Comillas, yychar, yyline, yytext());
            }
          case 53: break;
          case 4: 
            { /* ignore */
            }
          case 54: break;
          case 5: 
            { return new Symbol(sym.Op_Aritmetico, yychar, yyline, yytext());
            }
          case 55: break;
          case 6: 
            { return new Symbol(sym.P_coma, yychar, yyline, yytext());
            }
          case 56: break;
          case 7: 
            { return new Symbol(sym.Parentesis_c, yychar, yyline, yytext());
            }
          case 57: break;
          case 8: 
            { return new Symbol(sym.Pregunta, yychar, yyline, yytext());
            }
          case 58: break;
          case 9: 
            { return new Symbol(sym.ERROR_CARACTERES_NO_VALIDOS, yychar, yyline, yytext());
            }
          case 59: break;
          case 10: 
            { return new Symbol(sym.Op_relacional, yychar, yyline, yytext());
            }
          case 60: break;
          case 11: 
            { return new Symbol(sym.Corchete_a, yychar, yyline, yytext());
            }
          case 61: break;
          case 12: 
            { return new Symbol(sym.Corchete_c, yychar, yyline, yytext());
            }
          case 62: break;
          case 13: 
            { return new Symbol(sym.Coma, yychar, yyline, yytext());
            }
          case 63: break;
          case 14: 
            { return new Symbol(sym.Dos_Puntos, yychar, yyline, yytext());
            }
          case 64: break;
          case 15: 
            { return new Symbol(sym.Igual, yychar, yyline, yytext());
            }
          case 65: break;
          case 16: 
            { return new Symbol(sym.Op_logico, yychar, yyline, yytext());
            }
          case 66: break;
          case 17: 
            { return new Symbol(sym.Parentesis_a, yychar, yyline, yytext());
            }
          case 67: break;
          case 18: 
            { return new Symbol(sym.Llave_a, yychar, yyline, yytext());
            }
          case 68: break;
          case 19: 
            { return new Symbol(sym.Llave_c, yychar, yyline, yytext());
            }
          case 69: break;
          case 20: 
            { return new Symbol(sym.Identificador, yychar, yyline, yytext());
            }
          case 70: break;
          case 21: 
            { return new Symbol(sym.ERROR_IDENTIFICADOR, yychar, yyline, yytext());
            }
          case 71: break;
          case 22: 
            { return new Symbol(sym.Numero, yychar, yyline, yytext());
            }
          case 72: break;
          case 23: 
            { return new Symbol(sym.ERROR_NOTACION_CIENTIFICA, yychar, yyline, yytext());
            }
          case 73: break;
          case 24: 
            { return new Symbol(sym.String, yychar, yyline, yytext());
            }
          case 74: break;
          case 25: 
            { return new Symbol(sym.ERROR_STRING, yychar, yyline, yytext());
            }
          case 75: break;
          case 26: 
            { return new Symbol(sym.Op_atribucion, yychar, yyline, yytext());
            }
          case 76: break;
          case 27: 
            { return new Symbol(sym.OPERADOR, yychar, yyline, yytext());
            }
          case 77: break;
          case 28: 
            { return new Symbol(sym.PALABRA_RESERVADA, yychar, yyline, yytext());
            }
          case 78: break;
          case 29: 
            { return new Symbol(sym.If, yychar, yyline, yytext());
            }
          case 79: break;
          case 30: 
            { return new Symbol(sym.Do, yychar, yyline, yytext());
            }
          case 80: break;
          case 31: 
            { return new Symbol(sym.For, yychar, yyline, yytext());
            }
          case 81: break;
          case 32: 
            { return new Symbol(sym.ERROR_COMENTARIO, yychar, yyline, yytext());
            }
          case 82: break;
          case 33: 
            { return new Symbol(sym.T_dato, yychar, yyline, yytext());
            }
          case 83: break;
          case 34: 
            { return new Symbol(sym.UNIDAD, yychar, yyline, yytext());
            }
          case 84: break;
          case 35: 
            { return new Symbol(sym.Enum, yychar, yyline, yytext());
            }
          case 85: break;
          case 36: 
            { return new Symbol(sym.Else, yychar, yyline, yytext());
            }
          case 86: break;
          case 37: 
            { return new Symbol(sym.Op_booleano, yychar, yyline, yytext());
            }
          case 87: break;
          case 38: 
            { return new Symbol(sym.TRANSAC, yychar, yyline, yytext());
            }
          case 88: break;
          case 39: 
            { return new Symbol(sym.Main, yychar, yyline, yytext());
            }
          case 89: break;
          case 40: 
            { return new Symbol(sym.While, yychar, yyline, yytext());
            }
          case 90: break;
          case 41: 
            { return new Symbol(sym.ERROR_HEXADECIMAL, yychar, yyline, yytext());
            }
          case 91: break;
          case 42: 
            { return new Symbol(sym.Return, yychar, yyline, yytext());
            }
          case 92: break;
          case 43: 
            { return new Symbol(sym.Struct, yychar, yyline, yytext());
            }
          case 93: break;
          case 44: 
            { return new Symbol(sym.Pragma, yychar, yyline, yytext());
            }
          case 94: break;
          case 45: 
            { return new Symbol(sym.Visibilidad, yychar, yyline, yytext());
            }
          case 95: break;
          case 46: 
            { return new Symbol(sym.Cadena, yychar, yyline, yytext());
            }
          case 96: break;
          case 47: 
            { return new Symbol(sym.Modificador, yychar, yyline, yytext());
            }
          case 97: break;
          case 48: 
            { return new Symbol(sym.Function, yychar, yyline, yytext());
            }
          case 98: break;
          case 49: 
            { return new Symbol(sym.Solidity, yychar, yyline, yytext());
            }
          case 99: break;
          case 50: 
            { return new Symbol(sym.Contract, yychar, yyline, yytext());
            }
          case 100: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
