package lexico;

import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}
:};

terminal Linea, Comillas, T_dato, Cadena, If, Else, Do, While, For, Dos_Puntos,
    Igual, Op_logico, Op_relacional, Op_atribucion, Op_booleano, Parentesis_a, Parentesis_c,
    Llave_a, Llave_c, Corchete_a, Corchete_c, Main, P_coma, Identificador,
    Numero,   Contract, Enum, Pragma, Solidity, Struct,Function,Modificador, Coma,
    String, Return,  Op_Aritmetico, Visibilidad, Pregunta, PALABRA_RESERVADA, UNIDAD, TRANSAC,ERROR_CEROS_A_LA_IZQUIERDA, ERROR_CARACTERES_NO_VALIDOS, ERROR_IDENTIFICADOR
    , ERROR_NOTACION_CIENTIFICA, STRING, ERROR_STRING, OPERADOR, ERROR_COMENTARIO,ERROR_HEXADECIMAL,  ERROR;

non terminal INICIO, SENTENCIA, DECLARACION, DECLARACION_FOR, IF, IF_ELSE, LISTA, PARAMETROS,
    WHILE, DO_WHILE, FOR, SENTENCIA_BOOLEANA, SENTENCIA_FOR, ENUMERADOR, VARIABLES, ESTRUCTURA, FUNCION ;

start with INICIO;

INICIO ::= 
    Pragma Solidity Numero Numero P_coma Contract Identificador Llave_a Llave_c |

    Pragma Solidity Numero Numero P_coma Contract Identificador Llave_a ENUMERADOR Llave_c |
    Pragma Solidity Numero Numero P_coma Contract Identificador Llave_a ENUMERADOR VARIABLES Llave_c |
    Pragma Solidity Numero Numero P_coma Contract Identificador Llave_a ENUMERADOR ESTRUCTURA Llave_c |
    Pragma Solidity Numero Numero P_coma Contract Identificador Llave_a ENUMERADOR FUNCION Llave_c |
    Pragma Solidity Numero Numero P_coma Contract Identificador Llave_a ENUMERADOR VARIABLES ESTRUCTURA Llave_c |
    Pragma Solidity Numero Numero P_coma Contract Identificador Llave_a ENUMERADOR VARIABLES FUNCION Llave_c |
    Pragma Solidity Numero Numero P_coma Contract Identificador Llave_a ENUMERADOR ESTRUCTURA FUNCION Llave_c |
    Pragma Solidity Numero Numero P_coma Contract Identificador Llave_a ENUMERADOR VARIABLES ESTRUCTURA FUNCION Llave_c |

    Pragma Solidity Numero Numero P_coma Contract Identificador Llave_a VARIABLES Llave_c |
    Pragma Solidity Numero Numero P_coma Contract Identificador Llave_a VARIABLES ESTRUCTURA Llave_c |
    Pragma Solidity Numero Numero P_coma Contract Identificador Llave_a VARIABLES FUNCION Llave_c |
    Pragma Solidity Numero Numero P_coma Contract Identificador Llave_a VARIABLES ESTRUCTURA FUNCION Llave_c |

    Pragma Solidity Numero Numero P_coma Contract Identificador Llave_a ESTRUCTURA Llave_c |
    Pragma Solidity Numero Numero P_coma Contract Identificador Llave_a ESTRUCTURA FUNCION Llave_c |

    Pragma Solidity Numero Numero P_coma Contract Identificador Llave_a FUNCION Llave_c 
;

ENUMERADOR ::= 
    ENUMERADOR Enum Identificador Llave_a LISTA Llave_c |
    Enum Identificador Llave_a LISTA Llave_c
;
LISTA ::= 
    LISTA Coma Identificador |
    Identificador
;
VARIABLES ::=
    VARIABLES T_dato Visibilidad Identificador P_coma |
    VARIABLES T_dato Corchete_a Corchete_c Identificador P_coma |
    VARIABLES T_dato Visibilidad Identificador Igual Numero P_coma |
    VARIABLES T_dato Visibilidad Identificador Igual String P_coma |
    VARIABLES T_dato Visibilidad Identificador Igual Op_booleano P_coma |
    VARIABLES T_dato Visibilidad Identificador Igual Identificador P_coma |

    T_dato Visibilidad Identificador P_coma |
    T_dato Corchete_a Corchete_c Identificador P_coma |
    T_dato Visibilidad Identificador Igual Numero P_coma |
    T_dato Visibilidad Identificador Igual String P_coma |
    T_dato Visibilidad Identificador Igual Op_booleano P_coma |
    T_dato Visibilidad Identificador Igual Identificador P_coma
    
;
ESTRUCTURA ::=
    ESTRUCTURA Struct Identificador Llave_a VARIABLES Llave_c |
    Struct Identificador Llave_a VARIABLES Llave_c
;
FUNCION ::=
    FUNCION Function Identificador Parentesis_a PARAMETROS Parentesis_c Llave_a VARIABLES SENTENCIA Return Identificador Llave_c |
    FUNCION Function Identificador Parentesis_a PARAMETROS Parentesis_c Modificador Llave_a VARIABLES SENTENCIA Return Identificador Llave_c |
    FUNCION Function Identificador Parentesis_a PARAMETROS Parentesis_c Return Parentesis_a T_dato Identificador  Parentesis_c Llave_a VARIABLES SENTENCIA Return Identificador Llave_c |
    FUNCION Function Identificador Parentesis_a PARAMETROS Parentesis_c Modificador Return Parentesis_a T_dato Identificador  Parentesis_c Llave_a VARIABLES SENTENCIA Return Identificador Llave_c |

    Function Identificador Parentesis_a PARAMETROS Parentesis_c Llave_a VARIABLES SENTENCIA Return Identificador Llave_c |
    Function Identificador Parentesis_a PARAMETROS Parentesis_c Modificador Llave_a VARIABLES SENTENCIA Return Identificador Llave_c |
    Function Identificador Parentesis_a PARAMETROS Parentesis_c Return Parentesis_a T_dato Identificador  Parentesis_c Llave_a VARIABLES SENTENCIA Return Identificador Llave_c |
    Function Identificador Parentesis_a PARAMETROS Parentesis_c Modificador Return Parentesis_a T_dato Identificador  Parentesis_c Llave_a VARIABLES SENTENCIA Return Identificador Llave_c
;
PARAMETROS ::=
    PARAMETROS Coma T_dato Identificador |
    T_dato Identificador
;
SENTENCIA ::= 
    SENTENCIA DECLARACION |
    DECLARACION |
    SENTENCIA IF | 
    IF |
    SENTENCIA IF_ELSE |
    IF_ELSE |
    SENTENCIA WHILE |
    WHILE |
    SENTENCIA DO_WHILE
    DO_WHILE |
    SENTENCIA FOR |
    FOR
;
DECLARACION ::= 
    Identificador Igual Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Pregunta Identificador Dos_Puntos Identificador P_coma
;
IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c
;
SENTENCIA_BOOLEANA ::= 
    Op_booleano | 
    Identificador Op_relacional Op_booleano |
    Identificador Op_relacional Numero |
    Identificador Op_relacional Identificador |
    Identificador Op_relacional Comillas Comillas |
    Identificador Op_relacional Comillas Identificador Comillas
;
IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c
;
WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c
;
DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_coma
;
FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c
;
SENTENCIA_FOR ::=
    T_dato Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR |
    Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR
;
DECLARACION_FOR ::= 
    Identificador Op_atribucion Numero
;




